openapi: 3.0.0
info:
  title: Arratech API
  version: 1.0.0
  description: >-
    Multi-tenancy API for e-invoicing services. This API is work in progress and
    may contain faulty or incomplete documentation.


    ## How to read this API

    The API is structured in two sections, the first section is the API
    endpoints and the second section is the data types. In the data type section
    all properties for the full datatypes are listed and described. Different
    endpoints are then using different subsets of the full datatypes, e.g. a
    read endpoint typically returns more properties than an update endpoint, so
    each endpoint lists the subset of the datatype that applies to that
    endpoint.
servers:
  - url: 'https://api.arratech.com'
    description: Production Server
  - url: 'https://test.ion-ap.net'
tags: []
paths:
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      description: Retrieves a paginated list of all users. Requires superadmin role.
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: 'Maximum number of users to return (10-1000, default: 100)'
          required: false
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 100
            example: 100
        - name: lastEvaluatedKey
          in: query
          description: Token for pagination. Use this to get the next page of results.
          required: false
          schema:
            type: string
            example: pagination-token
      responses:
        '200':
          description: Paginated list of users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                    description: Array of users for the current page
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - items
                  - pagination
        '400':
          description: Bad Request - Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Limit:
                  value:
                    code: AT-1055
                    error: Pagination limit must be between 10 and 1000
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have superadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to fetch users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /users/me:
    get:
      summary: Get current user
      tags:
        - Users
      description: Retrieves the current user's information. Requires user role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1014
                error: User not found
        '500':
          description: Internal Server Error - Failed to fetch user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/users/{userId}':
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the user
    get:
      summary: Get user by ID
      tags:
        - Users
      description: Retrieves a specific user by their ID. Requires superadmin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have superadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1014
                error: User not found
        '500':
          description: Internal Server Error - Failed to fetch user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    put:
      summary: Update user
      tags:
        - Users
      description: >-
        Updates a user's information. User can only update their own
        information.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john.doe@example.com
                role:
                  type: string
                  enum:
                    - superadmin
                    - user
                  example: user
                  description: User role - only superadmins can modify this field
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                Invalid Role:
                  value:
                    code: AT-1048
                    error: Role must be either "superadmin" or "user"
                No Fields to Update:
                  value:
                    code: AT-1017
                    error: No valid fields provided to update
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: >-
            Forbidden - User cannot update other users or modify roles without
            superadmin privileges
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Access Forbidden:
                  value:
                    code: AT-1086
                    error: Access forbidden
                Role Update Forbidden:
                  value:
                    code: AT-1086
                    error: Access forbidden
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1014
                error: User not found
        '500':
          description: Internal Server Error - Failed to update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    delete:
      summary: Delete user
      tags:
        - Users
      description: Deletes a user account.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1014
                error: User not found
        '500':
          description: Internal Server Error - Failed to delete user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /users/batch-delete:
    post:
      summary: Delete users in batch
      tags:
        - Users
      description: Deletes multiple users simultaneously.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - userIds
      responses:
        '204':
          description: Users deleted successfully
        '1014':
          description: Not Found - User(s) not found
        '1018':
          description: Unauthorized - Invalid or missing token
        '1093':
          description: User ID(s) required
  '/users/{userId}/leave_org':
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the user
    post:
      summary: Leave organization
      tags:
        - Users
      description: >-
        Removes the user from their current organization. User can only leave
        their own organization.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgRef:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: ID of the organization to leave
              required:
                - organisation
      responses:
        '200':
          description: Successfully left organization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: >-
                      User 123e4567-e89b-12d3-a456-426614174000 left
                      organisation 123e4567-e89b-12d3-a456-426614174000
        '400':
          description: Bad Request - Missing or invalid organisation in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                Organization ID Required:
                  value:
                    code: AT-1021
                    error: Organization ID is required
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User cannot leave other users' organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - User or membership not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                User Not Found:
                  value:
                    code: AT-1014
                    error: User not found
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Membership Not Found:
                  value:
                    code: AT-1019
                    error: >-
                      Member not found in organisation
                      '123e4567-e89b-12d3-a456-426614174000'
        '500':
          description: Internal Server Error - Failed to leave organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/users/{userId}/join_org':
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the user
    post:
      summary: Request to join organization
      tags:
        - Users
      description: >-
        Sends a request to join an organization. User can only request to join
        for themselves.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgId:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
              required:
                - orgId
      responses:
        '200':
          description: Join request sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                Already Member:
                  value:
                    code: AT-1041
                    error: User is already a member of the organisation
                Already Pending:
                  value:
                    code: AT-1082
                    error: User is already a pending member of the organisation
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User cannot request to join for other users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - User or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                User Not Found:
                  value:
                    code: AT-1014
                    error: User not found
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
        '500':
          description: Internal Server Error - Failed to process join request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/users/{userId}/memberships':
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the user
    get:
      summary: Get user memberships
      tags:
        - Users
      description: >-
        Retrieves all organization memberships for a specific user. Requires
        superadmin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User memberships retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have superadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1014
                error: User not found
        '500':
          description: Internal Server Error - Failed to retrieve user memberships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /users/login:
    parameters: []
    post:
      summary: Login user
      tags:
        - Users
      description: Logs in a user and returns an access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: my_username
                  description: Username of the user
                password:
                  type: string
                  example: my_password
                  description: Password of the user
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: >-
                      OOFNZ@*H4IN$NZqtV1PfCMjUccoAZPV6VlM07yBe30Yd%FtjNpf^NV%32yqB7wSg*hkf
                  refreshToken:
                    type: string
                    example: >-
                      0i*gmQEco0KW!$SfTp8gyXuEa3w%KTyLTJeFMHuBDuKiJ^!tD4A8@dNK$nS^&LDJ0jai
        '400':
          description: 'Bad Request, failed to login user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Missing Fields:
                  value:
                    code: AT-1016
                    error: Username and password are required
                Login Failed:
                  value:
                    code: AT-1015
                    error: User login failed
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
        '500':
          description: Internal Server Error - Failed to login user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /orgs:
    get:
      summary: Get all organisations
      tags:
        - Organisations
      description: |-
        Retrieves a paginated list of all organisations. 

        **Lowest role:** <code>superadmin</code>

        **Datatype:** [Organisation](#model-Organisation)
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: 'Maximum number of organisations to return (10-1000, default: 100)'
          required: false
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 100
            example: 100
        - name: lastEvaluatedKey
          in: query
          description: Token for pagination. Use this to get the next page of results.
          required: false
          schema:
            type: string
            example: pagination-token
      responses:
        '200':
          description: Paginated list of organisations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Organisation'
                    description: Array of organisations for the current page
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - items
                  - pagination
        '400':
          description: Bad Request - Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Limit:
                  value:
                    code: AT-1055
                    error: Pagination limit must be between 10 and 1000
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have superadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to fetch organisations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    post:
      summary: Create a new organisation
      tags:
        - Organisations
      description: |2

          Creates a new organisation. 
          
          **Lowest role:** <code>user</code>
          
          **Datatype:** [Organisation](#model-Organisation)
          
          ### Datatype properties in request
          
          | Property | Required |
          |----------|----------|
          | <code>type</code> | ✓ |
          | <code>legalName</code> | ✓ |
          | <code>countryCode</code> | ✓ |
          | <code>legalIdentifier</code> | ✓ |
          | <code>legalIdentifierCode</code> | ✓ |
          | <code>shortName</code> | |
          | <code>sharedModeEnabled</code> | |
          | <code>certificates</code> | |
          | <code>businessContact</code> | |
          
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            examples:
              minimal:
                summary: Minimal create
                value:
                  legalName: Acme Corporation Ltd
                  countryCode: SE
                  legalIdentifier: '123456789'
                  legalIdentifierCode: 'SE:ORGNR'
      responses:
        '201':
          description: Organisation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                Legal Identifier Exists:
                  value:
                    code: AT-1047
                    error: An organization with this legal identifier already exists
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to create organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    get:
      summary: Get organisation by ID
      tags:
        - Organisations
      description: |-
        Retrieves a specific organisation by its ID.

        **Lowest role:** <code>orgmember</code>

        **Datatype:** [Organisation](#model-Organisation)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Organisation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
              example:
                type: ORGANISATION
                id: 123e4567-e89b-12d3-a456-426614174000
                legalName: Acme Corporation Ltd
                shortName: Acme Corp
                countryCode: SE
                legalIdentifier: '123456789'
                legalIdentifierCode: 'SE:ORGNR'
                organisationMode: DEMO
                modeChangeRequest: SHARED
                certificates:
                  - name: Production Certificate
                    type: X509
                    id: cert-123
                contacts:
                  - name: John Doe
                    email: info@acme.com
                    phone: +1-555-1234
                    title: Acme Corporation
                    contactType: BUSINESS
                    webContactUrl: 'https://acme.com'
                    annotation: Business contact information
                businessAddress:
                  streetAddress: 123 Main St
                  city: Anytown
                  country: United States
                  postalCode: '12345'
                website: 'https://www.acme.com'
                createdAt: '2024-03-20T10:00:00Z'
                createdBy:
                  userId: user-uuid-1
                lastModifiedAt: '2024-03-21T10:00:00Z'
                lastModifiedBy:
                  userId: user-uuid-2
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Access Forbidden:
                  value:
                    code: AT-1086
                    error: Access forbidden
                User Not Member:
                  value:
                    code: AT-1050
                    error: User is not a member of this organization
        '404':
          description: Not Found - Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
        '500':
          description: Internal Server Error - Failed to fetch organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    put:
      summary: Update organisation
      tags:
        - Organisations
      description: >-
        Updates an existing organisation.


        **Lowest role:** <code>orgmember</code>


        **Datatype:** [Organisation](#model-Organisation)


        ### Mode Change Workflow


        **Request mode change (org admin):**

        - Set <code>modeChangeRequest</code> to desired mode (WHITELABEL or
        SHARED)

        - Validates against current <code>organisationMode</code>

        - DEMO can request WHITELABEL or SHARED

        - WHITELABEL can request SHARED

        - SHARED cannot request changes


        **Approve mode change (superadmin only):**

        - Set <code>organisationMode</code> to requested mode

        - Automatically clears <code>modeChangeRequest</code>


        **Reject mode change (superadmin only):**

        - Set <code>modeChangeRequest</code> to null


        ### Datatype properties in request


        | Property | Required |

        |----------|----------|

        | <code>type</code> | ✓ |

        | <code>legalName</code> | ✓ |

        | <code>countryCode</code> | ✓ |

        | <code>legalIdentifier</code> | ✓ |

        | <code>legalIdentifierCode</code> | ✓ |

        | <code>shortName</code> | |

        | <code>organisationMode</code> | (superadmin only) |

        | <code>modeChangeRequest</code> | |

        | <code>sharedModeEnabled</code> | |

        | <code>certificates</code> | |

        | <code>businessContact</code> | |
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            examples:
              minimal:
                summary: Minimal Update
                value:
                  legalName: Acme Corporation Ltd
                  countryCode: SE
                  legalIdentifier: '123456789'
                  legalIdentifierCode: 'SE:ORGNR'
              requestModeChange:
                summary: Request Mode Change (Org Admin)
                value:
                  modeChangeRequest: WHITELABEL
              approveModeChange:
                summary: Approve Mode Change (Superadmin)
                value:
                  organisationMode: WHITELABEL
              rejectModeChange:
                summary: Reject Mode Change (Superadmin)
                value:
                  modeChangeRequest: null
      responses:
        '200':
          description: Organisation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                No Fields to Update:
                  value:
                    code: AT-1052
                    error: Request body is empty
                Invalid Fields:
                  value:
                    code: AT-1053
                    error: >-
                      Only legalName, shortName can be updated. Invalid fields:
                      invalidField
                Legal Identifier Exists:
                  value:
                    code: AT-1047
                    error: An organization with this legal identifier already exists
                Invalid Mode Change:
                  value:
                    code: AT-1054
                    error: >-
                      Invalid mode change request: Organisations in SHARED mode
                      cannot request mode changes
                Unauthorized Mode Update:
                  value:
                    code: AT-1049
                    error: Unauthorized
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Access Forbidden:
                  value:
                    code: AT-1086
                    error: Access forbidden
                User Not Member:
                  value:
                    code: AT-1050
                    error: User is not a member of this organization
                User Not Admin:
                  value:
                    code: AT-1051
                    error: Only orgadmins can update organization details
        '404':
          description: Not Found - Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
        '500':
          description: Internal Server Error - Failed to update organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    delete:
      summary: Delete organisation
      tags:
        - Organisations
      description: |-
        Deletes an organisation.

        **Lowest role:** <code>superadmin</code>
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Organisation deleted successfully
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have superadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
        '500':
          description: Internal Server Error - Failed to delete organisation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /orgs/batch-delete:
    post:
      summary: Delete organisations in batch
      tags:
        - Organisations
      description: Deletes multiple organisations in a single operation.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - orgIds
      responses:
        '204':
          description: Organisation(s) deleted successfully
        '1003':
          description: Not Found - Organisation(s) not found
        '1018':
          description: Unauthorized - Invalid or missing token
        '1091':
          description: Organisation ID(s) required
  '/orgs/{orgId}/child_orgs':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the parent organisation
    get:
      summary: Get child organisations
      tags:
        - Child Organisations
      description: >-
        Retrieves a list of all child organisations for a given parent
        organisation. Requires orgmember role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of child organisations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organisation'
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have required role
        '404':
          description: Not Found - Parent organisation not found
    post:
      summary: Create child organisation
      tags:
        - Child Organisations
      description: >-
        Creates a new child organisation under the specified parent
        organisation. Requires orgmember role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '201':
          description: Child organisation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have required role
        '404':
          description: Not Found - Parent organisation not found
  '/orgs/{orgId}/child_orgs/batch_delete':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the parent organisation
    post:
      summary: Delete multiple child organisations
      tags:
        - Child Organisations
      description: >-
        Deletes multiple child organisations in a single operation. Requires
        orgmember role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                childOrgIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of child organisation IDs to delete
              required:
                - childOrgIds
      responses:
        '204':
          description: Child organisations deleted successfully
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have required role
        '404':
          description: Not Found - Parent organisation not found
  '/orgs/{orgId}/child_orgs/{childOrgId}':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the parent organisation
      - name: childOrgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the child organisation
    put:
      summary: Update child organisation
      tags:
        - Child Organisations
      description: Updates an existing child organisation. Requires orgmember role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
      responses:
        '200':
          description: Child organisation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organisation'
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have required role
        '404':
          description: Not Found - Parent or child organisation not found
  '/orgs/{orgId}/members':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
      - name: limit
        in: query
        description: 'Maximum number of members to return (10-1000, default: 100)'
        required: false
        schema:
          type: integer
          minimum: 10
          maximum: 1000
          default: 100
          example: 100
      - name: lastEvaluatedKey
        in: query
        description: Token for pagination. Use this to get the next page of results.
        required: false
        schema:
          type: string
          example: pagination-token
    get:
      summary: Get all members
      tags:
        - Members
      description: >-
        Retrieves a paginated list of all members for an organisation. Requires
        orgadmin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Paginated list of members retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Member'
                    description: Array of members for the current page
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - items
                  - pagination
        '400':
          description: Bad Request - Invalid pagination parameters
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation not found
    post:
      summary: Create new member
      tags:
        - Members
      description: Creates a new member in the organisation. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum:
                    - orgadmin
                    - orgmember
                  example: orgmember
                userRef:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                name:
                  type: string
                  example: John Doe
                  nullable: true
              required:
                - role
                - userRef
      responses:
        '201':
          description: Member created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation not found
  '/orgs/{orgId}/members/pending':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    get:
      summary: Get pending members
      tags:
        - Members
      description: >-
        Retrieves a list of all pending members for an organisation. Requires
        orgadmin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of pending members retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation not found
  '/orgs/{orgId}/members/approve':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    put:
      summary: Approve pending member
      tags:
        - Members
      description: Approves a pending member request. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
              required:
                - memberId
      responses:
        '200':
          description: Member approved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation or member not found
  '/orgs/{orgId}/members/reject':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    put:
      summary: Reject pending member
      tags:
        - Members
      description: Rejects a pending member request. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberId:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
              required:
                - memberId
      responses:
        '200':
          description: Member rejected successfully
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation or member not found
  '/orgs/{orgId}/members/{memberId}':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
      - name: memberId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the member
    put:
      summary: Update member
      tags:
        - Members
      description: Updates an existing member. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  enum:
                    - orgadmin
                    - orgmember
                  example: orgmember
                name:
                  type: string
                  example: John Doe
                  nullable: true
      responses:
        '200':
          description: Member updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation or member not found
    delete:
      summary: Delete member
      tags:
        - Members
      description: Deletes a member from the organisation. Requires orgadmin role.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Member deleted successfully
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation or member not found
  '/orgs/{orgId}/members/batch-delete':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    post:
      summary: Batch delete members in an organisation
      tags:
        - Members
      description: Deletes multiple members by ID. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                memberIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - memberIds
      responses:
        '204':
          description: Members deleted successfully
        '1018':
          description: Unauthorized
        '1038':
          description: Bad Request URL - Organisation ID required
        '1042':
          description: Bad Request - Member ID(s) required
        '1045':
          description: Not Found - one or more members not found
        '1086':
          description: Forbidden
  '/orgs/{orgId}/api_keys':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    get:
      summary: Get all API keys
      tags:
        - API Keys
      description: >-
        Retrieves a list of all API keys for an organisation. Requires orgadmin
        role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of API keys retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have orgadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
    post:
      summary: Generate new API key
      tags:
        - API Keys
      description: Generates a new API key for the organisation. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Production API Key
                description:
                  type: string
                  example: API key for production environment
                  nullable: true
                expires:
                  type: string
                  format: date-time
                  example: '2024-12-31T23:59:59Z'
                  nullable: true
              required:
                - name
      responses:
        '201':
          description: API key generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Missing Organization ID:
                  value:
                    code: AT-1021
                    error: Organization ID is required
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have orgadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
  '/orgs/{orgId}/api_keys/{apiKeyId}':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
      - name: apiKeyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the API key
    put:
      summary: Update API key
      tags:
        - API Keys
      description: Updates an existing API key. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated API Key Name
                description:
                  type: string
                  example: Updated API key description
                  nullable: true
                isActive:
                  type: boolean
                  example: true
                expires:
                  type: string
                  format: date-time
                  example: '2024-12-31T23:59:59Z'
                  nullable: true
      responses:
        '200':
          description: API key updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Missing API Key ID:
                  value:
                    code: AT-1022
                    error: API key ID is required
                Invalid Fields:
                  value:
                    code: AT-1023
                    error: Invalid fields for API key
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have orgadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Organisation or API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                API Key Not Found:
                  value:
                    code: AT-1020
                    error: API key not found
    delete:
      summary: Delete API key
      tags:
        - API Keys
      description: Deletes an API key. Requires orgadmin role.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: API key deleted successfully
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have orgadmin role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Organisation or API key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                API Key Not Found:
                  value:
                    code: AT-1020
                    error: API key not found
  '/orgs/{orgId}/api_keys/batch-delete':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    post:
      summary: Batch delete API keys
      tags:
        - API Keys
      description: Deletes multiple API keys by ID. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeyIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - apiKeyIds
      responses:
        '204':
          description: API Keys deleted successfully
        '1018':
          description: Unauthorized
        '1020':
          description: Not found - one or more API keys not found
        '1022':
          description: API Key(s) are required
        '1086':
          description: Forbidden
  '/orgs/{orgId}/certificates':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    get:
      summary: List all certificates
      tags:
        - Certificates
      description: >-
        Retrieves a list of all certificates for an organisation. Requires
        orgadmin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of certificates retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certificate'
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation not found
    post:
      summary: Create new certificate
      tags:
        - Certificates
      description: >-
        Creates a new certificate for the organisation. Requires orgadmin role.
        Note: Organisations in DEMO mode cannot create certificates.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Test Peppol AP Certificate
                  description: Name of the certificate for identification purposes
                description:
                  type: string
                  example: Production certificate for Peppol Access Point
                  description: >-
                    Admin controlled descriptive text to facilitate certificate
                    management in GUIs
                  nullable: true
                environment:
                  type: string
                  enum:
                    - prod
                    - test
                  example: test
                  description: >-
                    Indicates whether the certificate is intended for use in the
                    production or test environment
                transportProfile:
                  type: string
                  enum:
                    - peppol-transport-as4-v2_0
                    - dbna
                    - nemhandel
                  example: peppol-transport-as4-v2_0
                  description: The eDelivery framework this certificate is used for
                service:
                  type: string
                  enum:
                    - AP
                    - SMP
                  example: AP
                  description: >-
                    The service type this certificate is used for (Access Point
                    or SMP)
                certPem:
                  type: string
                  example: |-
                    -----BEGIN CERTIFICATE-----
                    ...
                    -----END CERTIFICATE-----
                  description: >-
                    The X.509 certificate in PEM format, containing the public
                    key and certificate details
                privateKeyPem:
                  type: string
                  example: |-
                    -----BEGIN PRIVATE KEY-----
                    ...
                    -----END PRIVATE KEY-----
                  description: >-
                    The private key in PEM format, used for signing and
                    decryption operations. This field is optional - if not
                    provided, the certificate will be created without private
                    key
                caChainPem:
                  type: string
                  example: |-
                    -----BEGIN CERTIFICATE-----
                    ...
                    -----END CERTIFICATE-----
                  description: >-
                    The CA chain in PEM format, containing the certificate
                    authority chain
              required:
                - name
                - environment
                - transportProfile
                - service
                - certPem
                - caChainPem
            examples:
              Certificate with private key:
                summary: >-
                  Create certificate with private key for full encryption
                  capabilities
                value:
                  name: Production Peppol AP Certificate
                  description: >-
                    Production certificate for Peppol Access Point with full
                    encryption capabilities
                  environment: prod
                  transportProfile: peppol-transport-as4-v2_0
                  service: AP
                  certPem: >-
                    -----BEGIN CERTIFICATE-----

                    MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQEL...

                    -----END CERTIFICATE-----
                  privateKeyPem: >-
                    -----BEGIN PRIVATE KEY-----

                    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC/EmPq7pPoqTc1

                    -----END PRIVATE KEY-----
                  caChainPem: >-
                    -----BEGIN CERTIFICATE-----

                    MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQEL...

                    -----END CERTIFICATE-----
              Certificate without private key:
                summary: Create certificate without private key (read-only)
                value:
                  name: Read-only Peppol AP Certificate
                  description: >-
                    Certificate for Peppol Access Point without private key -
                    read-only access only
                  environment: test
                  transportProfile: peppol-transport-as4-v2_0
                  service: AP
                  certPem: >-
                    -----BEGIN CERTIFICATE-----

                    MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQEL...

                    -----END CERTIFICATE-----
                  caChainPem: >-
                    -----BEGIN CERTIFICATE-----

                    MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQEL...

                    -----END CERTIFICATE-----
      responses:
        '201':
          description: Certificate created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Bad Request - Invalid input data
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: >-
            Forbidden - User does not have orgadmin role or organisation in DEMO
            mode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                DEMO Mode Restriction:
                  value:
                    code: AT-1097
                    error: Organisations in DEMO mode cannot create certificates
        '404':
          description: Not Found - Organisation not found
        '500':
          description: Internal Server Error - Failed to create certificate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1004
                error: Certificate not found
  '/orgs/{orgId}/certificates/{certId}':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
      - name: certId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the certificate
    get:
      summary: Get certificate by ID
      tags:
        - Certificates
      description: Retrieves a specific certificate by its ID. Requires orgadmin role.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Certificate retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - Organisation or certificate not found
  '/orgs/{orgId}/certificates/batch_delete':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the organisation
    post:
      summary: Delete multiple certificates
      tags:
        - Certificates
      description: >-
        Deletes multiple certificates by their IDs. If any certificate does not
        exist, returns a 404 error with the list of non-existent certificate
        IDs. Requires orgadmin role.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              example:
                - 123e4567-e89b-12d3-a456-426614174000
                - 987fcdeb-51d3-a456-426614174000
              description: Array of certificate IDs to delete
      responses:
        '204':
          description: All certificates deleted successfully
        '400':
          description: Bad Request - Empty array of certificate IDs provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
        '403':
          description: Forbidden - User does not have orgadmin role
        '404':
          description: Not Found - One or more certificates not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1004
                error: Certificates not found
  '/orgs/{orgId}/smps':
    get:
      summary: Get all SMPs for an organization
      tags:
        - SMP
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of SMPs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Smp'
    post:
      summary: Create a new SMP
      tags:
        - SMP
      description: >-
        Creates a new Service Metadata Publisher (SMP). The certificate must
        exist and have service type "SMP".
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSmpInput'
            example:
              name: Production SMP
              description: SMP for production environment
              smpUrl: 'https://smp.example.com/peppol'
              certificateRef: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '201':
          description: SMP created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Smp'
              example:
                id: 123e4567-e89b-12d3-a456-426614174000
                type: SMP
                orgId: 123e4567-e89b-12d3-a456-426614174000
                name: Production SMP
                description: SMP for production environment
                certificateRef: 123e4567-e89b-12d3-a456-426614174000
                createdBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                createdAt: '2024-03-20T10:00:00Z'
        '400':
          description: Invalid input data or certificate usage validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Error:
                  value:
                    code: AT-1048
                    error: Validation failed
                Certificate Usage Error:
                  value:
                    code: AT-1015
                    error: Certificate usage invalid
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1078
                error: Certificate not found
  '/orgs/{orgId}/smps/alltouse':
    get:
      summary: Get all usable SMPs
      tags:
        - SMP
      description: >-
        Retrieves a list of all SMPs that are available for use in the specified
        organization. This endpoint requires organization member role or higher.
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the organization
      responses:
        '200':
          description: List of usable SMPs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Smp'
              example:
                - id: 123e4567-e89b-12d3-a456-426614174000
                  type: SMP
                  orgId: 123e4567-e89b-12d3-a456-426614174000
                  name: Production SMP
                  description: SMP for production environment
                  certificateRef: 123e4567-e89b-12d3-a456-426614174000
                  environment: PROD
                  createdBy:
                    userId: 123e4567-e89b-12d3-a456-426614174000
                  createdAt: '2024-03-20T10:00:00Z'
                  lastModifiedBy:
                    userId: 123e4567-e89b-12d3-a456-426614174000
                  lastModifiedAt: '2024-03-20T11:00:00Z'
        '401':
          description: Unauthorized - Authentication required
        '403':
          description: >-
            Forbidden - Insufficient permissions (requires orgmember role or
            higher)
  '/orgs/{orgId}/smps/{smpId}':
    get:
      summary: Get SMP by ID
      tags:
        - SMP
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: smpId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: SMP details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Smp'
              example:
                id: 123e4567-e89b-12d3-a456-426614174000
                type: SMP
                orgId: 123e4567-e89b-12d3-a456-426614174000
                name: Production SMP
                description: SMP for production environment
                certificateRef: 123e4567-e89b-12d3-a456-426614174000
                environment: PROD
                createdBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                createdAt: '2024-03-20T10:00:00Z'
                lastModifiedBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                lastModifiedAt: '2024-03-20T11:00:00Z'
    put:
      summary: Update SMP
      tags:
        - SMP
      description: >-
        Updates an existing Service Metadata Publisher (SMP). The certificate
        must exist and have service type "SMP".
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: smpId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSmpInput'
            example:
              name: Updated SMP Name
              description: Updated SMP description
              smpUrl: 'https://updated-smp.example.com/peppol'
              certificateRef: 123e4567-e89b-12d3-a456-426614174000
      responses:
        '200':
          description: SMP updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Smp'
              example:
                id: 123e4567-e89b-12d3-a456-426614174000
                type: SMP
                orgId: 123e4567-e89b-12d3-a456-426614174000
                name: Updated SMP Name
                description: Updated SMP description
                certificateRef: 123e4567-e89b-12d3-a456-426614174000
                environment: PROD
                createdBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                createdAt: '2024-03-20T10:00:00Z'
                lastModifiedBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                lastModifiedAt: '2024-03-20T11:00:00Z'
        '400':
          description: Invalid input data or certificate usage validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Error:
                  value:
                    code: AT-1048
                    error: Validation failed
                Certificate Usage Error:
                  value:
                    code: AT-1015
                    error: Certificate usage invalid
        '404':
          description: SMP not found or certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                SMP Not Found:
                  value:
                    code: AT-1002
                    error: SMP not found
                Certificate Not Found:
                  value:
                    code: AT-1078
                    error: Certificate not found
  '/orgs/{orgId}/smps/batch_delete':
    post:
      summary: Delete multiple SMPs
      tags:
        - SMP
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
            example:
              - 123e4567-e89b-12d3-a456-426614174000
              - 123e4567-e89b-12d3-a456-426614174001
      responses:
        '204':
          description: SMPs deleted successfully
  /countries:
    get:
      summary: List countries
      tags:
        - Read-only Reference Data
      description: >-
        Retrieves a list of all countries with their details. Supports filtering
        by region, subRegion, and code. 


        **Lowest role:** <code>public</code>


        **Datatype:** [Country](#model-Country)
      parameters:
        - name: filter
          in: query
          required: false
          description: >-
            Filter expression in format "field:operator:value". Supported
            fields: region, subRegion, code.
          schema:
            type: string
            example: 'region:eq:Europe'
      responses:
        '200':
          description: List of countries retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Country'
                    description: Array of countries
                required:
                  - items
        '400':
          description: Bad Request - Invalid filter expression
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '500':
          description: Internal Server Error - Failed to fetch countries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /participant_identifiers:
    get:
      summary: List participant identifiers
      tags:
        - Read-only Reference Data
      description: >-
        Retrieves a list of all participant identifier schemes. Supports
        filtering by country, state, schemeid, and iso6523.


        **Lowest role:** <code>user</code>


        **Datatype:** [ParticipantIdentifier](#model-ParticipantIdentifier)
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: filter
          in: query
          required: false
          description: >-
            Filter expression in format "field:operator:value". Supported
            fields: country, state, schemeid, iso6523.
          schema:
            type: string
            example: 'country:eq:SE'
      responses:
        '200':
          description: List of participant identifiers retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/ParticipantIdentifier'
                    description: Array of participant identifiers
                required:
                  - items
        '400':
          description: Bad Request - Invalid filter expression
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Filter Field:
                  value:
                    code: AT-1070
                    error: >-
                      Invalid filter: Field "invalidField" is not allowed for
                      filtering
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to fetch participant identifiers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Fetch Failed:
                  value:
                    code: AT-1071
                    error: Failed to fetch participant identifiers
                Unexpected Error:
                  value:
                    code: AT-1010
                    error: Unexpected error. Please try again later.
  '/orgs/{orgId}/participants':
    get:
      summary: Get all participants for an organization
      tags:
        - Participants
      description: >-
        Retrieves a paginated list of all participants belonging to the
        specified organization.


        **Lowest role:** <code>orgadmin</code>


        **Datatype:** [Participant](#model-Participant)
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
        - name: limit
          in: query
          description: 'Maximum number of participants to return (10-1000, default: 100)'
          required: false
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 100
            example: 100
        - name: lastEvaluatedKey
          in: query
          description: Token for pagination. Use this to get the next page of results.
          required: false
          schema:
            type: string
            example: pagination-token
      responses:
        '200':
          description: Paginated list of participants retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Participant'
                    description: Array of participants for the current page
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - items
                  - pagination
        '400':
          description: Bad Request - Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1055
                error: Limit must be between 1 and 100
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to fetch participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    post:
      summary: Create a new participant
      tags:
        - Participants
      description: |+
        Creates a new participant for the specified organization.

        **Lowest role:** <code>orgadmin</code>

        **Datatype:** [Participant](#model-Participant)

          | Property | Required |
          |----------|----------|
          | <code>name</code> | ✓ |
          | <code>participantIdentifier</code> | ✓ |
          | <code>transportProfile</code> | ✓ |
          | <code>smpRef</code> | ✓ |
          | <code>apRef</code> | ✓ |
          | <code>businessCard</code> | |

      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
      requestBody:
        required: true
        content:
          application/json:
            examples:
              minimal:
                summary: Minimal create
                value:
                  tbd: Acme Corporation Ltd
                  tbd2: SE
                  legalIdentifier: '123456789'
                  legalIdentifierCode: 'SE:ORGNR'
      responses:
        '201':
          description: Participant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '400':
          description: Bad Request - Validation failed or participant already exists in SMP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '422':
          description: >-
            Unprocessable Entity - SMP or AP reference does not exist in the
            system, or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
        '500':
          description: Internal Server Error - Failed to create participant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/participants/{participantId}':
    get:
      summary: Get participant by ID
      tags:
        - Participants
      description: >-
        Retrieves a specific participant by its ID within the specified
        organization.


        **Lowest role:** <code>orgadmin</code>


        **Datatype:** [Participant](#model-Participant)
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
        - name: participantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The participant ID
      responses:
        '200':
          description: Participant retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Participant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1025
                error: Participant not found
        '500':
          description: Internal Server Error - Failed to fetch participant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    put:
      summary: Update participant
      tags:
        - Participants
      description: |-
        Updates an existing participant within the specified organization.

        **Lowest role:** <code>orgadmin</code>

        **Datatype:** [Participant](#model-Participant)

        ### Datatype properties in request

        | Property | Required |
        |----------|----------|
        | <code>name</code> | |
        | <code>transportProfile</code> | |
        | <code>apRef</code> | |
        | <code>businessCard</code> | |
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
        - name: participantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The participant ID
      requestBody:
        required: true
        content:
          application/json:
            examples:
              minimal:
                summary: Minimal Update
                value:
                  tbd: Acme Corporation Ltd
                  tbd2: SE
                  legalIdentifier: '123456789'
                  legalIdentifierCode: 'SE:ORGNR'
      responses:
        '200':
          description: Participant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '400':
          description: Bad Request - Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Participant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1025
                error: Participant not found
        '422':
          description: >-
            Unprocessable Entity - SMP or AP reference does not exist in the
            system, or organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
        '500':
          description: Internal Server Error - Failed to update participant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/participants/batch_delete':
    post:
      summary: Batch delete participants
      tags:
        - Participants
      description: |-
        Deletes multiple participants from the specified organization.

        **Lowest role:** <code>orgadmin</code>
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
              description: Array of participant IDs to delete
      responses:
        '200':
          description: Participants deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  deletedIds:
                    type: array
                    items:
                      type: string
                      format: uuid
                    description: Array of successfully deleted participant IDs
        '400':
          description: Bad Request - Invalid input (empty array or invalid IDs)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - One or more participants not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1025
                error: Participant not found
        '500':
          description: Internal Server Error - Failed to delete participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/participants/{participantId}/supported_document_types':
    get:
      summary: Get participant supported document types
      tags:
        - Participants
      description: >-
        Retrieves the list of supported document types for a specific
        participant.


        **Lowest role:** <code>orgadmin</code>
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
        - name: participantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The participant ID
      responses:
        '200':
          description: Supported document types retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    documentId:
                      type: string
                      description: The document type identifier
                    processId:
                      type: string
                      description: The process identifier for this document type
                    documentTypeMeta:
                      $ref: '#/components/schemas/DocumentType'
                      description: Full metadata for the document type
                      nullable: true
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Participant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1025
                error: Participant not found
        '500':
          description: Internal Server Error - Failed to fetch supported document types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    put:
      summary: Update participant supported document types
      tags:
        - Participants
      description: |-
        Updates the list of supported document types for a specific participant.

        **Lowest role:** <code>orgadmin</code>

        **Datatype:** [Participant](#model-Participant)
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
        - name: participantId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The participant ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                supportedDocumentTypes:
                  type: array
                  items:
                    type: object
                    properties:
                      documentId:
                        type: string
                        description: The document type identifier
                      processId:
                        type: string
                        description: The process identifier for this document type
                    required:
                      - documentId
                      - processId
                  description: >-
                    Array of supported document types and their associated
                    processes
              required:
                - supportedDocumentTypes
      responses:
        '200':
          description: Supported document types updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Participant'
        '400':
          description: Bad Request - Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Participant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1025
                error: Participant not found
        '422':
          description: >-
            Unprocessable Entity - Document type or process does not exist in
            the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1036
                error: Document type or process does not exist
        '500':
          description: Internal Server Error - Failed to update supported document types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /lookup:
    get:
      summary: Lookup participant information
      tags:
        - Participant Lookup
      description: >-
        Public endpoint to lookup participant information by various
        identifiers. Returns basic participant information and optional business
        card metadata. At least one query parameter must be provided. If using
        legalIdentifier, both legalIdentifier and legalIdentifierCode must be
        provided together.
      security: []
      parameters:
        - name: participantIdentifier
          in: query
          description: 'The participant identifier (e.g., 0007:6391770653567760)'
          required: false
          schema:
            type: string
            example: '0007:6391770653567760'
        - name: name
          in: query
          description: The name of the participant
          required: false
          schema:
            type: string
            example: Acme Corporation
        - name: legalIdentifier
          in: query
          description: >-
            The legal identifier of the participant (must be used together with
            legalIdentifierCode)
          required: false
          schema:
            type: string
            example: '1234567890'
        - name: legalIdentifierCode
          in: query
          description: >-
            The legal identifier code of the participant (must be used together
            with legalIdentifier)
          required: false
          schema:
            type: string
            example: 'SE:ORGNR'
      responses:
        '200':
          description: Participant found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Acme Corporation
                    description: The name of the participant
                  participantIdentifier:
                    type: string
                    example: '0007:6391770653567760'
                    description: 'The participant identifier in the format scheme:value'
                  apUrl:
                    type: string
                    format: uri
                    example: 'https://ap.example.com/as4'
                    description: The Access Point URL for the participant
                  transportProfile:
                    type: string
                    example: peppol-transport-as4-v2_0
                    description: The transport profile used by the participant
                    enum:
                      - peppol-transport-as4-v2_0
                      - dbna
                      - nemhandel
                  supportedDocumentTypes:
                    type: array
                    items:
                      type: object
                      properties:
                        documentId:
                          type: string
                          example: >-
                            urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:www.cenbii.eu:transaction:biicoretrdm010:ver1.0:#urn:www.peppol.eu:bis:peppol4a:ver1.0::2.1
                          description: The document type identifier
                        processId:
                          type: string
                          example: 'urn:fdc:peppol.eu:2017:poacc:billing:01:1.0'
                          description: The process identifier
                    description: List of supported document types and processes
                  businessCard:
                    $ref: '#/components/schemas/BusinessCard'
                    description: Business card information for the participant
                    nullable: true
              example:
                name: Acme Corporation
                participantIdentifier: '0007:6391770653567760'
                apUrl: 'https://ap.example.com/as4'
                transportProfile: peppol-transport-as4-v2_0
                supportedDocumentTypes:
                  - documentId: >-
                      urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:www.cenbii.eu:transaction:biicoretrdm010:ver1.0:#urn:www.peppol.eu:bis:peppol4a:ver1.0::2.1
                    processId: 'urn:fdc:peppol.eu:2017:poacc:billing:01:1.0'
                businessCard:
                  legalIdentifier: '6391770653567760'
                  legalIdentifierCode: 'SE:ORGNR'
                  countryCode: SE
                  businessName: Acme Corporation AB
        '400':
          description: Invalid query parameters or validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                No Query Parameters:
                  value:
                    code: AT-1088
                    error: Invalid query parameters
                Validation Failed:
                  value:
                    code: AT-1009
                    error: 'Validation failed: Request validation failed'
                Missing Legal Identifier Code:
                  value:
                    code: AT-1088
                    error: Invalid query parameters
        '404':
          description: Participant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1087
                error: Participant not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1089
                error: Failed to lookup participant
  /document_types:
    get:
      summary: List document types
      tags:
        - Read-only Reference Data
      description: >-
        Retrieves a list of all document types from the official Peppol
        codelist. Common examples include:

        - Invoice 

        - Credit Note 

        - Order 


        Supports filtering by category, state, scheme, and version.


        **Lowest role:** <code>user</code>


        **Datatype:** [DocumentType](#model-DocumentType)
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: filter
          in: query
          required: false
          description: >-
            Filter expression in format "field:operator:value". Supported
            fields: category, state, scheme, version.
          schema:
            type: string
            example: 'category:eq:Invoice'
      responses:
        '200':
          description: List of document types retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/DocumentType'
                    description: Array of document types
                required:
                  - items
        '400':
          description: Bad Request - Invalid filter expression
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Filter:
                  value:
                    code: AT-1035
                    error: Invalid document type filter
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to fetch document types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  /constants:
    get:
      summary: >-
        Get a basic constant from the database, like a string, list of strings
        or other structure.
      tags:
        - Read-only Reference Data
      description: >-
        Retrieves the value of a constant by its key. The response includes a
        datatype field indicating the type of the value (string, array, or
        object).


        Supported constants are:

        - WORLD_REGIONS: List of world regions and their sub-regions (datatype:
        object)

        - DOCUMENT_TYPE_CATEGORIES: List of document type categories (datatype:
        array)


        Requires user role.
      security:
        - bearerAuth: []
      parameters:
        - name: key
          in: query
          required: true
          schema:
            type: string
            description: The key of the constant to retrieve
      responses:
        '200':
          description: Constant value retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Constant'
              examples:
                documentCategories:
                  value:
                    key: DOCUMENT_TYPE_CATEGORIES
                    value:
                      - Invoice
                      - Credit Note
                      - Order
                      - Order Response
                    datatype: array
                worldRegions:
                  value:
                    key: WORLD_REGIONS
                    value:
                      - region: Europe
                        subRegions:
                          - Northern Europe
                          - Western Europe
                          - Eastern Europe
                          - Southern Europe
                      - region: Asia
                        subRegions:
                          - East Asia
                          - South Asia
                          - Southeast Asia
                          - Central Asia
                    datatype: object
        '400':
          description: Bad Request - Missing or invalid key parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Constant with specified key not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1004
                error: Constant not found
        '500':
          description: Internal Server Error - Failed to fetch constant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/aps':
    get:
      summary: Get all Access Points
      tags:
        - Access Point
      description: >-
        Retrieves a list of all the access points owned by the organization.
        Note that this differes from the /orgs/{orgId}/aps/alltouse endpoint
        which retrieves all Access Points that are available for use in the
        specified organization (i.e. the organisations own access points **and**
        the shared access points the organisation has the right to use).


        **Lowest role:** <code>orgadmin</code>


        **Datatype:** [Ap](#model-Ap)
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: List of Access Points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ap'
              example:
                - id: 956abcde-78f9-0123-4567-89abcdef0123
                  type: AP
                  orgId: 765e4567-e89b-12d3-a456-426614174000
                  name: Standard Access Point
                  description: Access Point using system-generated URL
                  apUrl: >-
                    https://ap.arratech.com/765e4567-e89b-12d3-a456-426614174000/956abcde-78f9-0123-4567-89abcdef0123
                  certificateRef: 456abcde-78f9-0123-4567-89abcdef0123
                  transportProfile: peppol-transport-as4-v2_0
                  environment: PROD
                  createdBy:
                    userId: user-123
                  createdAt: '2024-03-20T10:00:00Z'
    post:
      summary: Create a new Access Point
      tags:
        - Access Point
      description: |2

          Creates a new Access Point (AP) for the organization. The certificate must exist and have service type "AP". An Access Point can be created in one of two ways: System-generated AP URL or selfHostedApUrl. If no external URL is provided, the platform generates and assigns an AP URL automatically. Alternatively, you may provide a custom selfHostedApUrl if you want to use your own external access point infrastructure. 
          
          **Lowest role:** <code>orgadmin</code>
          
          **Datatype:** [Ap](#model-Ap)
          
           ### Datatype properties in request
           
           | Property | Required |
           |----------|----------|
           | <code>name</code> | ✓ |
           | <code>certificateRef</code> | ✓ |
           | <code>transportProfile</code> | ✓ |
           | <code>description</code> | |
           | <code>selfHostedApUrl</code> | |
          
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Access Point without self-hosted URL (system-generated):
                summary: Create Access Point using system-generated URL
                description: >-
                  Use this example when you want the system to automatically
                  generate the Access Point URL. Do not provide apUrl (it is
                  never sent in requests) or selfHostedApUrl - the system will
                  generate apUrl automatically in the response.
                value:
                  name: Production Access Point
                  description: Access Point for production environment using system URL
                  certificateRef: 123e4567-e89b-12d3-a456-426614174000
                  transportProfile: peppol-transport-as4-v2_0
              Access Point with self-hosted URL:
                summary: Create Access Point with custom self-hosted URL
                description: >-
                  Use this example when you want to specify a custom URL for
                  your self-hosted Access Point service. The system will set
                  both apUrl and selfHostedApUrl to the same value in the
                  response.
                value:
                  name: Production Access Point
                  description: Access Point for production environment with custom hosting
                  selfHostedApUrl: 'https://self-hosted-ap.example.com/as4'
                  certificateRef: 123e4567-e89b-12d3-a456-426614174000
                  transportProfile: peppol-transport-as4-v2_0
      responses:
        '201':
          description: Access Point created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ap'
              examples:
                Access Point created with system-generated URL:
                  summary: Response when creating Access Point without selfHostedApUrl
                  description: >-
                    System generates apUrl automatically when selfHostedApUrl is
                    not provided
                  value:
                    id: 956abcde-78f9-0123-4567-89abcdef0123
                    type: AP
                    orgId: 123e4567-e89b-12d3-a456-426614174000
                    name: Production Access Point
                    description: Access Point for production environment using system URL
                    apUrl: >-
                      https://ap.arratech.com/123e4567-e89b-12d3-a456-426614174000/956abcde-78f9-0123-4567-89abcdef0123
                    certificateRef: 123e4567-e89b-12d3-a456-426614174000
                    transportProfile: peppol-transport-as4-v2_0
                    environment: PROD
                    createdBy:
                      userId: 123e4567-e89b-12d3-a456-426614174000
                    createdAt: '2025-09-03T08:41:59.068Z'
                    lastModifiedBy:
                      userId: 123e4567-e89b-12d3-a456-426614174000
                    lastModifiedAt: '2025-09-03T08:41:59.068Z'
                Access Point created with self-hosted URL:
                  summary: Response when creating AP with selfHostedApUrl
                  description: >-
                    Both apUrl and selfHostedApUrl are set to the same custom
                    value when selfHostedApUrl is provided
                  value:
                    id: 123e4567-e89b-12d3-a456-426614174000
                    type: AP
                    orgId: 123e4567-e89b-12d3-a456-426614174000
                    name: Production Access Point
                    description: >-
                      Access Point for production environment with custom
                      hosting
                    apUrl: 'https://self-hosted-ap.example.com/as4'
                    selfHostedApUrl: 'https://self-hosted-ap.example.com/as4'
                    certificateRef: 123e4567-e89b-12d3-a456-426614174000
                    transportProfile: peppol-transport-as4-v2_0
                    environment: PROD
                    createdBy:
                      userId: 123e4567-e89b-12d3-a456-426614174000
                    createdAt: '2025-09-03T08:41:59.068Z'
                    lastModifiedBy:
                      userId: 123e4567-e89b-12d3-a456-426614174000
                    lastModifiedAt: '2025-09-03T08:41:59.068Z'
        '400':
          description: Invalid input data or certificate usage validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Error:
                  value:
                    code: AT-1048
                    error: Validation failed
                Certificate Usage Error:
                  value:
                    code: AT-1015
                    error: Certificate usage invalid
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions (requires orgadmin role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
        '500':
          description: Internal Server Error - Failed to retrieve access points
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/aps/{apId}':
    get:
      summary: Get Access Point by ID
      tags:
        - Access Point
      description: |-
        Retrieves a specific Access Point by its ID.

        **Lowest role:** <code>orgadmin</code>

        **Datatype:** [Ap](#model-Ap)
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: apId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: Access Point details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ap'
              example:
                id: 123e4567-e89b-12d3-a456-426614174000
                type: AP
                orgId: 123e4567-e89b-12d3-a456-426614174000
                name: Production Access Point
                description: Access Point for production environment
                apUrl: >-
                  https://ap.arratech.com/123e4567-e89b-12d3-a456-426614174000/456abcde-78f9-0123-4567-89abcdef0123
                certificateRef: 123e4567-e89b-12d3-a456-426614174000
                transportProfile: peppol-transport-as4-v2_0
                environment: PROD
                createdBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                createdAt: '2025-09-03T08:37:36.098Z'
                lastModifiedBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                lastModifiedAt: '2025-09-03T08:37:36.098Z'
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions (requires orgadmin role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Access Point not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Access Point Not Found:
                  value:
                    code: AT-1002
                    error: Access Point not found
        '500':
          description: Internal Server Error - Failed to retrieve access point
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    put:
      summary: Update Access Point by ID
      tags:
        - Access Point
      description: |2

          Updates an existing Access Point (AP). The certificate must exist and have service type "AP". An Access Point can be created in one of two ways: System-generated AP URL or selfHostedApUrl. If no external URL is provided, the platform generates and assigns an AP URL automatically. Alternatively, you may provide a custom selfHostedApUrl if you want to use your own external access point infrastructure. 
          
          **Lowest role:** <code>orgadmin</code>
          
          **Datatype:** [Ap](#model-Ap)
          
           ### Datatype properties in request
           
           | Property | Required |
           |----------|----------|
           | <code>name</code> | |
           | <code>description</code> | |
           | <code>certificateRef</code> | |
           | <code>transportProfile</code> | |
          
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: apId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            examples:
              Update Access Point name and description:
                summary: Update basic Access Point information
                description: Update only the name and description fields
                value:
                  name: Updated Access Point Name
                  description: Updated Access Point description
              Update Access Point name and description only:
                summary: Update basic Access Point information
                description: >-
                  Update only the name and description fields. apUrl and
                  selfHostedApUrl cannot be modified directly.
                value:
                  name: Updated Access Point Name
                  description: Updated Access Point description
              Update Access Point transport profile:
                summary: Update Access Point transport profile
                description: >-
                  Update the transport profile field. apUrl and selfHostedApUrl
                  cannot be modified directly.
                value:
                  name: Updated Access Point Name
                  description: Updated Access Point description
                  transportProfile: peppol-transport-as4-v2_0
      responses:
        '200':
          description: Access Point updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ap'
              example:
                id: 123e4567-e89b-12d3-a456-426614174000
                type: AP
                orgId: 123e4567-e89b-12d3-a456-426614174000
                name: Updated Access Point Name
                description: Updated Access Point description
                apUrl: >-
                  https://ap.arratech.com/123e4567-e89b-12d3-a456-426614174000/456abcde-78f9-0123-4567-89abcdef0123
                certificateRef: 123e4567-e89b-12d3-a456-426614174000
                transportProfile: peppol-transport-as4-v2_0
                environment: PROD
                createdBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                createdAt: '2025-09-03T08:37:36.098Z'
                lastModifiedBy:
                  userId: 123e4567-e89b-12d3-a456-426614174000
                lastModifiedAt: '2025-09-03T08:37:36.098Z'
        '400':
          description: Invalid input data or certificate usage validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Error:
                  value:
                    code: AT-1048
                    error: Validation failed
                Certificate Usage Error:
                  value:
                    code: AT-1015
                    error: Certificate usage invalid
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions (requires orgadmin role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Access Point not found or certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Access Point Not Found:
                  value:
                    code: AT-1002
                    error: Access Point not found
                Certificate Not Found:
                  value:
                    code: AT-1004
                    error: Certificate not found
        '500':
          description: Internal Server Error - Failed to update access point
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/aps/batch_delete':
    delete:
      summary: Batch delete Access Points
      tags:
        - Access Point
      description: >-
        Deletes multiple Access Points in a single operation. This is the only
        delete operation available for Access Points.


        **Lowest role:** <code>orgadmin</code>
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apIds:
                  type: array
                  items:
                    type: string
                    format: uuid
              required:
                - apIds
            example:
              apIds:
                - 123e4567-e89b-12d3-a456-426614174000
                - 123e4567-e89b-12d3-a456-426614174001
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        '204':
          description: Access Points deleted successfully
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                Empty AP IDs:
                  value:
                    code: AT-1011
                    error: List of AP IDs must be a non-empty array
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - Insufficient permissions (requires orgadmin role)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: One or more Access Points not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Access Points Not Found:
                  value:
                    code: AT-1002
                    error: One or more Access Points not found
        '500':
          description: Internal Server Error - Failed to delete access points
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/aps/alltouse':
    get:
      summary: Get all Access Points that are available for use
      tags:
        - Access Point
      description: >-
        Retrieves a list of all Access Points that are available for use in the
        specified organization. This includes the organisation's own access
        points but also the shared access points the organisation has the right
        to use.


        **Lowest role:** <code>orgmember</code>
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the organization
      security:
        - bearerAuth: []
        - apiKeyAuth: []
      responses:
        '200':
          description: List of usable Access Points
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ap'
              example:
                - id: 956abcde-78f9-0123-4567-89abcdef0123
                  type: AP
                  orgId: 765e4567-e89b-12d3-a456-426614174000
                  name: Standard Access Point
                  description: Access Point using system-generated URL
                  apUrl: >-
                    https://ap.arratech.com/765e4567-e89b-12d3-a456-426614174000/956abcde-78f9-0123-4567-89abcdef0123
                  certificateRef: 456abcde-78f9-0123-4567-89abcdef0123
                  transportProfile: peppol-transport-as4-v2_0
                  environment: PROD
                  createdBy:
                    userId: 09ab5986-93af-4c8b-a647-0d07c53ddb56
                  createdAt: '2024-03-20T10:00:00Z'
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: >-
            Forbidden - Insufficient permissions (requires orgmember role or
            higher)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
        '500':
          description: Internal Server Error - Failed to retrieve usable access points
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/transactions':
    post:
      summary: Create a transaction with XML payload
      tags:
        - Transactions
      description: >-
        Creates a new document transaction from a raw XML body. Requires
        orgmember role.
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: ap
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: >-
            Optional Access Point (AP) ID. If not provided, the transaction is
            created in either parent org AP or Arratech AP.
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: string
      responses:
        '200':
          description: Transaction created
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: string
                    format: uuid
        '400':
          description: Bad Request - Invalid transaction data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3007
                error: Invalid transaction parameters
        '403':
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3001
                error: Failed to persist transaction
  '/orgs/{orgId}/transactions/upload_url':
    get:
      summary: Get upload URL for transaction
      tags:
        - Transactions
      description: Generates a URL to upload a transaction document directly.
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: ap
          in: query
          description: >-
            Optional Access Point (AP) ID. If not provided, the transaction is
            created in either parent org AP or Arratech AP.
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Upload URL generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactionId:
                    type: string
                    format: uuid
                  uploadUrl:
                    type: string
                    format: uri
        '400':
          description: Bad Request - Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3007
                error: Invalid transaction parameters
        '403':
          description: Forbidden - Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3009
                error: Failed to persist transaction
  '/orgs/{orgId}/transactions/to_network':
    get:
      summary: Get transactions sent to network
      tags:
        - Transactions
      description: >-
        Retrieves a paginated list of transactions that were sent to the network
        (TO_NETWORK flow). Requires orgmember role.
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
        - name: limit
          in: query
          description: 'Maximum number of transactions to return (10-1000, default: 100)'
          required: false
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 100
            example: 100
        - name: lastEvaluatedKey
          in: query
          description: Token for pagination. Use this to get the next page of results.
          required: false
          schema:
            type: string
            example: pagination-token
      responses:
        '200':
          description: Paginated list of TO_NETWORK transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                    description: Array of TO_NETWORK transactions for the current page
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - items
                  - pagination
        '400':
          description: Bad Request - Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1055
                error: Limit must be between 1 and 100
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to retrieve transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3010
                error: Failed to retrieve transactions
  '/orgs/{orgId}/transactions/from_network':
    get:
      summary: Get transactions received from network
      tags:
        - Transactions
      description: >-
        Retrieves a paginated list of transactions that were received from the
        network (FROM_NETWORK flow). Requires orgmember role.
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The organization ID
        - name: limit
          in: query
          description: 'Maximum number of transactions to return (10-1000, default: 100)'
          required: false
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 100
            example: 100
        - name: lastEvaluatedKey
          in: query
          description: Token for pagination. Use this to get the next page of results.
          required: false
          schema:
            type: string
            example: pagination-token
      responses:
        '200':
          description: Paginated list of FROM_NETWORK transactions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                    description: Array of FROM_NETWORK transactions for the current page
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - items
                  - pagination
        '400':
          description: Bad Request - Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1055
                error: Limit must be between 1 and 100
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '500':
          description: Internal Server Error - Failed to retrieve transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3010
                error: Failed to retrieve transactions
  '/orgs/{orgId}/transactions/{transactionId}':
    get:
      summary: Get a specific transaction by ID
      tags:
        - Transactions
      description: >-
        Retrieves a specific transaction. 

        The transaction is identified by its unique `transactionId`, the
        internal UUID.
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Organization identifier
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Transaction identifier
      responses:
        '200':
          description: The transaction metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Invalid transaction ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3003
                error: Invalid transactionId format. Expected UUID.
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3002
                error: Transaction not found
        '500':
          description: Internal Server Error - Failed to retrieve transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3004
                error: Failed to retrieve transaction
  '/orgs/{orgId}/transactions/{transactionId}/artefacts':
    get:
      summary: Get artefacts for a transaction
      tags:
        - Transactions
      description: >-
        Retrieves all artefacts for the given transaction.


        Use the optional `filter` query param in the format:
        `type:eq:<itemType>`.


        Supported types include: `AS4_IN`, `SBD_OUT`, `VAL_IN`, etc.
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: filter
          in: query
          required: false
          schema:
            type: string
            example: 'type:eq:AS4_IN'
          description: |-
            Optional artefact filter using the format: `type:eq:<itemType>`.
                      This matches artefacts by their `itemType`, such as `AS4_IN`, `SBD_OUT`, etc.
      responses:
        '200':
          description: List of artefacts for the transaction
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionArtefactResponse'
        '400':
          description: Bad Request - Invalid filter or UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Transaction ID:
                  value:
                    code: AT-3003
                    error: Invalid transactionId format. Expected UUID.
                Invalid Filter:
                  value:
                    code: AT-3007
                    error: Invalid transaction parameters
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3002
                error: Transaction not found
        '500':
          description: Internal Server Error - Failed to retrieve artefacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3006
                error: Failed to retrieve transaction artefact
  '/orgs/{orgId}/transactions/{transactionId}/artefacts/{artefactId}/content':
    get:
      summary: Get a specific artefact by ID
      tags:
        - Transactions
      description: |-
        Retrieves a specific artefact for the given transaction. 
          The artefact is identified by its unique `artefactId`, the internal UUID. 
          The response includes the raw file stream (e.g., XML, JSON, etc.) with correct `Content-Type`.
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Organization identifier
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Transaction identifier
        - name: artefactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Artefact identifier (UUID)
      responses:
        '200':
          description: The raw artefact file stream
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
              example: ...binary stream of the artefact file...
        '400':
          description: Invalid artefact ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Transaction ID:
                  value:
                    code: AT-3003
                    error: Invalid transactionId format. Expected UUID.
                Invalid Artefact ID:
                  value:
                    code: AT-1048
                    error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Transaction or artefact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Transaction Not Found:
                  value:
                    code: AT-3002
                    error: Transaction not found
                Artefact Not Found:
                  value:
                    code: AT-3005
                    error: Transaction artefact not found
        '500':
          description: Internal Server Error - Failed to retrieve artefact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3006
                error: Failed to retrieve transaction artefact
  '/orgs/{orgId}/transactions/{transactionId}/sbd_in':
    get:
      summary: Get SBD_IN artefact for a transaction
      tags:
        - Transactions
      description: >-
        Retrieves the SBD_IN (Service Business Document - Inbound) artefact for
        a specific transaction. Returns the raw file stream with appropriate
        Content-Type headers.
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Organization identifier
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Transaction identifier
      responses:
        '200':
          description: SBD_IN artefact file stream
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              description: MIME type of the artefact file
              schema:
                type: string
                example: application/xml
            Content-Disposition:
              description: Content disposition header for file download
              schema:
                type: string
                example: attachment; filename="sbd_in.xml"
        '400':
          description: >-
            Bad Request - Invalid transaction ID format or artefact type not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Transaction ID:
                  value:
                    code: AT-3003
                    error: Invalid transactionId format. Expected UUID.
                Invalid Parameters:
                  value:
                    code: AT-3007
                    error: Invalid transaction parameters
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Transaction or SBD_IN artefact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Transaction Not Found:
                  value:
                    code: AT-3002
                    error: Transaction not found
                Artefact Not Found:
                  value:
                    code: AT-3005
                    error: Transaction artefact not found
        '500':
          description: Internal Server Error - Failed to retrieve artefact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3006
                error: Failed to retrieve transaction artefact
        '502':
          description: Bad Gateway - Upstream content error or failed to stream artefact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3011
                error: Upstream content error
  '/orgs/{orgId}/transactions/{transactionId}/sbd_out':
    get:
      summary: Get SBD_OUT artefact for a transaction
      tags:
        - Transactions
      description: >-
        Retrieves the SBD_OUT (Service Business Document - Outbound) artefact
        for a specific transaction. Returns the raw file stream with appropriate
        Content-Type headers.
      security:
        - bearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Organization identifier
        - name: transactionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Transaction identifier
      responses:
        '200':
          description: SBD_OUT artefact file stream
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Type:
              description: MIME type of the artefact file
              schema:
                type: string
                example: application/xml
            Content-Disposition:
              description: Content disposition header for file download
              schema:
                type: string
                example: attachment; filename="sbd_out.xml"
        '400':
          description: >-
            Bad Request - Invalid transaction ID format or artefact type not
            found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Invalid Transaction ID:
                  value:
                    code: AT-3003
                    error: Invalid transactionId format. Expected UUID.
                Invalid Parameters:
                  value:
                    code: AT-3007
                    error: Invalid transaction parameters
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Not Found - Transaction or SBD_OUT artefact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Transaction Not Found:
                  value:
                    code: AT-3002
                    error: Transaction not found
                Artefact Not Found:
                  value:
                    code: AT-3005
                    error: Transaction artefact not found
        '500':
          description: Internal Server Error - Failed to retrieve artefact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3006
                error: Failed to retrieve transaction artefact
        '502':
          description: Bad Gateway - Upstream content error or failed to stream artefact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-3011
                error: Upstream content error
  '/orgs/{orgId}/webhooks':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: 550e8400-e29b-41d4-a716-446655440000
        description: Organisation ID
    get:
      summary: List all webhooks
      tags:
        - Webhooks
      description: Retrieves all webhooks registered for the organisation.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of webhooks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
        '500':
          description: Internal Server Error - Failed to retrieve webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    post:
      summary: Create webhook
      tags:
        - Webhooks
      description: Creates a new webhook for the specified organisation.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhook'
      responses:
        '201':
          description: Webhook created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Organisation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1003
                error: Organisation not found
        '500':
          description: Internal Server Error - Failed to create webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/webhooks/{webhookId}':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: 550e8400-e29b-41d4-a716-446655440000
        description: Organisation ID
      - name: webhookId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000
        description: Webhook ID
    get:
      summary: Get webhook by ID
      tags:
        - Webhooks
      description: Retrieves the details of a specific webhook.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Webhook retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Webhook Not Found:
                  value:
                    code: AT-1004
                    error: Webhook not found
        '500':
          description: Internal Server Error - Failed to retrieve webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    put:
      summary: Update webhook
      tags:
        - Webhooks
      description: Updates a webhook’s configuration.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWebhook'
      responses:
        '200':
          description: Webhook updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Webhook Not Found:
                  value:
                    code: AT-1004
                    error: Webhook not found
        '500':
          description: Internal Server Error - Failed to update webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
    delete:
      summary: Delete webhook
      tags:
        - Webhooks
      description: Deletes a webhook by ID.
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Webhook deleted successfully
        '400':
          description: Bad Request - Invalid UUID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1048
                error: Validation failed
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: Webhook not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Webhook Not Found:
                  value:
                    code: AT-1004
                    error: Webhook not found
        '500':
          description: Internal Server Error - Failed to delete webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/webhooks/batch-delete':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Organisation ID
    post:
      summary: Batch delete webhooks
      tags:
        - Webhooks
      description: Deletes one or more webhooks by ID.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                webhookIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  example:
                    - 123e4567-e89b-12d3-a456-426614174000
                    - 550e8400-e29b-41d4-a716-446655440111
              required:
                - webhookIds
      responses:
        '204':
          description: Webhooks deleted successfully
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                Empty Array:
                  value:
                    code: AT-1048
                    error: Empty array of webhook IDs provided
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: One or more webhook IDs not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Webhooks Not Found:
                  value:
                    code: AT-1004
                    error: One or more webhooks not found
        '500':
          description: Internal Server Error - Failed to delete webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/webhooks/trigger-test-event':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Organisation ID
    post:
      summary: Trigger a test event
      tags:
        - Webhooks
      description: >-
        Triggers the webhooks.test event. Can be used by customers to test their
        callback service.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                webhookIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                testEventType:
                  type: string
                  example: transaction.received
                payload:
                  type: object
                  example:
                    transactionId: txn-001
                    status: RECEIVED
              required:
                - webhookIds
                - testEventType
      responses:
        '200':
          description: Test event dispatched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sentTo:
                    type: array
                    items:
                      type: string
                      format: uri
        '400':
          description: Invalid input or missing webhook IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Validation Failed:
                  value:
                    code: AT-1048
                    error: Validation failed
                Missing Webhook IDs:
                  value:
                    code: AT-1048
                    error: Webhook IDs are required
                Invalid Test Event Type:
                  value:
                    code: AT-1048
                    error: Invalid test event type
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '403':
          description: Forbidden - User does not have required role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1086
                error: Access forbidden
        '404':
          description: One or more webhook IDs not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Webhooks Not Found:
                  value:
                    code: AT-1004
                    error: One or more webhooks not found
        '500':
          description: Internal Server Error - Failed to trigger test event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/webhooks/events':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Organisation ID
    get:
      summary: List webhook events
      tags:
        - Webhook Events
      description: >-
        Retrieves webhook events for the organisation. Supports filtering by
        eventType and createdAt.
      security:
        - bearerAuth: []
      parameters:
        - name: eventTypes
          in: query
          schema:
            type: string
          example: 'transaction.sent,transaction.received'
          description: Comma-separated event types
        - name: createdAt
          in: query
          schema:
            type: string
            format: date-time
          example: '2025-07-07T00:00:00Z'
          description: Return events created after this time
      responses:
        '200':
          description: List of webhook events retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1018
                error: Unauthorized
        '500':
          description: Internal Server Error - Failed to fetch events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
  '/orgs/{orgId}/webhooks/events/{eventId}':
    parameters:
      - name: orgId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Organisation ID
      - name: eventId
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Webhook event ID
    get:
      summary: Get webhook event by ID
      tags:
        - Webhook Events
      description: Retrieves a specific webhook event by ID.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Webhook event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Webhook event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              examples:
                Organization Not Found:
                  value:
                    code: AT-1003
                    error: Organisation not found
                Event Not Found:
                  value:
                    code: AT-1004
                    error: Event not found
        '500':
          description: Internal Server Error - Failed to fetch event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorV1'
              example:
                code: AT-1010
                error: Unexpected error. Please try again later.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Address:
      type: object
      properties:
        streetAddress:
          type: string
          description: 'Street address (optional) if provided, must be non-empty'
          nullable: true
          required: false
        city:
          type: string
          description: 'City (optional) if provided, must be non-empty'
          nullable: true
          required: false
        country:
          type: string
          description: 'Country (optional) if provided, must be non-empty'
          nullable: true
          required: false
        postalCode:
          type: string
          description: 'Postal code (optional) if provided, must be non-empty'
          nullable: true
          required: false
    Ap:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the Access Point
        type:
          type: string
          enum:
            - AP
          example: AP
          description: 'The type of the entity, always set to AP'
        orgId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Organisation that owns this Access Point
        name:
          type: string
          example: Production Access Point
          description: Name of the Access Point
        description:
          type: string
          example: Access Point for production environment
          description: Description of the Access Point
          nullable: true
        apUrl:
          type: string
          format: uri
          example: >-
            https://ap.arratech.com/123e4567-e89b-12d3-a456-426614174000/456abcde-78f9-0123-4567-89abcdef0123
          description: The URL where the Access Point service is hosted
          readOnly: true
        selfHostedApUrl:
          type: string
          format: uri
          example: 'https://self-hosted-ap.example.com/as4'
          description: The URL for self-hosted Access Point service (optional)
          nullable: true
          readOnly: true
        certificateRef:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: >-
            Reference to the certificate used by this Access Point. The
            certificate must exist and have service type "AP".
        transportProfile:
          type: string
          enum:
            - peppol-transport-as4-v2_0
            - dbna
            - nemhandel
          example: peppol-transport-as4-v2_0
          description: The eDelivery framework this Access Point is used for
        environment:
          type: string
          enum:
            - PROD
            - TEST
          example: PROD
          description: >-
            The environment where the Access Point is used, populated from the
            certificate
          nullable: true
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this Access Point
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who last modified this Access Point
          nullable: true
        lastModifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp (ISO 8601)
          nullable: true
    ApiErrorV1:
      type: object
      properties:
        code:
          type: string
          description: 'Error code (e.g., AT-1004)'
          example: AT-1004
        error:
          type: string
          description: Error message
          example: User not found
      required:
        - code
        - error
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the API key
        hashedApiKey:
          type: string
          example: hashed_api_key_value
          description: The hashed api-key value
        orgId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Organisation that owns this key
        name:
          type: string
          example: Production API Key
          description: Name of this key
        description:
          type: string
          example: API key for production environment
          description: Description of this key
          nullable: true
        isActive:
          type: boolean
          example: true
          description: >-
            True if the key is activated for use, if false authentication always
            fails
        role:
          type: string
          enum:
            - orgmember
            - orgadmin
          example: orgmember
          description: >-
            Role associated with this API key. Defaults to orgmember if not
            specified
        maskedValue:
          type: string
          example: abc*****xyz
          description: >-
            Partially obscured value of the api key, to make it recognisable to
            administrators
        expires:
          type: string
          format: date-time
          example: '2024-12-31T23:59:59Z'
          description: Expiration time (ISO 8601). If not set the key never expires
          nullable: true
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this API key
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who last modified this API key
          nullable: true
        lastModifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp (ISO 8601)
          nullable: true
      required:
        - id
        - hashedApiKey
        - orgId
        - name
        - isActive
        - createdBy
        - createdAt
    BusinessCard:
      type: object
      properties:
        legalName:
          type: string
          example: Acme Corporation Ltd
          description: >-
            The legal name of the business (optional) if provided, must be
            non-empty
          required: false
        legalIdentifier:
          type: string
          example: '123456789'
          description: >-
            The legal identifier of the business (optional) if provided, must be
            non-empty
          required: false
        legalIdentifierCode:
          type: string
          example: 'SE:ORGNR'
          description: >-
            The code for the legal identifier scheme (optional) if provided,
            must be non-empty
          required: false
        countryCode:
          type: string
          example: SE
          description: >-
            Two-letter country code (ISO 3166-1 alpha-2) (optional) if provided,
            must be non-empty
          required: false
          minLength: 2
          maxLength: 2
        website:
          type: string
          format: uri
          example: 'https://www.acme.com'
          description: 'Business website URL (optional) if provided, must be a valid URL'
          required: false
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          description: Business contact information
          required: false
        taxIdentifier:
          type: string
          example: SE123456789001
          description: 'Tax identification number (optional) if provided, must be non-empty'
          required: false
        globalLocationNumber:
          type: string
          example: '1234567890123'
          description: >-
            Global Location Number (GLN) (optional) if provided, must be
            non-empty
          required: false
        duns:
          type: string
          example: 12-345-6789
          description: >-
            D-U-N-S Number (Data Universal Numbering System) (optional) if
            provided, must be non-empty
          required: false
        businessAddress:
          $ref: '#/components/schemas/Address'
          description: Business address information
          required: false
    Certificate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the certificate
        type:
          type: string
          enum:
            - CERTIFICATE
          example: CERTIFICATE
          description: 'The type of the entity, always set to CERTIFICATE'
        name:
          type: string
          example: Test Peppol AP Certificate
          description: Name of the certificate for identification purposes
        orgId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Organisation that owns this certificate
        description:
          type: string
          example: Production certificate for Peppol Access Point
          description: >-
            Admin controlled descriptive text to facilitate certificate
            management in GUIs
          nullable: true
        environment:
          type: string
          enum:
            - prod
            - test
          example: test
          description: >-
            Indicates whether the certificate is intended for use in the
            production or test environment
        transportProfile:
          type: string
          enum:
            - peppol-transport-as4-v2_0
            - dbna
            - nemhandel
          example: peppol-transport-as4-v2_0
          description: >-
            The eDelivery framework this certificate is used for (currently only
            Peppol is supported)
        service:
          type: string
          enum:
            - AP
            - SMP
          example: AP
          description: The service type this certificate is used for (Access Point or SMP)
        validFrom:
          type: string
          format: date-time
          example: '2024-01-01T00:00:00Z'
          description: >-
            Start date of the certificate's validity period (ISO 8601 format).
            If not provided at certificate creation time the creation date value
            is used
          nullable: true
        validUntil:
          type: string
          format: date-time
          example: '2024-12-31T23:59:59Z'
          description: >-
            Expiration date of the certificate's validity period (ISO 8601
            format). If omitted, the certificate is treated as having no
            expiration
          nullable: true
        certPem:
          type: string
          example: |-
            -----BEGIN CERTIFICATE-----
            MIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQEL...
          description: >-
            The X.509 certificate in PEM format, containing the public key and
            certificate details
          nullable: true
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this certificate
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
      required:
        - id
        - type
        - name
        - orgId
        - environment
        - transportProfile
        - service
        - createdBy
        - createdAt
    Contact:
      type: object
      properties:
        name:
          type: string
          description: 'Contact name (optional) if provided, must be non-empty'
          required: false
        email:
          type: string
          format: email
          description: Contact email (required)
          required: false
        phone:
          type: string
          description: 'Contact phone (optional) if provided, must be non-empty'
          required: false
        title:
          type: string
          description: 'Contact title (optional) if provided, must be non-empty'
          required: false
        contactType:
          type: string
          description: 'Contact type (optional) if provided, must be a valid contact type'
          required: false
          enum:
            - BUSINESS
            - SUPPORT
            - TECHNICAL
            - GENERAL
        webContactUrl:
          type: string
          description: 'Contact web contact URL (optional) if provided, must be a valid URL'
          required: false
        annotation:
          type: string
          description: >-
            Contact annotation (optional) if provided, must be less than 500
            characters
          required: false
    Constant:
      type: object
      required:
        - key
        - value
        - datatype
      properties:
        key:
          type: string
          description: The constant key identifier
        value:
          oneOf:
            - type: string
              description: String value of the constant
            - type: array
              items:
                type: string
              description: Array of string values
            - type: array
              items:
                type: object
                required:
                  - region
                  - subRegions
                properties:
                  region:
                    type: string
                    description: Region name
                  subRegions:
                    type: array
                    items:
                      type: string
                    description: List of sub-regions
              description: Array of region objects with sub-regions
        datatype:
          type: string
          enum:
            - string
            - array
            - object
          description: The data type of the value field
    Country:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the country
        code:
          type: string
          description: ISO 3166-1 alpha-2 country code
        name:
          type: string
          description: Full name of the country
        phonePrefix:
          type: string
          description: International telephone prefix for the country
        region:
          type: string
          description: Geographic region of the country
        subRegion:
          type: string
          description: Sub-region within the main region
    CreateSmpInput:
      type: object
      properties:
        name:
          type: string
          example: Production SMP
          description: Name of the SMP
        description:
          type: string
          example: SMP for production environment
          description: Description of the SMP
          nullable: true
        smpUrl:
          type: string
          format: uri
          example: 'https://smp.example.com/peppol'
          description: The URL where the SMP service is hosted
        certificateRef:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: >-
            Reference to the certificate to be used by this SMP. The certificate
            must exist and have service type "SMP".
      required:
        - name
        - smpUrl
        - certificateRef
    DocumentType:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the document type
        abstract:
          type: boolean
          description: Whether this is an abstract document type
        bis-version:
          type: string
          description: BIS version of the document type
        category:
          type: string
          description: Category of the document type
        comment:
          type: string
          description: Additional comments about the document type
        deprecation-release:
          type: string
          description: Release version when this document type was deprecated
        domain-community:
          type: string
          description: Domain community this document type belongs to
        initial-release:
          type: string
          description: Release version when this document type was first introduced
        issued-by-openpeppol:
          type: boolean
          description: Whether this document type was issued by OpenPeppol
        name:
          type: string
          description: Name of the document type
        process-ids:
          type: array
          description: Array of process identifiers associated with this document type
          items:
            type: object
            properties:
              scheme:
                type: string
                description: Process scheme identifier
              value:
                type: string
                description: Process value
        scheme:
          type: string
          description: Document type scheme identifier
        state:
          type: string
          description: Current state of the document type
        value:
          type: string
          description: Document type value
        version:
          type: string
          description: Version of the document type
    Event:
      type: object
      properties:
        type:
          type: string
          enum:
            - WEBHOOK_EVENT
          example: WEBHOOK_EVENT
          description: 'The type of the entity, always set to WEBHOOK_EVENT'
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174111
          description: Unique identifier for the webhook event
        orgId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Reference to the organisation owning the webhook
        eventType:
          type: string
          example: transaction.received
          description: The event type that triggered this webhook event
        webhookRef:
          type: string
          format: uuid
          example: 223e4567-e89b-12d3-a456-426614174999
          description: Reference to the webhook this event was sent to
        data:
          type: object
          additionalProperties: true
          example:
            transactionId: txn-001
            status: RECEIVED
          description: The payload data of this webhook event
        createdAt:
          type: string
          format: date-time
          example: '2025-09-12T08:15:00Z'
          description: Creation timestamp (ISO 8601)
        retryCount:
          type: integer
          example: 1
          description: 'The retry attempt number (0, 1, or 2)'
      required:
        - type
        - id
        - orgId
        - eventType
        - webhookRef
        - data
        - createdAt
      example:
        type: WEBHOOK_EVENT
        id: 123e4567-e89b-12d3-a456-426614174111
        orgId: 550e8400-e29b-41d4-a716-446655440000
        eventType: transaction.received
        webhookRef: 223e4567-e89b-12d3-a456-426614174999
        data:
          transactionId: txn-001
          status: RECEIVED
        createdAt: '2025-09-12T08:15:00Z'
        retryCount: 0
    Member:
      type: object
      properties:
        type:
          type: string
          enum:
            - MEMBER
          example: MEMBER
          description: 'The type of the entity, always set to MEMBER'
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the member
        orgId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: ID of the organisation this member belongs to
        role:
          type: string
          enum:
            - orgadmin
            - orgmember
          example: orgmember
          description: Role of the member in the organisation
        userRef:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Reference to the user
        name:
          type: string
          example: John Doe
          description: Optional name of the member
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this member
        lastModifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp (ISO 8601)
          nullable: true
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who last modified this member
          nullable: true
      required:
        - type
        - id
        - orgId
        - role
        - userRef
        - createdAt
        - createdBy
    Organisation:
      type: object
      properties:
        type:
          type: string
          enum:
            - ORGANISATION
          example: ORGANISATION
          description: 'The type of the entity, always set to ORGANISATION'
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the organisation
          readOnly: true
        legalName:
          type: string
          example: Acme Corporation Ltd
          description: The legal name of the organization
        shortName:
          type: string
          example: Acme Corp
          description: Short name of the organization
          nullable: true
        countryCode:
          type: string
          example: SE
          description: Country code of the organisation
        legalIdentifier:
          type: string
          example: '123456789'
          description: The legal identifier of the organization
        legalIdentifierCode:
          type: string
          example: 'SE:ORGNR'
          description: The code for the legal identifier scheme
        organisationMode:
          type: string
          enum:
            - DEMO
            - WHITELABEL
            - SHARED
          example: SHARED
          description: >-
            The current mode of the organization. DEMO mode restricts
            certificate creation. Only superadmins can update this field.
          default: SHARED
        modeChangeRequest:
          type: string
          enum:
            - WHITELABEL
            - SHARED
          example: WHITELABEL
          description: >-
            Pending mode change request. Org admins can request mode changes,
            superadmins approve by updating organisationMode. Automatically
            cleared when organisationMode is updated. Can be set to null to
            reject a request.
          nullable: true
          required: false
        certificates:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Production Certificate
              type:
                type: string
                example: X509
              id:
                type: string
                example: cert-123
            required:
              - name
              - type
              - id
          description: Array of certificates associated with the organization
          nullable: true
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
          description: Business contact information for the organisation
          nullable: true
        businessAddress:
          $ref: '#/components/schemas/Address'
          description: Business address information for the organisation
          nullable: true
        website:
          type: string
          format: uri
          example: 'https://www.acme.com'
          description: Website URL of the organisation
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
          readOnly: true
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this organisation
          readOnly: true
        lastModifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp (ISO 8601)
          nullable: true
          readOnly: true
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who last modified this organisation
          nullable: true
          readOnly: true
    Pagination:
      type: object
      properties:
        hasMore:
          type: boolean
          description: Indicates if there are more items available beyond the current page
          example: true
        count:
          type: integer
          description: Number of items in the current page
          example: 25
        limit:
          type: integer
          description: Maximum number of items per page
          example: 100
        lastEvaluatedKey:
          type: string
          description: >-
            Token for the next page. Include this as the lastEvaluatedKey
            parameter to get the next page.
          example: pagination-token
          nullable: true
      required:
        - hasMore
        - count
        - limit
    Participant:
      type: object
      properties:
        type:
          type: string
          enum:
            - PARTICIPANT
          example: PARTICIPANT
          description: 'The type of the entity, always set to PARTICIPANT'
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the participant
          readOnly: true
        orgId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Reference to the organisation owning the participant
        name:
          type: string
          example: Acme Corporation
          description: Participant name
        participantIdentifier:
          type: string
          example: 'iso6523-actorid-upis::0007:2147337564387431'
          description: >-
            The unique identifier of the participant, used for Service Metadata
            Publisher (SMP) registration and document exchange within the Peppol
            network. Must follow schemeID::value format.
        smpRef:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: UID of the SMP the participant belongs to
        apRef:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: >-
            UID of the Access Point the participant will receive transactions
            from
        transportProfile:
          type: string
          enum:
            - peppol-transport-as4-v2_0
            - dbna
            - nemhandel
          example: peppol-transport-as4-v2_0
          description: The transport profile to use
        apUrl:
          type: string
          format: uri
          example: 'https://ap.arratech.com/as4/123e4567-e89b-12d3-a456-426614174003'
          description: >-
            The Access Point URL for this participant. This is auto-generated by
            the system based on the AP configuration. When the participant
            organization differs from the selected AP organization, the
            participant organization ID is appended to the AP URL path. This
            field is read-only and not settable by clients.
          readOnly: true
        businessCard:
          $ref: '#/components/schemas/BusinessCard'
          description: Business card information for the participant
          nullable: true
        supportedDocumentTypes:
          type: array
          items:
            type: object
            properties:
              documentId:
                type: string
                example: >-
                  urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1
                description: The document type identifier (URN format)
              processId:
                type: string
                example: 'urn:fdc:peppol.eu:2017:poacc:billing:01:1.0'
                description: The process identifier for this document type (URN format)
            required:
              - documentId
              - processId
          description: >-
            Array of supported document types and their associated processes for
            this participant
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
          readOnly: true
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this participant
          readOnly: true
        lastModifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp (ISO 8601)
          nullable: true
          readOnly: true
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who last modified this participant
          nullable: true
          readOnly: true
    ParticipantIdentifier:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the participant identifier scheme
        country:
          type: string
          description: Country code where this identifier scheme is used
          nullable: true
        deprecation-release:
          type: string
          description: Release version when this scheme was deprecated
          nullable: true
        display:
          type: string
          description: Display name for the scheme
          nullable: true
        examples:
          type: string
          description: Example values for this identifier scheme
          nullable: true
        initial-release:
          type: string
          description: Release version when this scheme was first introduced
          nullable: true
        iso6523:
          type: string
          description: ISO 6523 identifier for the scheme
        issuing-agency:
          type: string
          description: Agency responsible for issuing identifiers in this scheme
          nullable: true
        registrable:
          type: boolean
          description: Whether identifiers in this scheme can be registered
          nullable: true
        removal-date:
          type: string
          description: Date when this scheme was removed
          nullable: true
        scheme-name:
          type: string
          description: Name of the identifier scheme
          nullable: true
        schemeid:
          type: string
          description: Unique identifier for the scheme
          nullable: true
        state:
          type: string
          description: 'Current state of the scheme (e.g., active, deprecated, removed)'
          nullable: true
        structure:
          type: string
          description: Structure or format of identifiers in this scheme
          nullable: true
        validation-rules:
          type: string
          description: Rules for validating identifiers in this scheme
          nullable: true
        version:
          type: string
          description: Version of the scheme
          nullable: true
    ParticipantLookupResponse:
      type: object
      properties:
        name:
          type: string
          example: Acme Corporation
          description: The name of the participant
        participantIdentifier:
          type: string
          example: '0007:6391770653567760'
          description: 'The participant identifier in the format scheme:value'
        apUrl:
          type: string
          format: uri
          example: 'https://ap.example.com/as4'
          description: The Access Point URL for the participant
        transportProfile:
          type: string
          example: peppol-transport-as4-v2_0
          description: The transport profile used by the participant
          enum:
            - peppol-transport-as4-v2_0
            - dbna
            - nemhandel
        supportedDocumentTypes:
          type: array
          items:
            type: object
            properties:
              documentId:
                type: string
                example: >-
                  urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:www.cenbii.eu:transaction:biicoretrdm010:ver1.0:#urn:www.peppol.eu:bis:peppol4a:ver1.0::2.1
                description: The document type identifier
              processId:
                type: string
                example: 'urn:fdc:peppol.eu:2017:poacc:billing:01:1.0'
                description: The process identifier
          description: List of supported document types and processes
        businessCard:
          $ref: '#/components/schemas/BusinessCard'
          description: Business card information for the participant
          nullable: true
    Smp:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the SMP
        type:
          type: string
          enum:
            - SMP
          example: SMP
          description: 'The type of the entity, always set to SMP'
        orgId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Organisation that owns this SMP
        name:
          type: string
          example: Production SMP
          description: Name of the SMP
        description:
          type: string
          example: SMP for production environment
          description: Description of the SMP
          nullable: true
        smpUrl:
          type: string
          format: uri
          example: 'https://smp.example.com/peppol'
          description: The URL where the SMP service is hosted
        certificateRef:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: >-
            Reference to the certificate used by this SMP. The certificate must
            exist and have service type "SMP".
        environment:
          type: string
          enum:
            - PROD
            - TEST
          example: PROD
          description: >-
            The environment where the SMP is used, populated from the
            certificate
          nullable: true
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this SMP
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who last modified this SMP
          nullable: true
        lastModifiedAt:
          type: string
          format: date-time
          description: Last modification timestamp (ISO 8601)
          nullable: true
      required:
        - id
        - type
        - orgId
        - name
        - smpUrl
        - certificateRef
        - createdBy
        - createdAt
    Transaction:
      type: object
      properties:
        type:
          type: string
          description: 'The type of the entity, always set to TRANSACTION'
        id:
          type: string
          format: uuid
          description: Unique transaction identifier
          example: a1b2c3d4-e5f6-7890-1234-56789abcdef0
        orgId:
          type: string
          format: uuid
          description: Organization identifier
        apId:
          type: string
          format: uuid
          description: Access Point ID used for the transaction
        documentFlow:
          type: string
          enum:
            - TO_NETWORK
            - FROM_NETWORK
          description: Direction of document transmission
          example: TO_NETWORK
        transportProfile:
          type: string
          description: eDelivery transport profile in use
          example: peppol-transport-as4-v2_0
        senderId:
          type: string
          description: 'ISO 6523 Sender participant ID (e.g., 0007:123456789)'
        receiverId:
          type: string
          description: ISO 6523 Receiver participant ID
        docTypeId:
          type: string
          description: 'Document type identifier (e.g., UBL invoice URN)'
          example: 'urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##...'
        processId:
          type: string
          description: Peppol process identifier
          example: 'urn:fdc:peppol.eu:2017:poacc:billing:01:1.0'
        senderCountry:
          type: string
          description: Sender country code (ISO 3166-1 alpha-2)
          example: SE
        receiverCountry:
          type: string
          description: Receiver country code (ISO 3166-1 alpha-2)
          example: SE
        senderSP:
          type: string
          description: >-
            The sender service provider (C2), given by CertSubjectCN Peppol AP
            Certificate Subject CN (Common Name)
          example: SE
        receiverSP:
          type: string
          description: >-
            The sender receiver provider (C3), given by CertSubjectCN Peppol AP
            Certificate Subject CN (Common Name)
          example: SE
        docName:
          type: string
          description: Optional human-readable name for the document
          nullable: true
        docInstanceId:
          type: string
          format: uuid
          description: Instance-level identifier for the document
          example: de195274-3f0c-40ee-9f5d-83cdc898d158
        artefacts:
          type: string
          description: JSON-encoded string of artefact Ids
          example: >-
            [ "c850cd0c-df6a-4704-b40d-06a3134fd3fc",                  
            "52e76e30-1a8e-4725-b015-da4975544342",                  
            "8c6e2ee5-daaa-4fad-b0dc-11d2f4132ee2" ]
        transactionStatus:
          type: string
          enum:
            - REQUEST
            - PROCESSING
            - COMPLETED
            - FAILED
          description: Current status of the transaction lifecycle
          example: COMPLETED
        deliveryAttempts:
          type: integer
          description: How many delivery attempts were made (for async sending)
          example: 1
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601)
      required:
        - type
        - id
        - orgId
        - apId
        - documentFlow
        - transportProfile
        - senderId
        - receiverId
        - docTypeId
        - processId
        - senderCountry
        - receiverCountry
        - senderSP
        - receiverSP
        - docInstanceId
        - artefacts
        - transactionStatus
        - createdAt
    TransactionArtefact:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2a80cafe-d00d-4b00-babe-123456789abc
          description: Unique identifier for this specific artefact instance
        type:
          type: string
          example: ARTEFACT
          description: 'The type of the entity, always set to ARTEFACT'
        itemType:
          type: string
          example: AS4_IN
          description: String ID representing the type of artefact
        contentType:
          type: string
          example: application/soap+xml
          description: MIME type of the artefact
        description:
          type: string
          example: 'Archive of incoming AS4 request events, captured in raw format.'
          description: Human-readable description of the artefact purpose
        result:
          type: string
          enum:
            - SUCCESS
            - ARTEFACT_ERROR_STORAGE_OK
            - ARTEFACT_OK_STORAGE_ERROR
            - ARTEFACT_ERROR_STORAGE_ERROR
          description: Outcome of the operation and artefact generation.
      required:
        - id
        - type
        - itemTypeId
        - itemType
        - contentType
        - fileExtension
        - fileHandle
        - result
    TransactionArtefactResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2a80cafe-d00d-4b00-babe-123456789abc
          description: Unique identifier for this specific artefact instance
        type:
          type: string
          example: ARTEFACT
          description: 'The type of the entity, always set to ARTEFACT'
        itemType:
          type: string
          example: AS4_IN
          description: String ID representing the type of artefact
        contentType:
          type: string
          example: application/soap+xml
          description: MIME type of the artefact
        description:
          type: string
          example: 'Archive of incoming AS4 request events, captured in raw format.'
          description: Human-readable description of the artefact purpose
        result:
          type: string
          enum:
            - SUCCESS
            - ARTEFACT_ERROR_STORAGE_OK
            - ARTEFACT_OK_STORAGE_ERROR
            - ARTEFACT_ERROR_STORAGE_ERROR
          description: Outcome of the operation and artefact generation.
      required:
        - id
        - type
        - itemType
        - itemTypeId
        - contentType
        - result
    TransactionResponse:
      type: object
      properties:
        type:
          type: string
          description: 'The type of the entity, always set to TRANSACTION'
        id:
          type: string
          format: uuid
          description: Unique identifier for the transaction
          example: 0acd015e-2a24-42d8-a94c-ba26d2feb8f1
        orgId:
          type: string
          format: uuid
          description: Organization identifier
        apId:
          type: string
          format: uuid
          description: Access Point (AP) ID associated with this transaction
          example: 7294c81c-1f00-49ad-a4f0-60140958dfb3
        documentFlow:
          type: string
          enum:
            - TO_NETWORK
            - FROM_NETWORK
          description: Direction of document transmission
          example: TO_NETWORK
        transportProfile:
          type: string
          description: 'eDelivery transport protocol profile used (e.g., PEPPOL AS4)'
          example: peppol-transport-as4-v2_0
        senderId:
          type: string
          description: 'ISO 6523 Participant ID of the sender (e.g., PEPPOL ID)'
          example: '0007:9697947415'
        receiverId:
          type: string
          description: 'ISO 6523 Participant ID of the receiver (e.g., PEPPOL ID)'
          example: '0007:9697947415'
        docTypeId:
          type: string
          description: 'Document Type Identifier (e.g., UBL invoice)'
          example: >-
            urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1
        processId:
          type: string
          description: Process Identifier describing the business process
          example: 'urn:fdc:peppol.eu:2017:poacc:billing:01:1.0'
        senderCountry:
          type: string
          description: Sender country code (ISO 3166-1 alpha-2)
          example: SE
        receiverCountry:
          type: string
          description: Receiver country code (ISO 3166-1 alpha-2)
          example: SE
        senderSP:
          type: string
          description: >-
            The sender service provider (C2), given by CertSubjectCN Peppol AP
            Certificate Subject CN (Common Name)
          example: SE
        receiverSP:
          type: string
          description: >-
            The sender receiver provider (C3), given by CertSubjectCN Peppol AP
            Certificate Subject CN (Common Name)
          example: SE
        docInstanceId:
          type: string
          format: uuid
          description: Unique identifier for the document instance within the transaction
          example: de195274-3f0c-40ee-9f5d-83cdc898d158
        transactionStatus:
          type: string
          enum:
            - REQUEST
            - PROCESSING
            - COMPLETED
            - FAILED
          description: Current status of the transaction lifecycle
          example: COMPLETED
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the transaction was created (ISO 8601)
          example: '2025-06-28T08:33:24.637Z'
      required:
        - type
        - id
        - orgId
        - apId
        - documentFlow
        - senderId
        - receiverId
        - docTypeId
        - processId
        - senderCountry
        - receiverCountry
        - senderSP
        - receiverSP
        - docInstanceId
        - transportProfile
        - transactionStatus
        - createdAt
    TransactionUpload:
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
          description: Transaction ID created for the uploaded document
        uploadUrl:
          type: string
          format: uri
          description: Signed S3 URL for uploading the document
      required:
        - transactionId
        - uploadUrl
    UpdateSmpInput:
      type: object
      properties:
        name:
          type: string
          example: Updated SMP Name
          description: New name for the SMP
          nullable: true
        description:
          type: string
          example: Updated SMP description
          description: New description for the SMP
          nullable: true
        smpUrl:
          type: string
          format: uri
          example: 'https://smp.example.com/peppol'
          description: The URL where the SMP service is hosted
          nullable: true
        certificateRef:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: >-
            New certificate reference for the SMP. The certificate must exist
            and have service type "SMP".
          nullable: true
    User:
      type: object
      properties:
        id:
          type: string
          example: user_123
        name:
          type: string
          example: John Doe
        email:
          type: string
          format: email
          example: john@example.com
        phone:
          type: string
          example: '+1234567890'
          description: Phone number of the user
        countryCode:
          type: string
          example: US
          description: 'Country of origin, ISO 3166-1 alpha-2 code'
          nullable: true
        optedInToReceiveInfo:
          type: boolean
          example: false
          description: True if the user has approved to receive info from Arratech
          default: false
        role:
          type: string
          enum:
            - superadmin
            - user
          example: user
          description: User role - superadmin or user
          default: user
          required: false
        memberships:
          type: array
          items:
            type: object
            properties:
              orgId:
                type: string
              role:
                type: string
              legalName:
                type: string
              legalIdentifier:
                type: string
              memberSince:
                type: string
                format: date-time
              memberRef:
                type: string
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: >-
            Information about the user who created this user. Automatically set
            during creation.
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp (ISO 8601). Automatically set during creation.
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: >-
            Information about the user who last modified this user.
            Automatically updated during updates.
          nullable: true
        lastModifiedAt:
          type: string
          format: date-time
          description: >-
            Last modification timestamp (ISO 8601). Automatically updated during
            updates.
          nullable: true
      required:
        - id
        - name
        - email
        - createdBy
        - createdAt
    UserRef:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: User ID
      required:
        - userId
    ValidationResponse:
      type: object
      properties:
        runtime:
          type: integer
          description: Total validation execution time in milliseconds
          example: 342
        status:
          type: string
          enum:
            - OK
            - FAILED
          description: Overall validation status
        sections:
          type: array
          description: List of individual validation rule sections and their results
          items:
            $ref: '#/components/schemas/VefaValidationSection'
      required:
        - runtime
        - status
        - sections
    VefaValidationSection:
      type: object
      properties:
        configuration:
          type: string
          description: >-
            Identifier of the validation ruleset configuration (e.g., PEPPOL
            BIS)
        runtime:
          type: string
          description: Execution time for the ruleset
          example: 5ms
        assertions:
          type: array
          description: List of validation assertions (empty if all passed)
          items:
            type: object
            properties: {}
            additionalProperties: true
      required:
        - configuration
        - runtime
        - assertions
    Webhook:
      type: object
      properties:
        type:
          type: string
          enum:
            - WEBHOOK
          example: WEBHOOK
          description: 'The type of the entity, always set to WEBHOOK'
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          description: Unique identifier for the webhook
        orgId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
          description: Reference to the organisation owning the webhook
        description:
          type: string
          example: Webhook for transaction events
          description: A human-readable description for the webhook
        events:
          type: array
          items:
            type: string
          example:
            - transaction.received
            - transaction.sent
          description: List of event types this webhook subscribes to
        url:
          type: string
          format: uri
          example: 'https://example.com/webhook-endpoint'
          description: The endpoint URL for webhook delivery. Must be HTTPS in production.
        isEnabled:
          type: boolean
          example: true
          description: 'If false, the webhook will not trigger'
        secret:
          type: string
          example: f2b5a5e2-5d1e-4f6a-9d5a-3f8f8c5e9b21
          description: Secret used to sign webhook payloads (only returned at creation)
        createdBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who created this webhook
        createdAt:
          type: string
          format: date-time
          example: '2025-09-12T08:00:00Z'
          description: Creation timestamp (ISO 8601)
        lastModifiedBy:
          $ref: '#/components/schemas/UserRef'
          description: Information about the user who last modified this webhook
          nullable: true
        lastModifiedAt:
          type: string
          format: date-time
          example: '2025-09-13T09:30:00Z'
          description: Last modification timestamp (ISO 8601)
          nullable: true
      required:
        - type
        - id
        - orgId
        - events
        - url
        - isEnabled
        - secret
        - createdBy
        - createdAt
      example:
        type: WEBHOOK
        id: 123e4567-e89b-12d3-a456-426614174000
        orgId: 550e8400-e29b-41d4-a716-446655440000
        description: Webhook for transaction events
        events:
          - transaction.received
          - transaction.sent
        url: 'https://example.com/webhook-endpoint'
        isEnabled: true
        secret: f2b5a5e2-5d1e-4f6a-9d5a-3f8f8c5e9b21
        createdBy:
          userId: user-uuid-1
        createdAt: '2025-09-12T08:00:00Z'
        lastModifiedBy:
          userId: user-uuid-2
        lastModifiedAt: '2025-09-13T09:30:00Z'
security:
  - bearerAuth: []
  - apiKeyAuth: []
syncables:
  toNetwork:
    description: Invoice and Credit Note Documents sent by the authenticated user.
    type: collection
    get:
      path: '/orgs/{orgId}/transactions/to_network'
      field: items
      paging:
        pageTokenParam: lastEvaluatedKey
        pageSizeParam: limit
    add-doc:
      path: '/orgs/{orgId}/transactions'
      method: post
  fromNetwork:
    description: Invoice and Credit Note Documents received by the authenticated user.
    type: collection
    get:
      path: '/orgs/{orgId}/transactions/from_network'
      field: items
      paging:
        pageTokenParam: lastEvaluatedKey
        pageSizeParam: limit

