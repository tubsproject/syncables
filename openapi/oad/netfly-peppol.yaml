openapi: 3.0.3
info:
  title: Netfly Peppol API
  version: "3.0.0"
  description: |
    The Netfly Peppol API allows ERP systems to interact with the Peppol network
    through secure endpoints for sending, receiving, and managing business documents,
    participants, and webhook notifications.

    üîó **Full error code reference:** [View here](error-codes.html)

    üîê **Authentication**
    All requests must include a Bearer token obtained from Auth0 using the OAuth2 Client Credentials Flow.

    **Token Request Example:**
    ```
    curl --request POST \
      --url https://netfly-test.eu.auth0.com/oauth/token \
      --header 'Content-Type: application/json' \
      --data '{
        "client_id": "YOUR_CLIENT_ID",
        "client_secret": "YOUR_CLIENT_SECRET",
        "audience": "https://netfly-test.eu.auth0.com/api/v2/",
        "grant_type": "client_credentials"
      }'
    ```

    **Authenticated Request Example:**
    ```
    curl -X GET https://peppol2.netfly.be/netfly/documentsList \
      -H "Authorization: Bearer YOUR_ACCESS_TOKEN"
    ```

  contact:
    name: Netfly Developer
    url: https://www.netfly.eu.com
    email: support@netfly.eu.com

servers:
  - url: https://peppol2.netfly.be/netfly
    description: Staging server
  - url: https://service.netfly.eu.com/netfly
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiResult:
      type: object
      properties:
        success: { type: boolean }
        code:    { type: string }
        message: { type: string }
      required: [success, code, message]

    DocumentTypeName:
      type: string
      description: Simplified document type identifier used in requests.
      enum:
        - PEPPOL_BIS_BILLING_UBL_INVOICE_V3
        - PEPPOL_BIS_BILLING_UBL_CREDITNOTE_V3
        - PEPPOL_INVOICE_RESPONSE_3
        - PEPPOL_ORDER_TRANSACTION_3
        - EN_16931_CII_INVOICE
        - PEPPOL_MESSAGE_LEVEL_STATUS_1

    Participant:
      type: object
      properties:
        name:              { type: string, example: "Company SA" }
        street:            { type: string, example: "Rue de la Gare" }
        streetNr:          { type: string, example: "212" }
        zip:               { type: string, example: "4219" }
        city:              { type: string, example: "Wasseiges" }
        country:           { type: string, minLength: 2, maxLength: 2, example: "BE" }
        participantId:     { type: string, example: "be0123456789" }
        participantScheme: { type: string, example: "9925" }
        participantPrefix: { type: string, enum: ["iso6523-actorid-upis"], example: "iso6523-actorid-upis" }
        webURI:            { type: string, format: uri, example: "https://www.company.be" }
        contactType:       { type: string, example: "CEO" }
        contactName:       { type: string, example: "John Doe" }
        contactPhone:      { type: string, example: "+32 475 123456" }
        contactEmail:      { type: string, format: email, example: "john@company.be" }
        documentTypes:
          type: array
          description: |
            One or more simplified document type names.
            See `DocumentTypeName` enum for the full list.
          minItems: 1
          items: { $ref: '#/components/schemas/DocumentTypeName' }
      required:
        - name
        - country
        - participantId
        - participantScheme
        - participantPrefix
        - contactEmail
        - documentTypes

    ParticipantUpdateResult:
      allOf:
        - $ref: '#/components/schemas/ApiResult'
        - type: object
          properties:
            addedDocumentTypes:
              type: array
              items: { $ref: '#/components/schemas/DocumentTypeName' }
            deletedDocumentTypes:
              type: array
              items: { $ref: '#/components/schemas/DocumentTypeName' }

    ParticipantDeleteResult:
      allOf:
        - $ref: '#/components/schemas/ApiResult'
        - type: object
          properties:
            deletedParticipantId:
              type: integer
              example: 5

    ParticipantLookupResult:
      type: object
      properties:
        success: { type: boolean, example: true }
        code: { type: string, example: "PLK00" }
        participantID: { type: string, example: "iso6523-actorid-upis::0208:0475689186" }
        environment: { type: string, enum: ["digittest","digitprod"] }
        exists: { type: boolean, example: true }
        sml: { type: string, example: "digittest" }
        smpHostURI: { type: string, example: "http://smp.netfly.eu.com" }
        documentTypes:
          type: array
          items:
            type: object
            properties:
              documentTypeID: { type: string }
              niceName: { type: string }
              state: { type: string, example: "act" }
              isDeprecated: { type: boolean, example: false }
        queryDurations:
          type: object
          properties:
            helgerMillis: { type: integer, example: 48 }
            smpToolMillis: { type: integer, example: 799 }
      required:
        - success
        - code
        - participantID
        - environment
        - exists
        - documentTypes

    Webhook:
      type: object
      properties:
        url:               { type: string, example: "https://webhook.client.be" }
        includeXmlPayload: { type: boolean, example: true }
      required:
        - url
        - includeXmlPayload

    WebhookNotification:
      type: object
      properties:
        event:
          type: string
          example: "documentReceived"
        timestamp:
          type: string
          format: date-time
          example: "2025-08-14T09:34:15Z"
        sender:
          type: string
          example: "9925:BE0475689186"
        senderCountry:
          type: string
          example: "BE"
        recipient:
          type: string
          example: "0208:0486243141"
        documentId:
          type: string
          example: "1234"
        documentType:
          type: string
          example: "urn:fdc:peppol.eu:2017:poacc:billing:01:1.0"
        vesid:
          type: string
          example: "eu.peppol.bis3:invoice:2024.5"
        downloadUrl:
          type: string
          format: uri
          example: "SFTP_SERVER"
        xmlBase64:
          type: string
          description: Base64 encoded UBL XML document (present only if includeXmlPayload=true)
          example: "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGlu... (base64-encoded full UBL XML)"

security:
  - bearerAuth: []

paths:
  /sendDocument:
    post:
      tags: [Send Documents]
      summary: Submit a Peppol document to the Access Point
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              description: UBL 2.1 Peppol BIS Billing 3.0 XML
              xml:
                name: Invoice
            example: |
              <?xml version="1.0" encoding="UTF-8"?>
              <Invoice xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2">
                <cbc:CustomizationID>urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0</cbc:CustomizationID>
                <cbc:ProfileID>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</cbc:ProfileID>
                <cbc:ID>Snippet1</cbc:ID>
                <cbc:IssueDate>2017-11-13</cbc:IssueDate>
                <cbc:DueDate>2017-12-01</cbc:DueDate>
                <cbc:InvoiceTypeCode>380</cbc:InvoiceTypeCode>
                <cbc:DocumentCurrencyCode>EUR</cbc:DocumentCurrencyCode>
                <cbc:AccountingCost>4025:123:4343</cbc:AccountingCost>
                <cbc:BuyerReference>0150abc</cbc:BuyerReference>
                <!-- ... more UBL content ... -->
              </Invoice>
      responses:
        '200':
          description: Document received successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  code:
                    type: string
        '400':
          description: Bad request
        '500':
          description: Server error
      security:
        - bearerAuth: []

  /documentsList:
    get:
      tags: [Documents List]
      summary: Retrieve a list of sent or received documents
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            example: "20250201000000"
          description: Start of interval (UTC timestamp, yyyyMMddHHmmss)
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            example: "20250430235959"
          description: End of interval (UTC timestamp, yyyyMMddHHmmss)
        - name: flow
          in: query
          required: true
          schema:
            type: string
            enum: [in, out]
          description: Flow direction
      responses:
        '200':
          description: List of documents returned
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    inputDate:
                      type: string
                      format: date-time
                    clientNumber:
                      type: string
                    sender:
                      type: string
                    recipient:
                      type: string
                    documentId:
                      type: string
                    documentType:
                      type: string
                    documentVesid:
                      type: string
                    country:
                      type: string
                    status:
                      type: string
                    feedback:
                      type: string
                    retries:
                      type: integer
                    lastTry:
                      type: string
                      format: date-time
                    fileName:
                      type: string
                    apMessage:
                      type: string
        '400':
          description: Missing or invalid parameters
        '404':
          description: Document not found
        '500':
          description: Server error
      security:
        - bearerAuth: []
  /receiveDocument:
    get:
      tags: [Receive Documents]
      summary: Retrieve a Peppol document by internal ID
      parameters:
        - name: docId
          in: query
          required: true
          schema:
            type: integer
          description: Internal document ID
        - name: flow
          in: query
          required: true
          schema:
            type: string
            enum: [in, out]
          description: Flow direction (in or out)
      responses:
        '200':
          description: Peppol BIS Billing 3.0 XML document
          content:
            application/xml:
              schema:
                type: string
        '400':
          description: Missing or invalid parameters
        '404':
          description: Document not found
        '500':
          description: Server error
      security:
        - bearerAuth: []

  /participantManagement:
    post:
      tags: [Register Participants]
      summary: Register a new Peppol participant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
            examples:
              withDocumentTypes:
                summary: Recommended payload
                value:
                  name: Company SA
                  street: Rue de la Gare
                  streetNr: 212
                  zip: 4219
                  city: Wasseiges
                  country: BE
                  participantId: 0123456789
                  participantScheme: "0208"
                  participantPrefix: iso6523-actorid-upis
                  webURI: https://www.company.be
                  contactType: CEO
                  contactName: John Doe
                  contactPhone: "+32 475 123456"
                  contactEmail: john@company.be
                  documentTypes:
                    - PEPPOL_BIS_BILLING_UBL_INVOICE_V3
                    - PEPPOL_BIS_BILLING_UBL_CREDITNOTE_V3
                    - PEPPOL_ORDER_TRANSACTION_3
      responses:
        '200':
          description: Participant created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
              examples:
                ok:
                  value: { success: true, message: "participant created successfully", code: "PMC00" }
        '202':
          description: Participant stored but already registered at external SMP (admin notified)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResult'
              examples:
                pendingMigration:
                  value: {
                    success: true,
                    message: "participant added, but already registered in another SMP. Admin has been notified.",
                    code: "PMC15"
                  }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                badCountry:
                  value: { success: false, code: "PMC02", message: "invalid ISO country code" }
                missingDocs:
                  value: { success: false, code: "PMC08", message: "at least one document type is required" }
        '409':
          description: Participant already exists in Netfly database
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                duplicate:
                  value: { success: false, code: "PMC16", message: "participant is already managed by another client" }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                duplicate:
                  value: { success: false, code: "PMC07", message: "failed to create participant" }
      security:
        - bearerAuth: []
    put:
      tags: [Update Participants]
      summary: Update an existing Peppol participant and synchronize document types with the SMP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Participant'
            examples:
              example:
                value:
                  name: Company SA
                  street: Rue de la Gare
                  streetNr: 212
                  zip: 4219
                  city: Wasseiges
                  country: BE
                  participantId: be0123456789
                  participantScheme: "9925"
                  participantPrefix: iso6523-actorid-upis
                  webURI: https://www.company.be
                  contactType: CEO
                  contactName: John Doe
                  contactPhone: "+32 475 123456"
                  contactEmail: john@company.be
                  documentTypes:
                    - PEPPOL_BIS_BILLING_UBL_INVOICE_V3
                    - PEPPOL_ORDER_TRANSACTION_3
      responses:
        '200':
          description: Participant updated and SMP synchronized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ParticipantUpdateResult' }
              examples:
                ok:
                  value:
                    success: true
                    code: PMU00
                    message: "participant updated successfully"
                    addedDocumentTypes: ["PEPPOL_ORDER_TRANSACTION_3"]
                    deletedDocumentTypes: ["PEPPOL_BIS_BILLING_UBL_CREDITNOTE_V3"]
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                invalide scheme:
                  value: { success: false, code: "PMU04", message: "participant scheme is inactive or unknown (example correct values: 0208, 9925, ...)" }
        '404':
          description: Participant not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                invalide scheme:
                  value: { success: false, code: "PMU06", message: "participant not found or not owned by specified client" }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                invalide scheme:
                  value: { success: false, code: "PMU07", message: "failed to update participant" }
      security:
        - bearerAuth: []
    delete:
      tags: [Delete Participants]
      summary: Delete a participant
      parameters:
        - name: id
          in: query
          required: true
          schema: { type: integer, example: 5 }
          description: Internal participant numeric ID
      responses:
        '200':
          description: Participant deleted
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ParticipantDeleteResult' }
              examples:
                ok:
                  value: {
                    success: true,
                    code: "PMD00",
                    message: "participant deleted successfully",
                    deletedParticipantId: 5
                  }
        '400':
          description: Invalid ID
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                ok:
                  value: {
                    success: false,
                    code: "PMD02",
                    message: "invalid participant ID format"
                  }
        '404':
          description: Participant not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                ok:
                  value: {
                    success: false,
                    code: "PMD03",
                    message: "participant not found or not owned by specified client"
                  }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                ok:
                  value: {
                    success: false,
                    code: "PM500",
                    message: "internal error"
                  }
      security:
        - bearerAuth: []

  /participantsList:
    get:
      tags: [Participants List]
      summary: List registered participants
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: contactName
          in: query
          required: false
          schema:
            type: string
        - name: contactEmail
          in: query
          required: false
          schema:
            type: string
        - name: participantId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of participants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Participant'
        '500':
          description: Server error
      security:
        - bearerAuth: []

  /participantLookup:
    get:
      tags: [Participants lookup]
      summary: Check participant existence and list supported document types
      description: >
        Verifies whether a participant exists in the Peppol network.
        If it exists, queries Netfly smptool to list supported document types.
      operationId: participantLookup
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: scheme
          required: true
          description: Participant scheme ID (e.g., `9925` or `0208`)
          schema:
            type: string
            example: "0208"
        - in: query
          name: participant_id
          required: true
          description: Participant identifier value (e.g., `0475689186`)
          schema:
            type: string
            example: "0475689186"
      responses:
        '200':
          description: Participant status and (if found) supported document types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantLookupResult'
              examples:
                found:
                  summary: Found with document types
                  value:
                    success: true
                    code: PLK00
                    participantID: "iso6523-actorid-upis::0208:0475689186"
                    environment: "digittest"
                    exists: true
                    sml: "digittest"
                    smpHostURI: "http://smp.netfly.eu.com"
                    documentTypes:
                      - documentTypeID: "busdox-docid-qns::urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1"
                        niceName: "Peppol BIS Billing UBL Invoice V3"
                        state: "act"
                        isDeprecated: false
                      - documentTypeID: "busdox-docid-qns::urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2::CreditNote##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1"
                        niceName: "Peppol BIS Billing UBL Credit Note V3"
                        state: "act"
                        isDeprecated: false
                    queryDurations: { helgerMillis: 48, smpToolMillis: 799 }
                notFound:
                  summary: Not found
                  value:
                    success: true
                    code: PLK00
                    participantID: "iso6523-actorid-upis::9925:BE0000000000"
                    environment: "digitprod"
                    exists: false
                    documentTypes: []
                    queryDurations: { helgerMillis: 42, smpToolMillis: 0 }
        '400':
          description: Missing/invalid parameters
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                missingParams:
                  value: { success: false, code: "PLK400", message: "Missing parameters: scheme and participant_id are required" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
        '502':
          description: Upstream error (Helger or smptool unavailable)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                helger:
                  value: { success: false, code: "PLK502", message: "Upstream error contacting Helger" }
                smptool:
                  value: { success: false, code: "PLK503", message: "Upstream error contacting SMP tool" }
        '500':
          description: Server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }

  /businessCard:
    get:
      tags: [Business card - Read]
      summary: Get Business Card (XML) for a participant
      description: |
        Retrieves the current Peppol Directory Business Card XML for a participant from the SMP.
        The caller must own the participant.
      operationId: businessCardGet
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: scheme
          required: true
          schema:
            type: string
            example: "0208"
          description: Participant scheme (iso6523 subtype).
        - in: query
          name: participantId
          required: true
          schema:
            type: string
            example: "0475689186"
          description: Scheme-specific participant identifier.
      responses:
        '200':
          description: Business Card XML
          content:
            application/xml:
              schema:
                type: string
                description: Raw Business Card XML (namespace http://www.peppol.eu/schema/pd/businesscard/20180621/).
              examples:
                sample:
                  summary: Minimal Business Card
                  value: |
                    <?xml version="1.0" encoding="UTF-8"?>
                    <BusinessCard xmlns="http://www.peppol.eu/schema/pd/businesscard/20180621/">
                      <ParticipantIdentifier scheme="iso6523-actorid-upis">0208:0475689186</ParticipantIdentifier>
                      <BusinessEntity>
                        <Name>Company SA</Name>
                        <CountryCode>BE</CountryCode>
                      </BusinessEntity>
                    </BusinessCard>
        '401':
          description: Unauthorized (missing/invalid token)
        '403':
          description: Forbidden (participant not owned by caller)
        '404':
          description: Business Card not found in SMP
        '500':
          description: Server error

    post:
      tags: [Business card - Create/Update]
      summary: Publish Business Card from participant data (DB ‚Üí SMP)
      description: |
        Creates or updates the participant's Business Card in the SMP using data stored in Netfly (participants table).
        Provide the participant via `scheme` and `participantId`. The caller must own the participant.
      operationId: businessCardPost
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: scheme
          required: true
          schema:
            type: string
            example: "0208"
          description: Participant scheme (iso6523 subtype).
        - in: query
          name: participantId
          required: true
          schema:
            type: string
            example: "0475689186"
          description: Scheme-specific participant identifier.
      responses:
        '200':
          description: Business Card created/updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  code:
                    type: string
                    example: BC200
                  message:
                    type: string
                    example: Business card created/updated from participant data
        '400':
          description: Bad request (e.g., missing parameters)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: BC400 }
                  message: { type: string,  example: "Missing parameters: scheme and participantId" }
        '401':
          description: Unauthorized (missing/invalid token)
        '403':
          description: Forbidden (participant not found or not owned by caller)
        '502':
          description: SMP error / upstream failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: BC502 }
                  message: { type: string,  example: "Failed to store business card in SMP" }

    delete:
      tags: [Business card - Delete]
      summary: Delete a Business Card
      description: >
        Deletes an existing Business Card from the Peppol SMP for a given participant.
        The authenticated client must own the participant being deleted.
        This endpoint communicates directly with the PHOSS SMP REST API.
      operationId: deleteBusinessCard
      parameters:
        - name: scheme
          in: query
          required: true
          schema:
            type: string
            example: "0208"
          description: The participant scheme (e.g., `0208` for Belgium).
        - name: participantId
          in: query
          required: true
          schema:
            type: string
            example: "0475689186"
          description: The participant identifier without the prefix.
      responses:
        '200':
          description: Business Card deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Business card deleted successfully"
                  code:
                    type: string
                    example: "BCD00"
        '400':
          description: Bad request or invalid participant parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid participantId or scheme"
                  code:
                    type: string
                    example: "BCD400"
        '401':
          description: Authentication failed or missing Bearer token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized"
                  code:
                    type: string
                    example: "BCD401"
        '404':
          description: Business Card not found or already deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Business card not found"
                  code:
                    type: string
                    example: "BCD404"
        '500':
          description: Internal server error while communicating with the SMP
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Failed to delete business card from SMP"
                  code:
                    type: string
                    example: "BCD500"
      security:
        - bearerAuth: []

  /participantDocuments:
    post:
      tags: [Participants Document Types - Add]
      summary: Add document types to a participant
      description: >
        Adds one or more Service Metadata document types to an existing participant in the SMP,
        without changing other participant fields. The caller must own the participant.
      operationId: addParticipantDocumentTypes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [participantPrefix, participantScheme, participantId, documentTypes]
              properties:
                participantPrefix:
                  type: string
                  example: iso6523-actorid-upis
                  description: Must be `iso6523-actorid-upis`
                participantScheme:
                  type: string
                  example: "0208"
                participantId:
                  type: string
                  example: "0475689186"
                documentTypes:
                  type: array
                  description: Array of simplified document type names
                  items:
                    type: string
                    example: PEPPOL_BIS_BILLING_UBL_INVOICE_V3
            examples:
              addInvoiceAndCreditNote:
                value:
                  participantPrefix: iso6523-actorid-upis
                  participantScheme: "0208"
                  participantId: "0475689186"
                  documentTypes:
                    - PEPPOL_BIS_BILLING_UBL_INVOICE_V3
                    - PEPPOL_BIS_BILLING_UBL_CREDITNOTE_V3
      responses:
        '200':
          description: Document types added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  code:    { type: string,  example: DTM00 }
                  message: { type: string,  example: "Document types added" }
                  addedDocumentTypes:
                    type: array
                    items: { type: string }
        '400':
          description: Missing/invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: DTM02 }
                  message: { type: string,  example: "Missing or invalid participant identifiers" }
        '401':
          description: Unauthorized
        '404':
          description: Participant not found or not owned by client
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: DTM03 }
                  message: { type: string,  example: "Participant not found or not owned by client" }
        '500':
          description: SMP or internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: DTM500 }
                  message: { type: string,  example: "Internal server error" }

    delete:
      tags: [Participants Document Types - Delete]
      summary: Delete document types from a participant
      description: >
        Deletes Service Metadata for a participant.  
        Provide `?all=true` to remove **all** document types; otherwise pass a JSON body with
        `documentTypes` to remove specific ones. The caller must own the participant.
      operationId: deleteParticipantDocumentTypes
      security:
        - bearerAuth: []
      parameters:
        - name: all
          in: query
          required: false
          schema: { type: boolean }
          description: When `true`, deletes **all** document types for the participant.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [participantPrefix, participantScheme, participantId]
              properties:
                participantPrefix:
                  type: string
                  example: iso6523-actorid-upis
                participantScheme:
                  type: string
                  example: "0208"
                participantId:
                  type: string
                  example: "0475689186"
                documentTypes:
                  type: array
                  description: Required unless `all=true`
                  items:
                    type: string
                    example: PEPPOL_BIS_BILLING_UBL_INVOICE_V3
            examples:
              deleteSpecific:
                summary: Delete specific document types
                value:
                  participantPrefix: iso6523-actorid-upis
                  participantScheme: "0208"
                  participantId: "0475689186"
                  documentTypes:
                    - PEPPOL_BIS_BILLING_UBL_INVOICE_V3
              deleteAll:
                summary: Delete all document types (use with ?all=true)
                value:
                  participantPrefix: iso6523-actorid-upis
                  participantScheme: "0208"
                  participantId: "0475689186"
      responses:
        '200':
          description: Document types deleted (or nothing to delete)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: true }
                  code:    { type: string,  example: DTD00 }
                  message: { type: string,  example: "Document types deleted" }
                  deletedDocumentTypes:
                    type: array
                    items: { type: string }
        '400':
          description: Missing/invalid input (or documentTypes missing when all!=true)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: DTD05 }
                  message: { type: string,  example: "documentTypes array required (or use ?all=true)" }
        '401':
          description: Unauthorized
        '404':
          description: Participant not found or not owned by client
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: DTD03 }
                  message: { type: string,  example: "Participant not found or not owned by client" }
        '500':
          description: SMP or internal error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success: { type: boolean, example: false }
                  code:    { type: string,  example: DTD500 }
                  message: { type: string,  example: "Internal server error" }


  /webhook:
    post:
      tags: [Webhook - Create/Update]
      summary: Create or update webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
            examples:
              example:
                value:
                  url: https://webhook.client.be
                  includeXmlPayload: true

      responses:
        '200':
          description: Webhook created or updated
        '400':
          description: Invalid request
        '404':
          description: Webhook not found
        '500':
          description: Server error
      security:
        - bearerAuth: []
    get:
      tags: [Get Webhook Data]
      summary: Get webhook configuration
      responses:
        '200':
          description: Webhook configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  webhookUrl:
                    type: string
                  includeXmlPayload:
                    type: boolean
                  inputDate:
                    type: string
                    format: date-time
                  webhookSecret:
                    type: string
        '404':
          description: Webhook not found
        '500':
          description: Server error
      security:
        - bearerAuth: []
    delete:
      tags: [Delete a Webhook]
      summary: Delete webhook
      responses:
        '200':
          description: Webhook deleted
        '404':
          description: Webhook not found
        '500':
          description: Server error
      security:
        - bearerAuth: []



  /webhookNotification:
    post:
      tags: [Webhook notification]
      summary: Example of webhook notification payload
      description: >
        When a document is received from Peppol, Netfly sends this JSON payload
        to your registered webhook URL. The request includes the header
        `X-Webhook-Signature` which is an HMAC-SHA256 signature of the body using your webhook secret
        `X-Webhook-Timestamp` Current time
        `X-Webhook-Event` Type of event (e.g. documentReceived)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookNotification'
      responses:
        "200":
          description: Example only ‚Äì clients must respond with HTTP 200 to acknowledge.

  /validate/{vesid}:
    post:
      tags: [Documents Validation]
      summary: Validate a UBL document by VESID
      description: >
        Validates an XML (UBL) document against the specified VESID (e.g. `eu.peppol.bis3:invoice:latest`).
        The XML body is forwarded to Netfly's validator and the response is returned as-is.
      parameters:
        - in: path
          name: vesid
          required: true
          schema:
            type: string
            example: eu.peppol.bis3:invoice:latest
          description: Validation identifier (invoice/creditnote; latest or fixed version).
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: string
              description: Raw XML payload (UBL 2.1)
      responses:
        '200':
          description: Validation report (passthrough)
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '400':
          description: Bad request (e.g., empty body or invalid XML)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
              examples:
                empty:
                  value: { success: false, code: "DV401", message: "Empty XML payload" }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
        '500':
          description: Internal error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ApiResult' }
