{
  "openapi": "3.0.1",
  "info": {
    "title": "Scrada API V1",
    "description": "# Introduction\r\n\r\nThis API document describes the **Scrada API**.\r\n\r\n***\r\n# Changelog\r\n### 1.20\r\n* Peppol outbound Send self-billing invoice added.\r\n\r\n### 1.19\r\n* Add sales invoice endpoint also supports amounts including VAT.\r\n* Peppol outbound Send sales invoice endpoint also supports amounts including VAT.\r\n* Peppol inbound Get PDF of inbound document added.\r\n* Rate limiting documentation added.\r\n\r\n### 1.18\r\n* New Add sales invoice endpoint added.\r\n* Existing Add invoice endpoint marked as deprecated.\r\n* Peppol outbound Send sales invoice endpoint added.\r\n\r\n### 1.17\r\n* Peppol functionality is added. Companies of type 'Peppol Only' can register customers on Peppol, receive inbound documents and put documents on Peppol.\r\n\r\n### 1.16\r\n* Add invoice lines extended with `ItemGroup`.\r\n\r\n### 1.15\r\n* Add lines to journal extended with `CashBookTransactions`.\r\n\r\n### 1.14\r\n* Journal  returns `MinimumPossibleLineDate` and `MaximumPossibleLineDate`.\r\n* Journal has a setting `AllowMultipleEntries`.\r\n* Cash book  returns `MinimumPossibleLineDate` and `MaximumPossibleLineDate`.\r\n\r\n### 1.13\r\n* Journal `AddFiguresApi` has a new option `5`.\r\n\r\n### 1.12\r\n* Company invoice extended with `InvoiceSend`, `PartyLanguageCode`, `PartyTaxNumberType`, `PartyTaxNumber`, and `PartyGlnNumber`.\r\n* Company invoice support payment method `1` Unknown, `9` Debit Card.\r\n\r\n### 1.11\r\n* Add cash book lines extended with optional properties `ExternalReference` and `ExternalData`.\r\n\r\n### 1.10\r\n* Add invoice lines extended with `AccountingAnalytical1` till `AccountingAnalytical5`.\r\n* Add lines to the journal response extended with `Message`.\r\n\r\n### 1.9\r\n* Company invoice `PartyAccountingCode` added.\r\n* Company invoice line `AccountingGeneralLedger` added.\r\n\r\n### 1.8\r\n* Company invoice VAT types added.\r\n\r\n### 1.7\r\n* Add `AllowMultiple` to Payment method.\r\n\r\n### 1.6\r\n* Company invoices added.\r\n* Add lines to the journal extended with `InvoiceID`, `InvoiceReference` `ExternalReference` and `ExternalData`.\r\n\r\n### 1.5\r\n* Cash book, Company, VAT period and Journal API's added.\r\n\r\n### 1.4\r\n* Extended add lines to the cash book with additional (optional) fields.\r\n\r\n### 1.3\r\n* Minor fixes.\r\n\r\n### 1.2\r\n* Add lines to the cash book added.\r\n\r\n\r\n\r\n***\r\n# Environments\r\nTest environment:  \r\n* URL API: https://apitest.scrada.be/v1/...  \r\n* URL web client: [https://mytest.scrada.be](https://mytest.scrada.be)\r\n\t* If you want an account for the test environment, please send an email to info@scrada.be\r\n\t* In the test environment everything is working except the e-mail service. Because of that it is not possible to change you password, create new user accounts, ...\r\n\r\nProduction environment: \r\n* URL API: https://api.scrada.be/v1/...  \r\n* URL web client: [https://my.scrada.be](https://my.scrada.be)\r\n\r\nPostman collection: https://www.postman.com/scrada\r\n\r\n***\r\n# Authentication\r\n## api_key\r\n\r\nAuthentication on the Scrada API is handled using API keys. The API Key and corresponding password are added to every request on the API using the following header keys:\r\n* `X-API-KEY`\r\n* `X-PASSWORD`\r\n\r\nThe API key and password are unique for each company in Scrada.\r\n\r\nTo obtain an API key go to the Scrada web client. In the menu go to 'Settings' > 'API Keys'.\r\n\r\n![API Keys](images/screenshot-ApiKeys.png)\r\n\r\nHere you can either create an API Key or see existing API keys of your company.\r\n\r\n***\r\n# Data formats\r\n\r\nThe Scrada API expects data in the following way.\r\n\r\n| Data type | Expected format | Example |\r\n| --------- | --------------- | ------- |\r\n| Number    | Use a . [dot] as decimal separator.<br/>If not specified max. 2 numbers after the decimal separator. | 3.55 |\r\n| Date      | yyyy-mm-dd      | 2022-12-31 |\r\n| Timestamp      | yyyy-MM-ddTHH:mm:ss.fffZ      | 2022-12-31T08:00:00.000Z |\r\n\r\n***\r\n# Localization\r\n\r\nThe API is, like the Scrada Mobile app and web client, multilingual. To change the response language you can set the header key `Language`, the following values can be used:\r\n\r\n| Value | Language |\r\n| ----- | -------- |\r\n| EN    | English  |\r\n| NL    | Dutch    |\r\n| FR    | French   |\r\n\r\nEnglish will be used when no language key is provided.\r\n\r\n***\r\n# Rate limiting\r\n> ⚠️ **Note:** Rate limiting is currently **not strictly enforced** in the production environment.  \r\n> A significantly higher limit is in place until **January 1, 2026**, after which the standard rate limiting rules described below will apply.\r\n\r\nTo ensure fair usage and maintain optimal performance, our API enforces rate limiting using a **token bucket algorithm**.\r\n\r\n- **Maximum Requests per Minute**: `60`\r\n- **Token Replenishment**: Every 10 seconds, your bucket is refilled with `10` tokens\r\n\r\nThis allows for short bursts of activity while maintaining a steady request rate over time. If your token bucket is empty, additional requests will be rate-limited until new tokens are added.\r\n\r\n\r\nEach API response includes the following headers to help you monitor your usage:\r\n\r\n| Header                   | Description                                                                                                             |\r\n| ------------------------ | ----------------------------------------------------------------------------------------------------------------------- |\r\n| x-ratelimit-limit        | The maximum number of requests your bucket can hold or accumulate                                                       |\r\n| x-ratelimit-remaining    | The number of requests remaining in the current window                                                                  |\r\n| x-ratelimit-reset        | A UNIX timestamp (in seconds) indicating the time when the next token replenishment will occur.                   |\r\n\r\nWe recommend implementing logic in your client to respect these headers and avoid hitting the rate limit.\r\n\r\nIf you exceed the allowed request rate, the API will respond with:\r\n\r\n- **HTTP Status Code**: `429 Too Many Requests`\r\n\r\nWhen this occurs, you should wait until the `x-ratelimit-reset` time has passed before retrying your request.\r\n\r\n\r\n***\r\n# Examples\r\n\r\n## Add daily receipt and invoice payment\r\n\r\nThis examples show how you can add a sales invoice in Scrada and add a payment to one invoice.\r\n\r\n\r\n**1. Add the invoice**\r\n\r\nAdd a sales invoice in Scrada by using the Add sales invoice API.\r\n\r\n`https://api.scrada.be/v1/company/{companyID}/salesInvoice`\r\n\r\nFore more information about this API call go to the `Invoice > Add sales invoice` section.\r\n\r\n```json\r\n{\r\n  \"bookYear\": \"2023\",\r\n  \"journal\": \"Store1\",\r\n  \"number\": \"123\",\r\n  \"creditInvoice\": false,\r\n  \"invoiceDate\": \"2023-01-01\",\r\n  \"invoiceExpiryDate\": \"2023-01-08\",\r\n  \"customer\": {\r\n    \"code\" : \"CUST01\",\r\n    \"name\": \"Customer 01\",\r\n    \"address\": {\r\n      \"street\": \"Customer street\",\r\n      \"streetNumber\": \"1\",\r\n      \"city\": \"Fropus\",\r\n      \"zipCode\": \"1000\",\r\n      \"countryCode\": \"BE\"\r\n    },\r\n    \"email\": \"info@scrada.be\",\r\n    \"vatNumber\": \"BE0793904121\"\r\n  },\r\n  \"totalInclVat\": 200.00,\r\n  \"totalVat\": 34.71,\r\n  \"totalExclVat\": 165.29,\r\n  \"payableRoundingAmount\": 0,\r\n  \"note\": \"\",\r\n  \"lines\": [\r\n    {\r\n      \"lineNumber\": \"1\",\r\n      \"itemName\": \"Demo item\",\r\n      \"quantity\": 1,\r\n      \"unitType\": 1,\r\n      \"itemExclVat\": 165.29,\r\n      \"vatType\": 1,\r\n      \"vatPercentage\": 21,\r\n      \"totalDiscountExclVat\": 0,\r\n      \"totalExclVat\": 165.29\r\n    }\r\n  ],\r\n  \"vatTotals\": [\r\n    {\r\n      \"vatType\": 1,\r\n      \"vatPercentage\": 21,\r\n      \"totalExclVat\": 165.29,\r\n      \"totalVat\": 34.71,\r\n      \"totalInclVat\": 200.00\r\n    }    \r\n  ],\r\n  \"paymentMethods\": [\r\n    {\r\n      \"paymentType\": 9,\r\n      \"paymentReference\": \"+++022/0126/70950+++\",\r\n      \"name\": \"Bancontact\",\r\n      \"totalPaid\": 0,\r\n      \"totalToPay\": 200\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis will return a GUID, for example `cac6315f-ef7a-4405-b1cf-1ccccc2cc007`. We will use this GUID in the next step to add a payment to the sales invoice.\r\n\r\n\r\n\r\n\r\n**2. Add journal lines**\r\n\r\nNow we will add €500,00 of dailyreceipts to the journal, of which €400,00 was paid by Bancontact and €100,00 cash, and add a payment of €200,00 paid by Bancontact to the invoice we created in step 1. We add the lines using the Add lines to the journal API.\r\n\r\n`https://api.scrada.be/v1/company/{companyID}/journal/{journalID}/lines`\r\n\r\n```application/json\r\n{\r\n  \"date\": \"2023-01-01\",\r\n  \"lastJournalLineID\": \"{lastJournalLineID}\", // Optional GUID from your previous add journal lines call\r\n  \"lines\": [\r\n    {\r\n      \"lineType\": 1,\r\n      \"vatTypeID\": \"8424d909-78b9-483c-9b1d-4584fb537846\",\r\n      \"vatPerc\": 21,\r\n      \"amount\": 500,\r\n      \"categoryID\": \"{categoryID}\", // 21% VAT category\r\n      \"externalReference\": \"\", // Additional reference from your system\r\n      \"externalData\": \"\" // Additional information from your system like receipts numbers and their individual amounts\r\n    }\r\n  ],\r\n  \"paymentMethods\": [\r\n    {\r\n      \"paymentMethodID\": \"{paymentMethodID}\", // Bancontact payment method ID\r\n      \"amount\": 600.00, // Total received 600.00 by Bancontact\r\n      \"remark\": \"\",\r\n      \"externalReference\": \"\", // Additional reference from your system\r\n      \"externalData\": \"\" // Additional information from your system like receipts numbers and their individual amounts\r\n    },\r\n    {\r\n      \"paymentMethodID\": \"{paymentMethodID}\", // Cash payment method ID\r\n      \"amount\": 100.00, // Received 100.00 cash\r\n      \"remark\": \"\",\r\n      \"externalReference\": \"\", // Additional reference from your system\r\n      \"externalData\": \"\" // Additional information from your system like receipts numbers and their individual amounts\r\n    },\r\n    {\r\n      \"paymentMethodID\": \"{paymentMethodID}\",  // Invoice payed payment method ID\r\n      \"amount\": -200.00, // Deduct paid invoice amount\r\n      \"remark\": \"string\",\r\n      \"invoiceID\": \"cac6315f-ef7a-4405-b1cf-1ccccc2cc007\", // GUID of the invoice created in step 1\r\n      \"invoiceReference\": \"+++022/0126/70950+++\", // Optional invoice reference, when invoiceID is provided Scrada will add a payment reference if provided on the invoice\r\n      \"externalReference\": \"\", // Additional reference from your system\r\n      \"externalData\": \"\" // Additional information from your system like receipts number and its amount\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nThis will return a GUID for the journalLInes, the last journalLines GUID can be used in your next add journal lines call `lastJournalLineID`.\r\n\r\n***\r\n# Webhooks\r\n## Topics\r\nWebhooks are organized into topics. Your app subscribes to one or more topics to receive webhooks. Once configured, your app will receive webhooks each time that type of event is triggered for that company.\r\n\r\nThe webhook topic defines the kind of event messages that your app receives. For example, your app can subscribe to the `journal/linesMissing` topic to be notified when you are behind on journal entries. The topic name identifies the nature of the event that's occurred.\r\n\r\n### journal/linesMissing\r\nThe topic `journal/linesMissing` is triggered once a day if a journal has missing lines. This is triggered at the same time that Scrada also send emails if journal lines are missing. Normally this is around 12:30.\r\nA formatted payload of this topic looks like:\r\n```application/json\r\n{\r\n  \"companyID\":\"da31b6ec-ba3e-448c-b808-f3a7f8a53859\",\r\n  \"companyCode\":\"\",\r\n  \"companyName\":\"Example company\",\r\n  \"journalID\":\"48dbd6cf-42a7-4565-be6b-f41544a56b28\",\r\n  \"journalCode\":\"003\",\r\n  \"journalName\":\"jounal4\",\r\n  \"journalDateOfLastEntry\":\"2021-01-10\"\r\n}\r\n```\r\n\r\n### peppolOutboundDocument/statusUpdate\r\nThe topic `peppolOutboundDocument/statusUpdate` is triggered when the status of an outbound Peppol document is changed. \r\nMore information about the properties of the webhook can can be found in the section `Peppol Outbound > Get outbound document status`.\r\nThe API call and the webhook return the same information.\r\n\r\nA formatted payload of a status Created:\r\n```application/json\r\n{\r\n  \"id\": \"21a076e5-ee44-47a4-a21b-a7b45682d54f\",\r\n  \"createdOn\": \"2024-12-24T12:00:06.187Z\",\r\n  \"externalReference\": \"test-invoice-scrada-1\",\r\n  \"status\": \"Created\",\r\n  \"attempt\": 0,\r\n  \"errorMessage\": \"\",\r\n  \"peppolSenderID\": \"9915:test-sender\",\r\n  \"peppolReceiverID\": \"0208:0793904121\",\r\n  \"peppolC1CountryCode\": \"BE\",\r\n  \"peppolC2Timestamp\": null,\r\n  \"peppolC2SeatID\": \"PBE000659\",\r\n  \"peppolC2MessageID\": null,\r\n  \"peppolC3Timestamp\": null,\r\n  \"peppolC3SeatID\": null,\r\n  \"peppolC3MessageID\": null,\r\n  \"peppolConversationID\": null,\r\n  \"peppolSbdhInstanceID\": null,\r\n  \"peppolDocumentTypeScheme\": \"busdox-docid-qns\",\r\n  \"peppolDocumentTypeValue\": \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1\",\r\n  \"peppolProcessScheme\": \"cenbii-procid-ubl\",\r\n  \"peppolProcessValue\": \"urn:fdc:peppol.eu:2017:poacc:billing:01:1.0\",\r\n  \"salesInvoiceID\": \"21a076e5-ee44-47a4-a21b-a7b45682d54g\"\r\n}\r\n```\r\nA formatted payload of a status Processed:\r\n```application/json\r\n{\r\n  \"id\": \"21a076e5-ee44-47a4-a21b-a7b45682d54f\",\r\n  \"createdOn\": \"2024-12-24T12:00:06.187Z\",\r\n  \"externalReference\": \"test-invoice-scrada-1\",\r\n  \"status\": \"Processed\",\r\n  \"attempt\": 1,\r\n  \"errorMessage\": \"\",\r\n  \"peppolSenderID\": \"9915:test-sender\",\r\n  \"peppolReceiverID\": \"0208:0793904121\",\r\n  \"peppolC1CountryCode\": \"BE\",\r\n  \"peppolC2Timestamp\": \"2024-12-24T12:00:23.039Z\",\r\n  \"peppolC2SeatID\": \"PBE000659\",\r\n  \"peppolC2MessageID\": \"21a076e5-ee44-47a4-a21b-a7b45682d54f@scrada\",\r\n  \"peppolC3Timestamp\": \"2024-12-24T12:00:23.743Z\",\r\n  \"peppolC3SeatID\": \"PBE000659\",\r\n  \"peppolC3MessageID\": \"3f34cb91-afc6-4a0f-8b13-90ff6c99e28a@phase4\",\r\n  \"peppolConversationID\": \"conv-21a076e5-ee44-47a4-a21b-a7b45682d54f@scrada\",\r\n  \"peppolSbdhInstanceID\": \"21a076e5-ee44-47a4-a21b-a7b45682d54f\",\r\n  \"peppolDocumentTypeScheme\": \"busdox-docid-qns\",\r\n  \"peppolDocumentTypeValue\": \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1\",\r\n  \"peppolProcessScheme\": \"cenbii-procid-ubl\",\r\n  \"peppolProcessValue\": \"urn:fdc:peppol.eu:2017:poacc:billing:01:1.0\",\r\n  \"salesInvoiceID\": \"21a076e5-ee44-47a4-a21b-a7b45682d54g\"\r\n}\r\n```\r\nA formatted payload of a status error:\r\n```application/json\r\n{\r\n  \"id\": \"b91a383b-0c96-467a-b791-ffe971b6c52d\",\r\n  \"createdOn\": \"2024-12-24T12:16:18.958Z\",\r\n  \"externalReference\": \"test-invoice-scrada-2\",\r\n  \"status\": \"Error\",\r\n  \"attempt\": 1,\r\n  \"errorMessage\": \"[error] [SAX] cvc-complex-type.2.4.a: Invalid content was found starting with element '{\\\"urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2\\\":DueDatee}'. ...\",\r\n  \"peppolSenderID\": \"9915:test-sender\",\r\n  \"peppolReceiverID\": \"0208:0793904121\",\r\n  \"peppolC1CountryCode\": \"BE\",\r\n  \"peppolC2Timestamp\": null,\r\n  \"peppolC2SeatID\": \"PBE000659\",\r\n  \"peppolC2MessageID\": \"b91a383b-0c96-467a-b791-ffe971b6c52d@scrada\",\r\n  \"peppolC3Timestamp\": null,\r\n  \"peppolC3SeatID\": null,\r\n  \"peppolC3MessageID\": null,\r\n  \"peppolConversationID\": \"conv-b91a383b-0c96-467a-b791-ffe971b6c52d@scrada\",\r\n  \"peppolSbdhInstanceID\": \"b91a383b-0c96-467a-b791-ffe971b6c52d\",\r\n  \"peppolDocumentTypeScheme\": \"busdox-docid-qns\",\r\n  \"peppolDocumentTypeValue\": \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1\",\r\n  \"peppolProcessScheme\": \"cenbii-procid-ubl\",\r\n  \"peppolProcessValue\": \"urn:fdc:peppol.eu:2017:poacc:billing:01:1.0\",\r\n  \"salesInvoiceID\": \"21a076e5-ee44-47a4-a21b-a7b45682d54g\"\r\n}\r\n```\r\n\r\n### salesInvoice/sendStatusUpdate\r\nThe topic `salesInvoice/sendStatusUpdate` is triggered when the send status to customer of a sales invoice is changed. This is only triggered if a full subscription of Scrada is active.  It is not trigged when you have a Peppol Only subscription. In case of Peppol Only subscription you have to use the topic `peppolOutboundDocument/statusUpdate`.\r\n\r\nMore information about the properties of the webhook can can be found in the section `Invoice > Get sales invoice send status`.\r\nThe API call and the webhook return the same information.\r\n\r\nA formatted payload of a status Created:\r\n```application/json\r\n{\r\n  \"id\": \"916ae8fa-2531-4cad-9c64-6218187f1db4\",\r\n  \"createdOn\": \"2025-02-20T17:14:58.755Z\",\r\n  \"externalReference\": \"DB_1|46a5e373-4337-4d68-92be-30ec6d2c7d90\",\r\n  \"peppolSenderID\": null,\r\n  \"peppolReceiverID\": null,\r\n  \"peppolC1CountryCode\": null,\r\n  \"peppolC2Timestamp\": null,\r\n  \"peppolC2SeatID\": null,\r\n  \"peppolC2MessageID\": null,\r\n  \"peppolC3MessageID\": null,\r\n  \"peppolC3Timestamp\": null,\r\n  \"peppolC3SeatID\": null,\r\n  \"peppolConversationID\": null,\r\n  \"peppolSbdhInstanceID\": null,\r\n  \"peppolDocumentTypeScheme\": null,\r\n  \"peppolDocumentTypeValue\": null,\r\n  \"peppolProcessScheme\": null,\r\n  \"peppolProcessValue\": null,\r\n  \"status\": \"Created\",\r\n  \"attempt\": 0,\r\n  \"errorMessage\": \"\",\r\n  \"peppolOutboundDocumentID\": \"851afd33-ad37-4538-9456-4297f133e724\",\r\n  \"sendMethod\": \"Peppol\",\r\n  \"receiverEmailAddress\": null,\r\n  \"receiverEmailTime\": null,\r\n  \"receiverEmailStatus\": \"Not sent\"\r\n}\r\n```\r\nA formatted payload of a status Processed and send by Peppol:\r\n```application/json\r\n{\r\n  \"id\": \"916ae8fa-2531-4cad-9c64-6218187f1db4\",\r\n  \"createdOn\": \"2025-02-20T17:14:58.755Z\",\r\n  \"externalReference\": \"DB_1|46a5e373-4337-4d68-92be-30ec6d2c7d90\",\r\n  \"peppolSenderID\": \"0208:0793904121\",\r\n  \"peppolReceiverID\": \"0208:0793904121\",\r\n  \"peppolC1CountryCode\": \"BE\",\r\n  \"peppolC2Timestamp\": \"2025-02-20T17:15:24.119Z\",\r\n  \"peppolC2SeatID\": \"PBE000659\",\r\n  \"peppolC2MessageID\": \"916ae8fa-2531-4cad-9c64-6218187f1db4@scrada\",\r\n  \"peppolC3MessageID\": \"aa3e293c-70a5-491a-a317-8e884bd6a628@phase4\",\r\n  \"peppolC3Timestamp\": \"2025-02-20T17:15:24.430Z\",\r\n  \"peppolC3SeatID\": \"PBE000659\",\r\n  \"peppolConversationID\": \"conv-916ae8fa-2531-4cad-9c64-6218187f1db4@scrada\",\r\n  \"peppolSbdhInstanceID\": \"916ae8fa-2531-4cad-9c64-6218187f1db4\",\r\n  \"peppolDocumentTypeScheme\": \"busdox-docid-qns\",\r\n  \"peppolDocumentTypeValue\": \"urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1\",\r\n  \"peppolProcessScheme\": \"cenbii-procid-ubl\",\r\n  \"peppolProcessValue\": \"urn:fdc:peppol.eu:2017:poacc:billing:01:1.0\",\r\n  \"status\": \"Processed\",\r\n  \"attempt\": 1,\r\n  \"errorMessage\": \"\",\r\n  \"peppolOutboundDocumentID\": \"851afd33-ad37-4538-9456-4297f133e724\",\r\n  \"sendMethod\": \"Peppol\",\r\n  \"receiverEmailAddress\": null,\r\n  \"receiverEmailTime\": null,\r\n  \"receiverEmailStatus\": \"Not sent\"\r\n}\r\n```\r\nA formatted payload of a status Processed and send by email:\r\n```application/json\r\n{\r\n  \"id\": \"916ae8fa-2531-4cad-9c64-6218187f1db4\",\r\n  \"createdOn\": \"2025-02-20T17:09:25.509Z\",\r\n  \"externalReference\": \"DB_1|46a5e373-4337-4d68-92be-30ec6d2c7d90\",\r\n  \"peppolSenderID\": \"0208:0793904121\",\r\n  \"peppolReceiverID\": \"0208:0793904121\",\r\n  \"peppolC1CountryCode\": \"BE\",\r\n  \"peppolC2Timestamp\": null,\r\n  \"peppolC2SeatID\": null,\r\n  \"peppolC2MessageID\": \"916ae8fa-2531-4cad-9c64-6218187f1db4@scrada\",\r\n  \"peppolC3MessageID\": null,\r\n  \"peppolC3Timestamp\": null,\r\n  \"peppolC3SeatID\": null,\r\n  \"peppolConversationID\": \"conv-916ae8fa-2531-4cad-9c64-6218187f1db4@scrada\",\r\n  \"peppolSbdhInstanceID\": \"916ae8fa-2531-4cad-9c64-6218187f1db4\",\r\n  \"peppolDocumentTypeScheme\": null,\r\n  \"peppolDocumentTypeValue\": null,\r\n  \"peppolProcessScheme\": null,\r\n  \"peppolProcessValue\": null,\r\n  \"status\": \"Processed\",\r\n  \"attempt\": 1,\r\n  \"errorMessage\": \"\",\r\n  \"peppolOutboundDocumentID\": null,\r\n  \"sendMethod\": \"Email\",\r\n  \"receiverEmailAddress\": \"info@scrada.be\",\r\n  \"receiverEmailTime\": \"2025-02-20T17:09:30.509Z\",\r\n  \"receiverEmailStatus\": \"Successfully sent\"\r\n}\r\n```\r\n\r\n### peppolInboundDocument/new\r\nThe topic `peppolInboundDocument/new` is triggered when a new document arrives by Peppol in Scrada and you have a Peppol Ony Subscription. In case of a full subscription you have to use the topic `purchaseInvoice/new`.\r\n\r\nThis webhook has some extra headers:\r\n| Header                  | Description                                                                                                             |\r\n| ----------------------- | ----------------------------------------------------------------------------------------------------------------------- |\r\n| x-scrada-peppol-process-scheme    | Document Process Scheme. Sample: cenbii-procid-ubl                                                                           |\r\n| x-scrada-peppol-process-value          | Document Process Value. Sample: urn:fdc:peppol.eu:2017:poacc:billing:01:1.0                                             |                  |\r\n| x-scrada-peppol-document-type-scheme   | Document Type Scheme. Sample: busdox-docid-qns|\r\n| x-scrada-peppol-document-type-value   | Document Type Value. Sample: urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1                                                                                       |\r\n| x-scrada-peppol-sbdh-instance-identifier   | SBDH Instance ID. Is only needed if sending invoice responses. Sample: bc2c2348-b932-430c-ab29-4139c08f7a20|\r\n| x-scrada-peppol-conversation-id   | Conversation ID. Sample: conv-bc2c2348-b932-430c-ab29-4139c08f7a20@scrada|\r\n| x-scrada-peppol-c3-timestamp   | The time the message arrived at Scrada. Sample:\t2024-12-23T16:56:31.290Z|\r\n| x-scrada-peppol-c3-message-id   | The ID assigned to the received message by Scrada and send back to the other access point. Sample: 2879a6d1-c1cf-48e2-9cbb-890acdeb83c2@otherAccessPoint|\r\n| x-scrada-peppol-c3-incoming-unique-id   | The internal ID assigned to the message by Scrada. Sample: f6732cec-c25a-4c3f-ad3f-2c7694b41123|\r\n| x-scrada-peppol-c2-message-id   | The ID assigned to the other access point to the message send to Scrada. Sample: bc2c2348-b932-430c-ab29-4139c08f7a20@scrada|\r\n| x-scrada-peppol-c2-seat-id   | The seat ID of the other access point. Every access point has an unique seat ID. Sample: PBE000659|\r\n| x-scrada-peppol-c2-timestamp   | The time the message was send by the other access to Scrada. Sample: 2024-12-23T16:56:31.112Z|\r\n| x-scrada-peppol-c1-country-code   | The country code of the sender. Sample: BE|\r\n| x-scrada-peppol-receiver-scheme   | The scheme of the receiving Peppol ID used. This is always: iso6523-actorid-upis|\r\n| x-scrada-peppol-receiver-id   | The Peppol ID of the receiving party. Sample: 0208:0793904121|\r\n| x-scrada-peppol-sender-scheme   | The scheme of the sender Peppol ID used. This is always: iso6523-actorid-upis|\r\n| x-scrada-peppol-sender-id   | The Peppol ID of the sending party. Sample: 9915:test-sender|\r\n| x-scrada-document-internal-number   | The internal number assigned to this document. The first document arrived is 1, ...|\r\n| x-scrada-document-id   | The ID assigned to the document in the Scrada system. This ID is needed later if you want to get the document again. Sample: ea951819-f902-4504-8791-af2c1fe46ef3|\r\n| content-type | The content type of the payload in the body. Sample: application/xml; charset=utf-8|\r\n\r\nThe content of the payload is the received document from Peppol. This depends of the document type. If registred on certain document type then these document types can be received.\r\n\r\n### purchaseInvoice/new\r\nThe topic `purchaseInvoice/new` is triggered when a new purchase invoice arrives in Scrada. This is only triggered if a full subscription of Scrada is active. It is not trigged when you have a Peppol Only subscription. In case of Peppol Only subscription you have to use the topic `peppolInboundDocument/new`.\r\nThis can also be triggered if a new purchase invoice arrives in Scrada from an other channel then Peppol.\r\n\r\nThis webhook has some extra headers:\r\n| Header                  | Description                                                                                                             |\r\n| ----------------------- | ----------------------------------------------------------------------------------------------------------------------- |\r\n| x-scrada-invoice-id    | The purchase invoice ID in Scrada. Sample: b9cdf00b-49a1-45b7-9336-6a28c3101e78 |\r\n| x-scrada-invoice-number | The purchase invoice number assigned by the supplier. Sample: 24A1554  |\r\n| x-scrada-invoice-internal-number | The internal number assigned to this purchase invoice. The first document arrived is 1, ... |\r\n| x-scrada-invoice-date | The date of the purchase invoice in the format YYYY-MM-DD. Sample: 2024-12-20 |\r\n| x-scrada-invoice-expiry-date | The expiry date of the purchase invoice. If the purchase invoice has no expiry date then this header is missing. Sample: 2024-12-20 |\r\n| x-scrada-supplier-party-name   | The name of the supplier. Sample: Scrada BV |\r\n| x-scrada-customer-party-name   | The name of the customer. Sample: Scrada BV  |\r\n| x-scrada-total-incl-vat   | Total value of the purchase invoice inclusive VAT. Decimal separator is a dot. Sample 121.01 |\r\n| x-scrada-total-excl-vat  | Total value of the purcahse invoice exclusive VAT. Decimal separator is a dot. Sample 100.01 |\r\n| x-scrada-total-vat  | Total VAT of the purcahse invoice. Decimal separator is a dot. Sample 21.00 |\r\n| x-scrada-credit-invoice   | Indication if the purchase invoice is an invoice or a creditnote. If creditnote then the value is 'true' else the value is 'false' |\r\n| content-type | The content type of the payload in the body. Usually it is XML but it can also be PDF. Sample: application/xml; charset=utf-8|\r\n\r\nIf the purchase invoice arrived by Peppol then also the headers of `peppolInboundDocument/new` are available in this topic.\r\n\r\nThe content of the payload depends from the channel that was used to deliver the purchase invoice to Scrada. If it is Peppol then most of the times this is an XML document. But it can also be a PDF if a PDF was uploaded manually by the user.\r\n\r\n## Add webhooks\r\nA webhook subscription declares the app’s intention to receive webhooks for a topic. A subscription is defined by:\r\n- The topic name\r\n- The subscription endpoint: The endpoint is the destination that Scrada sends the webhooks to. This can be either HTTP or HTTPS.\r\n\r\nA webhook can be configured on company or on partner company level using the Scrada web client. In the menu go to 'Settings' > 'Integrations', click on the 'Activate'/'Edit' button in the 'Webhook' tile.\r\nIf configured on partner company then this subscription will be active for all companies linked to this partner company.\r\n\r\n## Headers\r\nEach webhook is made up of headers and a payload. Headers contain metadata about the webhook.\r\n\r\n| Header                  | Description                                                                                                             |\r\n| ----------------------- | ----------------------------------------------------------------------------------------------------------------------- |\r\n| x-scrada-topic          | The name of the topic. (Example: journal/linesMissing)                                                                  |\r\n| x-scrada-hmac-sha256    | HMAC SHA256 verification hash of the payload.                                                                           |\r\n| x-scrada-api-version    | The version of the Scrada API.                                                                                          |\r\n| x-scrada-company-id     | ID of the company where the webhook is configured on (can be company ID of the partner company or company ID itself)    |\r\n| x-scrada-event-id       | Unique ID of the webhook event.                                                                                         |\r\n| x-scrada-triggered-at   | Identifying the date and time when Scrada triggered the webhook. This is in UTC time.                                   |\r\n| x-scrada-attempt        | Attempt number of calling this webhook by Scrada. The first call is 1.                                                  |\r\n\r\n\r\n## Verification\r\nHMAC stands for Hash-based Message Authentication Code (HMAC) that can be used to determine whether a message sent over an insecure channel has been tampered with, provided that the sender and receiver share a secret key. \r\nThe sender computes the hash value for the original data and sends both the original data and the HMAC as a single message. The receiver recomputes the hash value on the received message and checks that the computed hash value matches the transmitted hash value.\r\n\r\nThe secret key used to calculate the HMAC can be found in Scrada using the Scrada web client. In the menu go to 'Settings' > 'Company' and click on the eye icon next to 'Secret key'. If you ever need to generate a new secret key this can be done by clicking on the generate icon next to the eye icon.\r\n> If no secret key is present on the company the `x-scrada-hmac-sha256` will be empty. Generate a new secret as described above.\r\n\r\nScrada uses the algorithm SHA-256.\r\n\r\nHere are a few links to popular languages with HMAC capabilities:\r\n- [NodeJS](https://nodejs.org/api/crypto.html)\r\n- [Python](https://docs.python.org/3/library/hmac.html)\r\n- [PHP](https://www.php.net/manual/en/function.hash-hmac.php)\r\n- [.NET C#](https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.hmac?view=net-9.0)\r\n\r\nSample calculation HMAC by Scrada:\r\n- Input:\r\n    - Payload: \r\n```application/json\r\n{\"companyID\":\"da31b6ec-ba3e-448c-b808-f3a7f8a53859\",\"companyCode\":\"\",\"companyName\":\"Example company\",\"journalID\":\"48dbd6cf-42a7-4565-be6b-f41544a56b28\",\"journalCode\":\"003\",\"journalName\":\"jounal4\",\"journalDateOfLastEntry\":\"2021-01-10\"}\r\n```\r\n    - Secret key: `s4%^>>s8Ov$fB+szc3H&(_N@NVmOiy6&` \r\n    - Algorithm: SHA-256\r\n- Output: `8e60bd58050f2b7846f6b9df1a3ee523b88dfb7805ef6d30f5a8162a9132c66d`\r\n- Online tool to calculate a HMAC is https://www.freeformatter.com/hmac-generator.html.\r\n\r\n## Ordering event data\r\nAs with other webhook systems, Scrada doesn't guarantee ordering within a topic, or across different topics for the same resource. For example, it's possible that a `salesinvoice/update` webhook might be delivered before a `salesinvoice/create` webhook.\r\nScrada recommends using timestamps provided in the header `x-scrada-triggered-at` to organize webhooks.\r\n\r\n## Responses and retries\r\nA http status success response `200` till `299` is considered successful. \r\nIf your webhook didn't respond with a `200` till `299` http status code, then the delivery failed. If the delivery fails, then it's retried up to 10 times.\r\n\r\n## Logging\r\nAll webhooks executed with their status can be found in the Scrada web client. In the menu go to 'Settings' > 'Integrations', click on the 'History' button in the 'Webhook' tile.\r\nA webhook that is retrying can be cancelled using the Scrada web client.\r\n\r\n## Handling duplicate webhooks\r\nIn rare instances, your app may receive the same webhook event more than once. Scrada recommends detecting duplicate webhook events by comparing the `x-scrada-event-id` header to previous events `x-scrada-event-id` header.\r\n\r\n```http\r\nx-scrada-topic: journal/linesMissing\r\nx-scrada-hmac-sha256: 9c57b3a7e877c7d0f1116c6c4a399354a380b9a461ff1a8c07c9855464757b04\r\nx-scrada-api-version: 1.0\r\nx-scrada-company-id: da31b6ec-ba3e-448c-b808-f3a7f8a53859\r\nx-scrada-event-id: 116445c1-f6f7-4fa1-809b-c69d91724713\r\nx-scrada-triggered-at: 2024-10-10T19:10:35.815Z\r\nx-scrada-attempt: 1\r\n```\r\n\r\n## Testing webhooks\r\nThe website https://webhook.site/ can be used to see the headers and body of a webhook that is called by Scrada. Add the unique URL that is generated by https://webhook.site/ to the webhooks configuration in Scrada and see the webhooks called by Scrada.",
    "contact": {
      "email": "info@scrada.be"
    },
    "version": "1.20",
    "x-logo": {
      "url": "images/logo.png",
      "altText": "Scrada"
    }
  },
  "servers": [
    {
      "url": "https://api.scrada.be/",
      "description": "Production"
    },
    {
      "url": "https://apitest.scrada.be/",
      "description": "Test environment"
    }
  ],
  "paths": {
    "/v1/company/{companyID}/cashBook/{cashBookID}/lines": {
      "put": {
        "tags": [
          "Add line"
        ],
        "summary": "Add lines to the cash book",
        "description": "Add new transaction lines to a cash book.<br/>\r\nTo obtain the current (/start) balance get the current cash book object  (Get cash book function) and use the 'currentBalance' field.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cashBookID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookAddLinesModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookAddLinesModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookAddLinesModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added line GUID ID's.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/journal/{journalID}/lines": {
      "put": {
        "tags": [
          "Add line"
        ],
        "summary": "Add lines to the journal",
        "description": "Add new transaction lines to a daily receipts book.<br/>\r\nTo obtain the last journal line ID get the current journal object (Get journal function) and use the 'lastLineID' field.<br/>\r\nThe rules that are defined on VAT category or Payment method are also applied when using the API. This means that if configured that a payment method/VAT category must be positive that also the values in the API must be positive. If configured that it must be positive but the value is negative then there will be an error.<br/>\r\nIt is not always required to have payment methods. More information can be found on the 'PaymentMethods' property.<br/><br/>\r\n<u>Remark:</u> In case of a correction all lines must be of type Correction and also the remark of all lines must be the same.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.AddJournalLinesPaymethodsModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.AddJournalLinesPaymethodsModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.AddJournalLinesPaymethodsModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added line information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.AddJournalLinesReturn"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/cashBook": {
      "get": {
        "tags": [
          "Cash book"
        ],
        "summary": "Get all cash books",
        "description": "Get all cash books belonging to this company.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Cash books.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/v1.CashBook"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cash book"
        ],
        "summary": "Create cash book",
        "description": "Add a new cash book.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added cash book ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/cashBook/{cashBookID}": {
      "get": {
        "tags": [
          "Cash book"
        ],
        "summary": "Get cash book",
        "description": "Get the specified cash book.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cashBookID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Cash book.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.CashBook"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Cash book"
        ],
        "summary": "Update cash book",
        "description": "Update an existing cash book. <br/>If a property of the cash book is set null or a property is missing then the system assumes that this property must keep its original value. Only in case of property endDate, if this property is missing or has has value null, the system assumes that it has value null.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cashBookID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBook"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBook"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Cash book successfully updated."
          }
        }
      }
    },
    "/v1/company/{companyID}/cashBook/{cashBookID}/transactionType": {
      "get": {
        "tags": [
          "Transaction type"
        ],
        "summary": "Get all transaction types",
        "description": "Get all transaction types belonging to this cash book.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cashBookID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Transaction types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/v1.CashBookTransactionType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transaction type"
        ],
        "summary": "Create transaction type",
        "description": "Add a new cash book transaction type. New transaction types must have line type `14` (Own / custom).",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cashBookID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookTransactionType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookTransactionType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookTransactionType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added transaction type ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/cashBook/{cashBookID}/transactionType/{transactionTypeID}": {
      "get": {
        "tags": [
          "Transaction type"
        ],
        "summary": "Get transaction type",
        "description": "Get the specified cash book transaction type.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cashBookID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "transactionTypeID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Transaction type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.CashBookTransactionType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Transaction type"
        ],
        "summary": "Update transaction type",
        "description": "Update an existing cash book transaction type.<br/>If a property of the transaction type is set null or a property is missing then the system assumes that this property must keep its original value.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cashBookID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "transactionTypeID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookTransactionType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookTransactionType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CashBookTransactionType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Transaction type successfully updated."
          }
        }
      }
    },
    "/v1/company/{companyID}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get company",
        "description": "Get the specified company.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Company.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.Company"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Update company",
        "description": "Update an existing company.<br/>If a property of the company is set null or a property is missing then the system assumes that this property must keep its original value.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Company"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Company"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Company"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Company successfully updated."
          }
        }
      }
    },
    "/v1/company/{companyID}/salesInvoice": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Add sales invoice",
        "description": "Add a new sales invoice. The combination `bookYear`, `journal` and `number` must be unique. <b>This cannot be used if you have a Peppol Only subscription. You have to use `Peppol outbound`>`Send sales invoice` instead.</b><br/>\r\nIf a property is set null or a property is missing then we assume that this property must keep its original value.<br/>\r\nThe sum of `lines`.`totalExclVat` must be the same as the sum `vatTotals`.`totalExclVat` and must be the same as `totalExclVat` on header.<br/>\r\nThe VAT is calculated by Scrada by doing a sum of all the `lines`.`totalExclVat` by VAT percentage and calculating the VAT on it. This may have a max of 2% difference with the VAT set in `vatTotals`.`totalVat`.\",\r\n\r\n<u>Peppol / UBL:</u> There are different codes used to identify a company in the UBL or on the Peppol network. Scrada will determine the company identifier in following order. The first identifier that is set is used.\r\n<ol>\r\n    <li>`customer`.`peppolID`</li>\r\n    <li>`customer`.`glnNumber`</li>\r\n    <li>`customer`.`taxNumber`</li>\r\n    <li>`customer`.`vatNumber`</li>\r\n    <li>`customer`.`accountingCode` (If this is the identifier then this invoice cannot be send over Peppol)</li>\r\n    <li>`customer`.`email` (If this is the identifier then this invoice cannot be send over Peppol)</li>\r\n</ol>",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.SalesInvoice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.SalesInvoice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.SalesInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/salesInvoice/{salesInvoiceID}/ubl": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get sales invoice UBL document",
        "description": "Gets the UBL document of a specific sales invoice.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "salesInvoiceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "The UBL document of the sales invoice"
          },
          "404": {
            "description": "Sales invoice not found or no UBL available."
          }
        }
      }
    },
    "/v1/company/{companyID}/salesInvoice/{salesInvoiceID}/sendStatus": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get sales invoice send status",
        "description": "Gets the send status to customer of a specific sales invoice.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "salesInvoiceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "The send status to customer of the requested sales invoice",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.SalesInvoiceSendStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/invoice": {
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Add invoice",
        "description": "<b>This method is obsolete. Please use the `Add sales invoice` endpoint.</b>\r\n<br/>Add a new sales/purchase invoice.<br/>\r\nFor a sales invoice the party references to the customer.<br/>\r\nFor a purchase invoice the party references the supplier.<br/><br/>\r\n<u>Peppol / UBL:</u> There are different codes used to identify a company in the UBL or on the Peppol network. Scrada will use the following information as company identifier.\r\n<ol>\r\n    <li>`PartyTaxNumber` (Can be used to send invoice over the Peppol network)</li>\r\n    <li>`PartyVatNumber` (Can be used to send invoice over the Peppol network)</li>\r\n    <li>`PartyGlnNumber` (Can be used to send invoice over the Peppol network)</li>\r\n    <li>`partyAccountingCode`</li>\r\n    <li>`partyEmail`</li>\r\n</ol>",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.InvoiceWithDocument"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.InvoiceWithDocument"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.InvoiceWithDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added invoice ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/company/{companyID}/invoice/{invoiceID}": {
      "put": {
        "tags": [
          "Invoice"
        ],
        "summary": "Update invoice",
        "description": "Update an existing invoice.<br/>If a property of the invoice is set null or a property is missing then the system assumes that this property must keep its original value.<br/>If sending also a document of the invoice then this must always be send for every update. If document is not send then it is removed from the invoice.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoiceID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.InvoiceWithDocument"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.InvoiceWithDocument"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.InvoiceWithDocument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Invoice successfully updated."
          }
        },
        "deprecated": true
      }
    },
    "/v1/company/{companyID}/vatPeriod": {
      "get": {
        "tags": [
          "VAT period"
        ],
        "summary": "Get all VAT periods",
        "description": "Get all VAT periods belonging to this company.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "VAT Periods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/v1.CompanyVatPeriod"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "VAT period"
        ],
        "summary": "Create VAT period",
        "description": "Add a new journal VAT period.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CompanyVatPeriod"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CompanyVatPeriod"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CompanyVatPeriod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added VAT period ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/vatPeriod/{vatPeriodID}": {
      "get": {
        "tags": [
          "VAT period"
        ],
        "summary": "Get VAT period",
        "description": "Get the specified company VAT period.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vatPeriodID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "VAT period.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.CompanyVatPeriod"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "VAT period"
        ],
        "summary": "Update VAT period",
        "description": "Update an existing company VAT period.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vatPeriodID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CompanyVatPeriodType"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CompanyVatPeriodType"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.CompanyVatPeriodType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Vat period successfully updated."
          }
        }
      }
    },
    "/v1/company/{companyID}/journal": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "Get all journals",
        "description": "Get all journals belonging to this company.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Journals.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/v1.Journal"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Journal"
        ],
        "summary": "Create journal",
        "description": "Add a new journal.<br/>\r\nThe new journal will get a default VAT category after creation. This VAT category can be changed, as long as it remains unused, with the 'Update VAT category' API.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Journal"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Journal"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Journal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added journal ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/journal/{journalID}": {
      "get": {
        "tags": [
          "Journal"
        ],
        "summary": "Get journal",
        "description": "Get the specified journal.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Journal.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.Journal"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Journal"
        ],
        "summary": "Update journal",
        "description": "Update an existing journal.<br/>If a property of the journal is set null or a property is missing then the system assumes that this property must keep its original value. Only in case of property endDate, if this property is missing or has has value null, the system assumes that it has value null.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Journal"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Journal"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.Journal"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Journal successfully updated."
          }
        }
      }
    },
    "/v1/company/{companyID}/journal/{journalID}/link": {
      "put": {
        "tags": [
          "Journal",
          "Cash book"
        ],
        "summary": "Link journal to cash book",
        "description": "Link an existing journal to an existing cash book. To remove an existing link between a journal and cashbook set the cash book ID to `NULL`.<br/>\r\n*When experiencing unsupported media type errors with the cash book ID (body) `NULL` add a 'Content-Type' header with value `application/json`.*",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The cash book ID or `NULL` to remove the link.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            "text/json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            "application/*+json": {
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Journal successfully linked to cash book."
          }
        }
      }
    },
    "/v1/company/{companyID}/journal/{journalID}/paymentMethod": {
      "get": {
        "tags": [
          "Payment method"
        ],
        "summary": "Get all payment methods",
        "description": "Get all payment methods belonging to this journal.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Payment methods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/v1.JournalPaymentMethod"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payment method"
        ],
        "summary": "Create payment method",
        "description": "Add a new journal payment method.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalPaymentMethod"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalPaymentMethod"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalPaymentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added payment method ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/journal/{journalID}/paymentMethod/{paymentMethodID}": {
      "get": {
        "tags": [
          "Payment method"
        ],
        "summary": "Get payment method",
        "description": "Get the specified journal payment method.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "paymentMethodID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Payment method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.JournalPaymentMethod"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Payment method"
        ],
        "summary": "Update payment method",
        "description": "Update an existing journal payment method.<br/>If a property of the journal payment method is set null or a property is missing then the system assumes that this property must keep its original value.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "paymentMethodID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalPaymentMethod"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalPaymentMethod"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalPaymentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Payment method successfully updated."
          }
        }
      }
    },
    "/v1/company/{companyID}/journal/{journalID}/vatCategory": {
      "get": {
        "tags": [
          "VAT category"
        ],
        "summary": "Get all VAT categories",
        "description": "Get all VAT categories belonging to this journal.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "VAT Categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/v1.JournalVatCategory"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "VAT category"
        ],
        "summary": "Create VAT category",
        "description": "Add a new journal VAT category.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalVatCategory"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalVatCategory"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalVatCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added VAT category ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/journal/{journalID}/vatCategory/{vatCategoryID}": {
      "get": {
        "tags": [
          "VAT category"
        ],
        "summary": "Get VAT category",
        "description": "Get the specified journal VAT category.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vatCategoryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "VAT category.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.JournalVatCategory"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "VAT category"
        ],
        "summary": "Update VAT category",
        "description": "Update an existing journal VAT category.<br/>If a property of the journal VAT category is set null or a property is missing then the system assumes that this property must keep its original value.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "journalID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vatCategoryID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalVatCategory"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalVatCategory"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.JournalVatCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "VAT category successfully updated."
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/lookup/{scheme}/{id}": {
      "get": {
        "tags": [
          "Peppol"
        ],
        "summary": "Participant lookup",
        "description": "Search for a participant on the Peppol network. <i>The `businessEntity` can be NULL if this information is not published on the Peppol network.</i>",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "scheme",
            "in": "path",
            "description": "The scheme. Sample: iso6523-actorid-upis",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id exists of 2 parts separated by a colon. The first part is the type (Participant Identifier Scheme at https://docs.peppol.eu/edelivery/codelists/) and the second part is the value. Sample: 0208:0793904121",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Peppol party information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.PeppolParticipant"
                }
              }
            }
          },
          "404": {
            "description": "Participant not found on Peppol."
          },
          "503": {
            "description": "Participant access point unavailable."
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/lookup": {
      "post": {
        "tags": [
          "Peppol"
        ],
        "summary": "Party lookup (JSON)",
        "description": "Search for a participant on the Peppol network with a invoice customer or supplier object. This will check if Scrada is able to send a document to the given party.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.SalesInvoiceCustomer"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.SalesInvoiceCustomer"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.SalesInvoiceCustomer"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Peppol party information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.PeppolSupportedParticipant"
                }
              }
            }
          },
          "503": {
            "description": "Participant access point unavailable."
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/register": {
      "post": {
        "tags": [
          "Peppol inbound"
        ],
        "summary": "Register company",
        "description": "Register a company on the Peppol network to receive documents. <b>Only possible to call this function if you have a Peppol Only subscription.</b>",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolParticipantRegistration"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolParticipantRegistration"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolParticipantRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Company successfully registered on Peppol. The GUID of the registered company is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/deregister/{participantIdentifierScheme}/{participantIdentifierValue}": {
      "delete": {
        "tags": [
          "Peppol inbound"
        ],
        "summary": "Deregister company",
        "description": "Deregister a company on the Peppol network to receive documents. <b>Only possible to call this function if you have a Peppol Only subscription.</b>",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "participantIdentifierScheme",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "participantIdentifierValue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Company successfully deregistered from Peppol.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/inbound/document/unconfirmed": {
      "get": {
        "tags": [
          "Peppol inbound"
        ],
        "summary": "Get unconfirmed inbound documents",
        "description": "Get all unconfirmed documents received from Peppol. To confirm a document use the `Confirm inbound document` endpoint.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Inbound documents.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionResult`1[v1.PeppolInboundDocument]"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/inbound/document/{documentID}": {
      "get": {
        "tags": [
          "Peppol inbound"
        ],
        "summary": "Get inbound document",
        "description": "Get the inbound Peppol document. The HTTP headers will contain the following information.\r\n<table>\r\n  <tr>\r\n    <th>Header</th>\r\n    <th>Description</th>\r\n    <th>Example</th>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-document-id</td>\r\n    <td>Scrada document ID</td>\r\n    <td>497f6eca-6276-4993-bfeb-53cbbbba6f08</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-internal-number</td>\r\n    <td>Scrada internal document number</td>\r\n    <td>1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-sender-scheme</td>\r\n    <td>Sender party scheme</td>\r\n    <td>iso6523-actorid-upis</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-sender-id</td>\r\n    <td>Sender party ID</td>\r\n    <td>0208:0000000097</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-receiver-scheme</td>\r\n    <td>Receiver party scheme</td>\r\n    <td>iso6523-actorid-upis</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-receiver-id</td>\r\n    <td>Receiver party ID</td>\r\n    <td>0208:0000000097</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-c1-country-code</td>\r\n    <td>The country code where the sender party is legally present</td>\r\n    <td>BE</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-c2-timestamp</td>\r\n    <td>The timestamp when the document was send</td>\r\n    <td>2022-12-31T08:00:00.000Z</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-c2-seat-id</td>\r\n    <td>The Peppol seat ID of the sending access point</td>\r\n    <td>PBE000001</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-c2-message-id</td>\r\n    <td>The message ID of the sending access point</td>\r\n    <td>497f6eca-6276-4993-bfeb-53cbbbba6f08@scrada</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-c3-incoming-unique-id</td>\r\n    <td>The incoming unique message ID at the receiving access point</td>\r\n    <td>497f6eca-6276-4993-bfeb-53cbbbba6f08</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-c3-message-id</td>\r\n    <td>The message ID of the receiving access point</td>\r\n    <td>497f6eca-6276-4993-bfeb-53cbbbba6f08@scrada</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-conversation-id</td>\r\n    <td>The conversation ID</td>\r\n    <td>497f6eca-6276-4993-bfeb-53cbbbba6f08</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-sbdh-instance-identifier</td>\r\n    <td>The SBDH instance ID</td>\r\n    <td>497f6eca-6276-4993-bfeb-53cbbbba6f08</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-document-type-scheme</td>\r\n    <td>The document type scheme used</td>\r\n    <td>busdox-docid-qns</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-document-type-value</td>\r\n    <td>The document type used</td>\r\n    <td>urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-process-scheme</td>\r\n    <td>The process scheme used</td>\r\n    <td>cenbii-procid-ubl</td>\r\n  </tr>\r\n  <tr>\r\n    <td>x-scrada-peppol-process-value</td>\r\n    <td>The process used</td>\r\n    <td>urn:fdc:peppol.eu:2017:poacc:billing:01:1.0</td>\r\n  </tr>\r\n</table>",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "inbound document.",
            "content": {
              "application/xml": { }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/inbound/document/{documentID}/pdf": {
      "get": {
        "tags": [
          "Peppol inbound"
        ],
        "summary": "Get PDF of inbound document",
        "description": "Returns a PDF version of the inbound document.<br />\r\nIn case of a purchase invoice, a formatted invoice PDF is generated.<br />\r\nOtherwise, the raw UBL/XML document is converted into a simple PDF representation.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Generated PDF document",
            "content": {
              "application/pdf": { }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/inbound/document/{documentID}/confirm": {
      "put": {
        "tags": [
          "Peppol inbound"
        ],
        "summary": "Confirm inbound document",
        "description": "Confirm the successful reception of an inbound document. This allows you to retrieve the following new inbound document with the `Get unconfirmed inbound documents` endpoint.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Document confirmed."
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/outbound/document": {
      "post": {
        "tags": [
          "Peppol outbound"
        ],
        "summary": "Send document",
        "description": "Sends a document over the Peppol network. <b>Only possible to call this function if you have a Peppol Only subscription.</b><br/>\r\nOnly XML documents can be send over Peppol using this API. Send the document with content type `application/xml` or `text/xml`. Default charset that is used is utf-8.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-sender-scheme",
            "in": "header",
            "description": "The sender party scheme. Example: iso6523-actorid-upis",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-sender-id",
            "in": "header",
            "description": "The sender party ID. Example: 0208:0000000097",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-receiver-scheme",
            "in": "header",
            "description": "The receiver party scheme. Example: iso6523-actorid-upis",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-receiver-id",
            "in": "header",
            "description": "The receiver party ID. Example: 0208:0000000097",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-c1-country-code",
            "in": "header",
            "description": "The country code where the sender party is legally present. Example: BE",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-document-type-scheme",
            "in": "header",
            "description": "The document type scheme used. Example: busdox-docid-qns",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-document-type-value",
            "in": "header",
            "description": "The document type used. Example: urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-process-scheme",
            "in": "header",
            "description": "The process scheme used. Example: cenbii-procid-ubl",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-peppol-process-value",
            "in": "header",
            "description": "The process used. Example: urn:fdc:peppol.eu:2017:poacc:billing:01:1.0",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-scrada-external-reference",
            "in": "header",
            "description": "The reference you give to the document. This header is not required. This is not used for Peppol but is used in the portal of Scrada and in the webhooks. Example: V1/202400512",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added document ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type. The content (or content-type header) is not of the type XML."
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/outbound/salesInvoice": {
      "post": {
        "tags": [
          "Peppol outbound"
        ],
        "summary": "Send sales invoice",
        "description": "Sends a sales invoice in JSON format to Scrada that will be converted by Scrada to a Peppol document and send over the Peppol network.  <b>Only possible to call this function if you have a Peppol Only subscription.</b><br/>\r\nIf a property is set null or a property is missing then we assume that this property must keep its original value.<br/>\r\n\r\n<b>VAT inclusive or exclusive</b><br/>\r\nIt is possible to enter the item pricing including or excluding VAT to reduce issues with VAT rounding.<br/>\r\n<ul>\r\n    <li>Excluding VAT (Default)\r\n        <ul>\r\n            <li>Set `isInclVat` to false or omit from the JSON</li>\r\n            <li>Enter the `lines`.`itemExclVat`</li>\r\n            <li>Enter the `lines`.`totalExclVat`</li>\r\n            <li>When applicable enter the `lines`.`totalDiscountExclVat`</li>\r\n            <li>Omit any ...InclVat value in `lines`</li>\r\n        </ul>\r\n    </li>\r\n    <liIncluding VAT\r\n        <ul>\r\n            <li>Set `isInclVat` to true</li>\r\n            <li>Enter the `lines`.`itemInclVat`</li>\r\n            <li>Enter the `lines`.`totalInclVat`</li>\r\n            <li>When applicable enter the `lines`.`totalDiscountInclVat`</li>\r\n            <li>Omit any ...ExclVat value in `lines`</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<b>Validation rules</b>\r\n<ul>\r\n    <li>The sum of all `lines.totalExclVat` must exactly match:\r\n        <ul>\r\n            <li>the sum of all `vatTotals`.`totalExclVat`</li>\r\n            <li>the invoice `totalExclVat`</li>\r\n        </ul>\r\n    </li>\r\n    <li>VAT amounts in `vatTotals`.`totalVat` may only have a minimal deviation from calculated VAT based on line totals.</li>\r\n    <li>`totalInclVat` must equal `totalExclVat` + `totalVat`</li>\r\n</ul>\r\n\r\n<b>Receiver identifier resolution</b><br/>\r\nThe receiver Peppol ID is resolved by Scrada based on the following fields (in order of priority). The first available value will be used:\r\n<ol>\r\n    <li>`customer`.`peppolID`</li>\r\n    <li>`customer`.`glnNumber`</li>\r\n    <li>`customer`.`taxNumber`</li>\r\n    <li>`customer`.`vatNumber`</li>\r\n</ol>\r\n",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolOnlyInvoice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolOnlyInvoice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolOnlyInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added document ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/outbound/selfBillingInvoice": {
      "post": {
        "tags": [
          "Peppol outbound"
        ],
        "summary": "Send self-billing invoice",
        "description": "Sends a self-billing invoice or credit note in JSON format to Scrada that will be converted by Scrada to a Peppol document and send over the Peppol network. <b>Only possible to call this function if you have a Peppol Only subscription.</b><br/>\r\nThis endpoint supports <b>self-billing</b>, which means that you (the buyer) issue an invoice or credit note on behalf of your supplier. The supplier will receive this document via Peppol and book it as a sales invoice or credit note.<br/>\r\n\r\n<b>VAT inclusive or exclusive</b><br/>\r\nIt is possible to enter the item pricing including or excluding VAT to reduce issues with VAT rounding.<br/>\r\n<ul>\r\n    <li>Excluding VAT (Default)\r\n        <ul>\r\n            <li>Set `isInclVat` to false or omit from the JSON</li>\r\n            <li>Enter the `lines`.`itemExclVat`</li>\r\n            <li>Enter the `lines`.`totalExclVat`</li>\r\n            <li>When applicable enter the `lines`.`totalDiscountExclVat`</li>\r\n            <li>Omit any ...InclVat value in `lines`</li>\r\n        </ul>\r\n    </li>\r\n    <liIncluding VAT\r\n        <ul>\r\n            <li>Set `isInclVat` to true</li>\r\n            <li>Enter the `lines`.`itemInclVat`</li>\r\n            <li>Enter the `lines`.`totalInclVat`</li>\r\n            <li>When applicable enter the `lines`.`totalDiscountInclVat`</li>\r\n            <li>Omit any ...ExclVat value in `lines`</li>\r\n        </ul>\r\n    </li>\r\n</ul>\r\n\r\n<b>Validation rules</b>\r\n<ul>\r\n    <li>The sum of all `lines.totalExclVat` must exactly match:\r\n        <ul>\r\n            <li>the sum of all `vatTotals`.`totalExclVat`</li>\r\n            <li>the invoice `totalExclVat`</li>\r\n        </ul>\r\n    </li>\r\n    <li>VAT amounts in `vatTotals`.`totalVat` may only have a minimal deviation from calculated VAT based on line totals.</li>\r\n    <li>`totalInclVat` must equal `totalExclVat` + `totalVat`</li>\r\n</ul>\r\n\r\n<b>Receiver identifier resolution</b><br/>\r\nThe receiver Peppol ID is resolved by Scrada based on the following fields (in order of priority). The first available value will be used:\r\n<ol>\r\n    <li>`supplier`.`peppolID`</li>\r\n    <li>`supplier`.`glnNumber`</li>\r\n    <li>`supplier`.`taxNumber`</li>\r\n    <li>`supplier`.`vatNumber`</li>\r\n</ol>\r\n<b>Important</b>: Ensure that the supplier has agreed to self-billing.\r\n",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolOnlyInvoice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolOnlyInvoice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PeppolOnlyInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "Added document ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/outbound/document/{documentID}/ubl": {
      "get": {
        "tags": [
          "Peppol outbound"
        ],
        "summary": "Get outbound document",
        "description": "Get the document that was delivered to Scrada using the endpoint `Send document` or get the successful delivered document over Peppol in case a JSON was delivered to Scrada (the endpoint `Send sales invoice`). In case of a JSON, only after a successful delivery on Peppol this endpoint can be used to get the delivered document over Peppol (most of the times this is an UBL document).",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "The outbound document"
          },
          "404": {
            "description": "Document not found or document is not successful deliverd over Peppol."
          }
        }
      }
    },
    "/v1/company/{companyID}/peppol/outbound/salesInvoice/{documentID}/ubl": {
      "get": {
        "tags": [
          "Peppol outbound"
        ],
        "summary": "Get sales invoice UBL document",
        "description": "Gets the UBL document of a specific sales invoice. <b>This endpoint is obsolete. Use `Get outbound document` instead.</b>",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "The UBL document of the sales invoice"
          },
          "404": {
            "description": "Sales invoice not found or no UBL available."
          }
        },
        "deprecated": true
      }
    },
    "/v1/company/{companyID}/peppol/outbound/document/{documentID}/info": {
      "get": {
        "tags": [
          "Peppol outbound"
        ],
        "summary": "Get outbound document status",
        "description": "Gets the status of a specific outbound document.",
        "parameters": [
          {
            "name": "companyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Language",
            "in": "header",
            "description": "Language",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "The API Key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-PASSWORD",
            "in": "header",
            "description": "The password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized. The API Key and/or Password is wrong."
          },
          "429": {
            "description": "Too many requests. Please try again later."
          },
          "500": {
            "description": "An error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScradaError"
                }
              }
            }
          },
          "200": {
            "description": "The status of the requested XML document.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.PeppolOutboundDocumentStatus"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CollectionResult`1[v1.PeppolInboundDocument]": {
        "type": "object",
        "properties": {
          "results": {
            "title": "Result collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.PeppolInboundDocument"
            },
            "description": "",
            "nullable": true
          },
          "__count": {
            "title": "Total number of results",
            "type": "integer",
            "description": "Results send back in this request can be limited, this number shows the total number of objects.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ScradaError": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "integer",
            "description": "Error code.",
            "format": "int32",
            "readOnly": true
          },
          "defaultFormat": {
            "type": "string",
            "description": "Localized error text.",
            "nullable": true,
            "readOnly": true
          },
          "innerErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScradaError"
            },
            "description": "Inner errors.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "v1.AddJournalLineModel": {
        "required": [
          "amount",
          "categoryID",
          "lineType",
          "vatPerc",
          "vatTypeID"
        ],
        "type": "object",
        "properties": {
          "lineType": {
            "$ref": "#/components/schemas/v1.JournalLineType"
          },
          "vatTypeID": {
            "type": "string",
            "description": "VAT type ID of the line.<br/>\r\n<strong>Belgium:</strong><ul>\r\n<li><b>cbff0b5e-96e3-4201-91d0-51304cee2605:</b> 00 (0%) VAT</li>\r\n<li><b>7befe0fc-7131-4b15-9fe6-ca4b9280b63c:</b> 01 (6%) VAT</li>\r\n<li><b>647ed17b-fb6f-4772-baf5-928de98f4db1:</b> 02 (12%) VAT</li>\r\n<li><b>8424d909-78b9-483c-9b1d-4584fb537846:</b> 03 (21%) VAT</li>\r\n<li><b>cc9b638f-3b54-44c8-91e5-83d337ae6591:</b> NA</li>\r\n</ul>\r\n<strong>The Netherlands:</strong><ul>\r\n<li><b>fb145f3f-c866-4322-9169-8d8219d40e8a:</b> 00 (0%) VAT</li>\r\n<li><b>3aa951e7-f307-4902-b315-b764eb81d211:</b> 02 (9%) VAT</li>\r\n<li><b>aeb8b26c-00b1-4c6a-9cf2-bc1c71d89196:</b> 03 (21%) VAT</li>\r\n<li><b>a29f353e-5549-460a-97cb-70a607b28581:</b> NA</li>\r\n</ul>\r\n<strong>Luxembourg:</strong><ul>\r\n<li><b>1693aca4-a715-4543-be5d-64f0210f0078:</b> 00 (0%) VAT</li>\r\n<li><b>03120fb9-18ea-43a1-9119-1af511895e28:</b> 01 (3%) VAT</li>\r\n<li><b>3f3556ee-6afb-43d1-9545-d309087ac461:</b> 02 (8%) VAT</li>\r\n<li><b>d5b9db32-49d7-4929-9e60-dec7b00c2e2f:</b> 03 (14%) VAT</li>\r\n<li><b>e701b521-2ff0-4176-9533-3e297d52809e:</b> 04 (17%) VAT</li>\r\n<li><b>ea73a071-18dd-4964-8fd7-fe58ff782c2c:</b> NA</li>\r\n</ul>",
            "format": "uuid"
          },
          "vatPerc": {
            "type": "number",
            "description": "Vat percentage. Must match with the given VAT type ID. Must always be filled in. Only in case of VAT NA then this is null. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The line amount including VAT. Max precision is 2.",
            "format": "double"
          },
          "remark": {
            "type": "string",
            "description": "Remark about line. If in the VAT category in Scrada it is defined that the remark is required then it must have a value. In all other cases it is not required.",
            "nullable": true
          },
          "correctionForInvoice": {
            "type": "string",
            "description": "Only usable for line type Correction. The invoice number related to this correction.",
            "nullable": true
          },
          "correctionForDate": {
            "type": "string",
            "description": "Only usable for line type Correction. The correction for date.",
            "format": "date",
            "nullable": true
          },
          "categoryID": {
            "type": "string",
            "description": "Category ID for the transaction.",
            "format": "uuid"
          },
          "externalReference": {
            "maxLength": 100,
            "type": "string",
            "description": "Line reference from an external system.",
            "nullable": true
          },
          "externalData": {
            "type": "string",
            "description": "Line data from an external system.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Journal line"
      },
      "v1.AddJournalLinesPaymethodsModel": {
        "required": [
          "date",
          "lines"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The transaction date.",
            "format": "date"
          },
          "lastJournalLineID": {
            "type": "string",
            "description": "Optional the GUID ID of the last entered line. When provided a check will be performed to verify that this was indeed the last created line ID.",
            "format": "uuid",
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.AddJournalLineModel"
            },
            "description": "The lines to add in the journal."
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.AddJournalPaymentMethodModel"
            },
            "description": "How the daily receipts are paid.<br/>\r\nThe sum of the amounts of the payment methods must be the same as the sum of the amounts of the lines.<br/><br/>\r\n\r\nIf the journal is not linked to a cash book then the payment methods must be blanc.<br/>\r\nIf a journal is linked to a cash book but the journal is configured that payment methods are booked as proposal then it is not required to fill in the payment methods. In all other cases the payments must be set.<br/><br/>\r\n\r\nA certain payment method can only be used multiple times in this list if configured on the payment method that this is allowed!<br/><br/>\r\n\r\nOn payment method several requirements can be active like remark required or not, amount can be positive, ... This can be configured on the payment method itself. It is checked both when entering manual data or when using the API.",
            "nullable": true
          },
          "cashBookTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.CashBookAddLineModel"
            },
            "description": "Additional cash book transactions.<br/>\r\n\r\nIf the journal is not linked to a cash book then the cash book transactions must be blanc.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Journal add lines model"
      },
      "v1.AddJournalLinesReturn": {
        "type": "object",
        "properties": {
          "journalLines": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The added journal line ID's. The last item in the list is also the last created line ID."
          },
          "cashBookLines": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "The added cash book line ID's. The last item in the list is also the last created line ID.",
            "nullable": true
          },
          "message": {
            "$ref": "#/components/schemas/ScradaError"
          }
        },
        "additionalProperties": false
      },
      "v1.AddJournalPaymentMethodModel": {
        "required": [
          "amount",
          "paymentMethodID"
        ],
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "type": "string",
            "description": "The payment method ID",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "The amount. Max precision is 2.",
            "format": "double"
          },
          "remark": {
            "type": "string",
            "description": "The remark. Depending of the payment method it can be that the remark is required!",
            "nullable": true
          },
          "invoiceID": {
            "type": "string",
            "description": "Invoice identifier that has been paid. This is the ID of the invoice in Scrada.",
            "format": "uuid",
            "nullable": true
          },
          "invoiceReference": {
            "type": "string",
            "description": "Invoice payment reference. This reference should also be present on an invoice in Scrada.",
            "nullable": true
          },
          "externalReference": {
            "maxLength": 100,
            "type": "string",
            "description": "Line reference from an external system.",
            "nullable": true
          },
          "externalData": {
            "type": "string",
            "description": "Line data from an external system.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Journal payment method"
      },
      "v1.Address": {
        "title": "Address",
        "required": [
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "street": {
            "type": "string",
            "description": "The street name.",
            "nullable": true
          },
          "streetNumber": {
            "type": "string",
            "description": "The street number.",
            "nullable": true
          },
          "streetBox": {
            "type": "string",
            "description": "The street postbox.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "The city.",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "The ZIP code.",
            "nullable": true
          },
          "countrySubentity": {
            "type": "string",
            "description": "The country subentity.",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The party country code according to ISO 3166-1 alpha 2."
          }
        },
        "additionalProperties": false
      },
      "v1.CashBook": {
        "title": "Cash book",
        "required": [
          "name",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The cash book ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "description": "Show the cash book in the dashboard.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The cash book name."
          },
          "startDate": {
            "type": "string",
            "description": "The start date.",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The closing date.",
            "format": "date-time",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "description": "The IBAN number of the cash book.",
            "nullable": true,
            "readOnly": true
          },
          "startBalance": {
            "type": "number",
            "description": "The start balance.",
            "format": "double",
            "nullable": true
          },
          "currentBalance": {
            "type": "number",
            "description": "The current balance.",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "lastLineDate": {
            "type": "string",
            "description": "The last line date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "warnBalanceTooHigh": {
            "type": "number",
            "description": "Optional warning level for high balance.",
            "format": "double",
            "nullable": true
          },
          "codaFileType": {
            "$ref": "#/components/schemas/v1.CashBookFormatType"
          },
          "codaGenerationPeriodType": {
            "$ref": "#/components/schemas/v1.CashBookCodaGenerationPeriodType"
          },
          "codaGenerationStartWeekDay": {
            "$ref": "#/components/schemas/v1.CashBookCodaGenerationDayOfWeek"
          },
          "allowEntryAfterCoda": {
            "type": "boolean",
            "description": "Allow entries in the cash book after a CODA file has been generated. Only applicable when the cash book is linked to a journal.",
            "nullable": true
          },
          "addPaymentReference": {
            "type": "boolean",
            "description": "Add journal payment reference to CODA files.",
            "nullable": true
          },
          "invoicedTill": {
            "type": "string",
            "description": "Scrada invoice send till this date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "paidTill": {
            "type": "string",
            "description": "Scrada invoice paid till this date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "minimumPossibleLineDate": {
            "type": "string",
            "description": "Earliest possible date for a cash book entry.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "maximumPossibleLineDate": {
            "type": "string",
            "description": "Latest possible date for a cash book entry.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "If a property is set null or a property is missing then the system assumes that this property must keep its original value. Only in case of property endDate, if this property is missing or has has value null, the system assumes that it has value null."
      },
      "v1.CashBookAddLineModel": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "lineType": {
            "$ref": "#/components/schemas/v1.CashBookTransactionTypeLineType"
          },
          "transactionTypeID": {
            "type": "string",
            "description": "Transaction type ID of this line. Use either this transaction type ID of use LineType (Recommended).",
            "format": "uuid",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount to transfer. Max precision is 2.",
            "format": "double"
          },
          "companyName": {
            "type": "string",
            "description": "Company name is required for transaction 'Customer' and 'Supplier' otherwise leave it empty.",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Invoice number optional for transaction 'Customer' and 'Supplier' otherwise leave it empty.",
            "nullable": true
          },
          "remark": {
            "type": "string",
            "description": "Remark about the transaction.",
            "nullable": true
          },
          "otherCashBookID": {
            "type": "string",
            "description": "Other cash book ID (within the same company) for transaction 'Transfer cash to cash in' or 'Transfer cash to cash out'.",
            "format": "uuid",
            "nullable": true
          },
          "externalReference": {
            "maxLength": 100,
            "type": "string",
            "description": "Line reference from an external system.",
            "nullable": true
          },
          "externalData": {
            "type": "string",
            "description": "Line data from an external system.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.CashBookAddLinesModel": {
        "required": [
          "date",
          "endBalance",
          "lines",
          "startBalance"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The transaction date.",
            "format": "date"
          },
          "startBalance": {
            "type": "number",
            "description": "The current cash book balance. Max precision is 2.",
            "format": "double"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.CashBookAddLineModel"
            },
            "description": "The transaction lines to add in the cash book."
          },
          "endBalance": {
            "type": "number",
            "description": "The cash book balance after the provided line transactions. Max precision is 2.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Cash book add lines model"
      },
      "v1.CashBookCodaGenerationDayOfWeek": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "Day of the week to generate CODA file.<ul>\r\n<li><b>0:</b> Sunday</li>\r\n<li><b>1:</b> Monday</li>\r\n<li><b>2:</b> Tuesday</li>\r\n<li><b>3:</b> Wednesday</li>\r\n<li><b>4:</b> Thursday</li>\r\n<li><b>5:</b> Friday</li>\r\n<li><b>6:</b> Saturday</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CashBookCodaGenerationPeriodType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The CODA generation period.<ul>\r\n<li><b>1:</b> Every day</li>\r\n<li><b>2:</b> Every week</li>\r\n<li><b>3:</b> Every month</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CashBookFormatType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "The CODA format.<ul>\r\n<li><b>1:</b> Only lines</li>\r\n<li><b>2:</b> Lines and payment methods</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CashBookTransactionType": {
        "title": "Transaction type",
        "required": [
          "nameDE",
          "nameEN",
          "nameFR",
          "nameNL"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The transaction type ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "nameNL": {
            "maxLength": 200,
            "type": "string",
            "description": "The Dutch Transaction Type name.",
            "nullable": true
          },
          "nameEN": {
            "maxLength": 200,
            "type": "string",
            "description": "The English Transaction Type name.",
            "nullable": true
          },
          "nameFR": {
            "maxLength": 200,
            "type": "string",
            "description": "The French Transaction Type name.",
            "nullable": true
          },
          "nameDE": {
            "maxLength": 200,
            "type": "string",
            "description": "The German Transaction Type name.",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "The sorting position. Lowest is shown first.",
            "format": "int32",
            "nullable": true
          },
          "inputType": {
            "$ref": "#/components/schemas/v1.CashBookTransactionTypeInputType"
          },
          "lineType": {
            "$ref": "#/components/schemas/v1.CashBookTransactionTypeLineType"
          },
          "commentType": {
            "$ref": "#/components/schemas/v1.CashBookTransactionTypeCommentType"
          }
        },
        "additionalProperties": false,
        "description": "If a property is set null or a property is missing then we assume that this property must keep its original value."
      },
      "v1.CashBookTransactionTypeCommentType": {
        "enum": [
          2,
          3
        ],
        "type": "integer",
        "description": "The comment visibility.<ul>\r\n<li><b>2:</b> Optional</li>\r\n<li><b>3:</b> Required</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CashBookTransactionTypeInputType": {
        "enum": [
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "The input visibility.<ul>\r\n<li><b>1:</b> Not visible</li>\r\n<li><b>2:</b> Only receive</li>\r\n<li><b>3:</b> Only expense</li>\r\n<li><b>4:</b> Receive or expense</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CashBookTransactionTypeLineType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14
        ],
        "type": "integer",
        "description": "Transaction type of this line. Use either this line type or use the TransactionTypeID, not supported for custom transaction types.<ul>\r\n<li><b>1:</b> Private take</li>\r\n<li><b>2:</b> Private deposit</li>\r\n<li><b>3:</b> Customer</li>\r\n<li><b>4:</b> Supplier</li>\r\n<li><b>5:</b> Transfer bank to cash</li>\r\n<li><b>6:</b> Transfer cash to bank</li>\r\n<li><b>7:</b> Cost</li>\r\n<li><b>8:</b> Cash difference</li>\r\n<li><b>9:</b> Daily receipts cash (Only allowed when no journal is linked)</li>\r\n<li><b>12:</b> Transfer cash to cash in</li>\r\n<li><b>13:</b> Transfer cash to cash out</li>\r\n<li><b>14:</b> Own/ custom type (Requires TransactionTypeID)</li>\r\n</ul>",
        "format": "int32",
        "nullable": true
      },
      "v1.Company": {
        "title": "Company",
        "required": [
          "city",
          "countryID",
          "email",
          "invoiceInfo",
          "name",
          "phone",
          "reportLanguageID",
          "street",
          "zipCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The company ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "description": "Show the company in the company overview screen.",
            "nullable": true
          },
          "code": {
            "maxLength": 200,
            "type": "string",
            "description": "The company code. Is used by Scrada as parameter in emails or integrations",
            "nullable": true
          },
          "name": {
            "maxLength": 200,
            "type": "string",
            "description": "The company name.",
            "nullable": true
          },
          "email": {
            "maxLength": 250,
            "type": "string",
            "description": "The company email.",
            "nullable": true
          },
          "street": {
            "maxLength": 1000,
            "type": "string",
            "description": "The company street.",
            "nullable": true
          },
          "zipCode": {
            "maxLength": 50,
            "type": "string",
            "description": "The company ZIP code.",
            "nullable": true
          },
          "city": {
            "maxLength": 250,
            "type": "string",
            "description": "The company city.",
            "nullable": true
          },
          "countryID": {
            "type": "string",
            "description": "The company country ID.<ul>\r\n<li><b>12b741b9-c0ad-42b5-8471-e720763f3227</b>: België/Belgique</li>\r\n<li><b>97e88925-b346-4b76-b671-ef1cf7d68733</b>: Nederland</li>\r\n<li><b>74a68d03-8c08-4074-a41e-59d830024344</b>: France</li>\r\n<li><b>597fde4e-a4db-42ac-99e1-af3962bbffa4</b>: Deutschland</li>\r\n</ul>",
            "format": "uuid",
            "nullable": true
          },
          "taxNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The company tax number.<ul>\r\n<li>België/Belgique: ondernemingsnummer/numéro d’Entreprise</li>\r\n<li>Nederland: KvK nummer</li>\r\n<li>France: SIRENE</li>\r\n<li>Deutschland: Handelsregisternummer</li>\r\n</ul>",
            "nullable": true
          },
          "vatNumber": {
            "maxLength": 30,
            "type": "string",
            "description": "The company VAT number.",
            "nullable": true
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "description": "The company phone number.",
            "nullable": true
          },
          "reportLanguageID": {
            "type": "string",
            "description": "The language ID in which language the company reports (like daily receipt invoice) need to be generated in.<ul>\r\n<li><b>e1e8395c-35b3-4282-89db-3feeaacc23bd</b>: Nederlands (nl-BE)</li>\r\n<li><b>5300381e-f434-4e01-a1f8-53e7676d4cac</b>: Français (fr-BE)</li>\r\n<li><b>68f89f67-b153-43e6-b9a6-f8d73b56a67a</b>: English (en-US)</li>\r\n</ul>",
            "format": "uuid",
            "nullable": true
          },
          "invoiceInfo": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceInfo"
          },
          "invoiceEmail": {
            "maxLength": 250,
            "type": "string",
            "description": "The email address to receive the invoices on. If not provided the invoice will be send to the company email. Not applicable when 'invoiceInfo' is set to `3`.",
            "nullable": true
          },
          "invoiceStreet": {
            "maxLength": 1000,
            "type": "string",
            "description": "The invoice street. Only applicable when 'invoiceInfo' is set to `2`.",
            "nullable": true
          },
          "invoiceZipCode": {
            "maxLength": 50,
            "type": "string",
            "description": "The invoice ZIP code. Only applicable when 'invoiceInfo' is set to `2`.",
            "nullable": true
          },
          "invoiceCity": {
            "maxLength": 250,
            "type": "string",
            "description": "The invoice city. Only applicable when 'invoiceInfo' is set to `2`.",
            "nullable": true
          },
          "invoiceCountryID": {
            "type": "string",
            "description": "The invoice country ID. Only applicable when 'invoiceInfo' is set to `2`.<ul>\r\n<li><b>12b741b9-c0ad-42b5-8471-e720763f3227</b>: België/Belgique</li>\r\n<li><b>97e88925-b346-4b76-b671-ef1cf7d68733</b>: Nederland</li>\r\n<li><b>74a68d03-8c08-4074-a41e-59d830024344</b>: France</li>\r\n<li><b>597fde4e-a4db-42ac-99e1-af3962bbffa4</b>: Deutschland</li>\r\n</ul>",
            "format": "uuid",
            "nullable": true
          },
          "invoiceCompanyID": {
            "type": "string",
            "description": "The company ID to which the invoice need to be send. Only applicable when 'invoiceInfo' is set to `3`.<br/>\r\n**Remark:** To set a different invoice company the user needs to have access rights to both companies. The API credentials only provide access to a single company, it is therefore not possible to change this setting using the external API.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If a property is set null or a property is missing then we assume that this property must keep its original value."
      },
      "v1.CompanyInvoiceInfo": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The invoice information to use.<ul>\r\n<li><b>1:</b> Company address</li>\r\n<li><b>2:</b> Invoice address</li>\r\n<li><b>3:</b> Other company information</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CompanyInvoiceLineUomType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          200,
          201,
          202,
          203,
          300,
          301,
          400,
          401
        ],
        "type": "integer",
        "description": "The unit of measure type.<ul>\r\n<li><b>1:</b> One or unit.</li>\r\n<li><b>2:</b> Piece</li>\r\n<li><b>3:</b> Pallet</li>\r\n<li><b>4:</b> Container 20ft</li>\r\n<li><b>5:</b> Container 40ft</li>\r\n\r\n<li><b>100:</b> Second</li>\r\n<li><b>101:</b> Minute</li>\r\n<li><b>102:</b> Hour</li>\r\n<li><b>103:</b> Day</li>\r\n<li><b>104:</b> Month</li>\r\n<li><b>105:</b> Year</li>\r\n<li><b>106:</b> Week</li>\r\n\r\n<li><b>200:</b> Milligram</li>\r\n<li><b>201:</b> Gram</li>\r\n<li><b>202:</b> Kilogram</li>\r\n<li><b>203:</b> Ton</li>\r\n\r\n<li><b>300:</b> Meter</li>\r\n<li><b>301:</b> Kilometer</li>\r\n\r\n<li><b>400:</b> Liter</li>\r\n<li><b>401:</b> Milliliter</li>\r\n</ul>\r\nIf your required UOM is not in the list please send email to info@scrada.be",
        "format": "int32"
      },
      "v1.CompanyInvoiceLineVatType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          20,
          21,
          22,
          50,
          51,
          52,
          53,
          54,
          70,
          71,
          72
        ],
        "type": "integer",
        "description": "The VAT type. Default is standard rate (1).<ul>\r\n<li><b>1:</b> Standard rate (If line is 0% VAT then Zero rate must be used. Standard rate cannot be used even if it is the standard rate for this product/service) (Belgium: VAT Box 01, 02 or 03)</li>\r\n<li><b>2:</b> Zero rate (Belgium: VAT Box 00)</li>\r\n<li><b>3:</b> Exempt from tax (Diversen na BTW/Divers hors TVA) (Belgium: Not on VAT Declaration)</li>\r\n<li><b>4:</b> ICD Services B2B (ICL B2B Diensten/LIC Services B2B) (Belgium: VAT Box 44)</li>\r\n<li><b>5:</b> ICD Goods (ICL Goederen/LIC Marchandises) (Belgium: VAT Box 46)</li>\r\n<li><b>6:</b> ICD Manufacturing cost (ICL Maakloon/LICTravail à façon) (Belgium: VAT Box 47)</li>\r\n<li><b>7:</b> ICD Assembly (ICL Montage/LIC Montage) (Belgium: VAT Box 47)</li>\r\n<li><b>8:</b> ICD Distance (ICL Afstand/LIC Distance) (Belgium: VAT Box 47)</li>\r\n<li><b>9:</b> ICD Services (ICL Diensten/LIC Services) (Belgium: VAT Box 47)</li>\r\n<li><b>10:</b> ICD Triangle a-B-c (ICL Driehoek a-B-c/LIC Triangle a-B-c) (Belgium: VAT Box 46)</li>\r\n\r\n<li><b>20:</b> Export non E.U. (Export niet E.G./Export non C.E.) (Belgium: VAT Box 47)</li>\r\n<li><b>21:</b> Indirect export (Onrechtstreekse uitvoer/Export indirect) (Belgium: VAT Box 47)</li>\r\n<li><b>22:</b> Export via E.U. (Export via E.G./Export via C.E.) (Belgium: VAT Box 47)</li>\r\n\r\n<li><b>50:</b> Reverse charge (Medecontractant/Cocontractant) (Belgium: VAT Box 45)</li>\r\n<li><b>51:</b> Financial discount (Belgium: Not on VAT Declaration)</li>\r\n<li><b>52:</b> 0% Clause 44 (Artikel 44/Article 44) (Belgium: VAT Box 00)</li>\r\n<li><b>53:</b> Standard exchange (Standaardruil/Echange standard) (Belgium: VAT Box 03)</li>\r\n<li><b>54:</b> Margin (Marge/Marge)<li>\r\n\r\n<li><b>70:</b> OSS Goods</li>\r\n<li><b>71:</b> OSS Services</li>\r\n<li><b>72:</b> OSS Import</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CompanyInvoicePaymentMethodType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "description": "The payment method type.<ul>\r\n<li><b>1:</b> Undefined payment method (Unknown)</li>\r\n<li><b>2:</b> Wire transfer (Overschrijving)</li>\r\n<li><b>3:</b> Bank card (iDeal)</li>\r\n<li><b>4:</b> Direct debit (Domiciliëring, automatische incasso)</li>\r\n<li><b>5:</b> Cash</li>\r\n<li><b>6:</b> Credit card</li>\r\n<li><b>7:</b> Online payment provider (Mollie, Stripe)</li>\r\n<li><b>8:</b> Cheque</li>\r\n<li><b>9:</b> Debit card (Bancontact)</li>\r\n</ul>\r\nIf your required payment method is not in the list please send email to info@scrada.be.\r\n",
        "format": "int32"
      },
      "v1.CompanyInvoiceTaxNumberType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The tax number typed used to identify the party.<ul>\r\n<li><b>1:</b> Numero d'entreprise / ondernemingsnummer / Unternehmensnummer / Enterprise number (Belgium)</li>\r\n<li><b>2:</b> Kamer van koophandel nummer (the Netherlands)</li>\r\n<li><b>3:</b> SIRENE (France)</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CompanyInvoiceType": {
        "enum": [
          1
        ],
        "type": "integer",
        "description": "The invoice type.<ul>\r\n<li><b>1:</b> Sales invoice</li>\r\n<li><b>2:</b> Purchase invoice*</li>\r\n* Under development. Contact info@scrada.be for more information.\r\n</ul>",
        "format": "int32"
      },
      "v1.CompanyVatPeriod": {
        "required": [
          "vatPeriodType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The VAT period ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "fromDate": {
            "type": "string",
            "description": "The starting date of the VAT period.",
            "format": "date-time",
            "nullable": true
          },
          "tillDate": {
            "type": "string",
            "description": "The end date of the VAT period.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "vatPeriodType": {
            "$ref": "#/components/schemas/v1.CompanyVatPeriodType"
          }
        },
        "additionalProperties": false,
        "description": "VAT period"
      },
      "v1.CompanyVatPeriodType": {
        "enum": [
          0,
          1,
          3,
          12
        ],
        "type": "integer",
        "description": "The VAT type.<ul>\r\n<li><b>0:</b> No VAT obligation</li>\r\n<li><b>1:</b> Monty</li>\r\n<li><b>3:</b> Quarterly</li>\r\n<li><b>12:</b> Yearly</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.CompanyVatStatus": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The VAT status of the company.<ul>\r\n<li><b>1:</b> Subject to VAT</li>\r\n<li><b>2:</b> Not subject to VAT</li>\r\n<li><b>3:</b> Small business VAT exemption</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.ExtraIdentifier": {
        "title": "Extra party identifier information",
        "required": [
          "identifier"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "The additional identifier value. Example: ITAA accounting number, farmer number."
          }
        },
        "additionalProperties": false
      },
      "v1.InvoiceAttachment": {
        "title": "Invoice attachment",
        "required": [
          "base64Data",
          "filename",
          "fileType",
          "mimeType"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "The document file name including file extension."
          },
          "fileType": {
            "$ref": "#/components/schemas/v1.InvoiceAttachmentFileType"
          },
          "mimeType": {
            "type": "string",
            "description": "The document mime type. The following mime types are supported:<ul>\r\n<li>text/csv</li>\r\n<li>application/pdf</li>\r\n<li>image/png</li>\r\n<li>image/jpeg</li>\r\n<li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>\r\n<li>application/vnd.oasis.opendocument.spreadsheet</li>\r\n</ul>"
          },
          "base64Data": {
            "type": "string",
            "description": "The document with Base64 encoding."
          },
          "note": {
            "type": "string",
            "description": "The document comment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.InvoiceAttachmentFileType": {
        "enum": [
          1,
          2,
          3,
          99
        ],
        "type": "integer",
        "description": "The attachment file type. Default is `99`.<ul>\r\n<li><b>1:</b> Invoice or credit note (The main invoice document, there can only be 1 attachment of this type)</li>\r\n<li><b>2:</b> Terms and conditions</li>\r\n<li><b>3:</b> Timesheet</li>\r\n<li><b>99:</b> Other</li>\r\n</ul>\r\n",
        "format": "int32"
      },
      "v1.InvoiceLine": {
        "title": "Invoice line",
        "required": [
          "itemName",
          "lineNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The invoice line ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "lineNumber": {
            "type": "string",
            "description": "The line number, must be unique for each line."
          },
          "itemCode": {
            "minLength": 1,
            "type": "string",
            "description": "The item code.",
            "nullable": true
          },
          "accountingGeneralLedger": {
            "type": "string",
            "description": "The accounting general ledger number. Must be empty or fully numeric.",
            "nullable": true
          },
          "accountingAnalytical1": {
            "type": "string",
            "description": "The accounting analytical 1. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical2": {
            "type": "string",
            "description": "The accounting analytical 2. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical3": {
            "type": "string",
            "description": "The accounting analytical 3. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical4": {
            "type": "string",
            "description": "The accounting analytical 4. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical5": {
            "type": "string",
            "description": "The accounting analytical 5. Function depends on the accounting system.",
            "nullable": true
          },
          "itemName": {
            "minLength": 1,
            "type": "string",
            "description": "The item name or line description."
          },
          "itemGroup": {
            "type": "string",
            "description": "The item group name.",
            "nullable": true
          },
          "itemOriginCountryCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The shipping country of origin according to ISO 3166-1 alpha 2.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of items. Default value is 0. Max precision is 4.",
            "format": "double",
            "nullable": true
          },
          "unitType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceLineUomType"
          },
          "itemExclVat": {
            "type": "number",
            "description": "The item price excluding VAT. Default is 0. Max precision is 4.",
            "format": "double",
            "nullable": true
          },
          "vatType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceLineVatType"
          },
          "vatPerc": {
            "type": "number",
            "description": "The VAT percentage. Can be 0% for VAT excluded items. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalDiscountExclVat": {
            "type": "number",
            "description": "The total discount for the entire line (not per product) excluding VAT. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalExclVat": {
            "type": "number",
            "description": "The total line price excluding VAT. Default is 0. Max precision is 2",
            "format": "double",
            "nullable": true
          },
          "totalVat": {
            "type": "number",
            "description": "The total VAT of this line. Default is 0. Max precision is 2",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.InvoicePaymentMethod": {
        "title": "Invoice payment method",
        "required": [
          "name",
          "paymentType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The invoice payment method ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "paymentType": {
            "$ref": "#/components/schemas/v1.CompanyInvoicePaymentMethodType"
          },
          "paymentReference": {
            "type": "string",
            "description": "The payment reference. <b>If multiple payment methods are used, they must share the same 'paymentReference'.</b>",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The payment method name.",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "description": "The IBAN account. Used and required for payment type wire transfer.",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "description": "The IBAN account. Used for payment type wire transfer.",
            "nullable": true
          },
          "sepaMandateID": {
            "type": "string",
            "description": "The SEPA mandate identifier. Used and required for payment type direct debit.",
            "nullable": true
          },
          "sepaIban": {
            "type": "string",
            "description": "The SEPA IBAN that will be debited by the direct debit. Used and required for payment type direct debit.",
            "nullable": true
          },
          "totalPaid": {
            "type": "number",
            "description": "The total amount already paid with this payment method.\r\n<i>Payments are not added to the journal or cash book.</i> Default value is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalToPay": {
            "type": "number",
            "description": "The total amount to get paid with this payment method. Default value is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.InvoiceWithDocument": {
        "title": "Invoice",
        "required": [
          "bookYear",
          "invoiceDate",
          "invoiceExpiryDate",
          "journal",
          "number",
          "partyName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The invoice ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "bookYear": {
            "maxLength": 200,
            "type": "string",
            "description": "The book year in which the invoice is created. Scrada will check that the following combination is unique: `BookYear`, `Journal`, `Number` and `Type`. This field cannot be 'NULL'."
          },
          "journal": {
            "maxLength": 200,
            "type": "string",
            "description": "The journal name or code. This field cannot be 'NULL'."
          },
          "number": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string",
            "description": "The invoice number."
          },
          "type": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceType"
          },
          "creditInvoice": {
            "type": "boolean",
            "description": "The invoice is a credit invoice. Default value is false",
            "nullable": true
          },
          "invoiceDate": {
            "type": "string",
            "description": "The invoice date.",
            "format": "date"
          },
          "invoiceExpiryDate": {
            "type": "string",
            "description": "The invoice expiry date.",
            "format": "date"
          },
          "alreadySendToCustomer": {
            "type": "boolean",
            "description": "Indicator if the invoice is already send to the customer. If not (by default) Scrada can send the invoice.",
            "nullable": true
          },
          "buyerReference": {
            "type": "string",
            "description": "The buyers reference.",
            "nullable": true
          },
          "purchaseOrderReference": {
            "type": "string",
            "description": "The purchase order reference.",
            "nullable": true
          },
          "salesOrderReference": {
            "type": "string",
            "description": "The sales order reference.",
            "nullable": true
          },
          "partyCode": {
            "type": "string",
            "description": "The party identification code.",
            "nullable": true
          },
          "partyAccountingCode": {
            "type": "string",
            "description": "The party identification code in the accounting system. This code is used as reference key to this party.",
            "nullable": true
          },
          "partyLanguageCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The party language code according to ISO 639-1.",
            "nullable": true
          },
          "partyName": {
            "minLength": 1,
            "type": "string",
            "description": "The party name."
          },
          "partyStreet": {
            "type": "string",
            "description": "The party street.",
            "nullable": true
          },
          "partyStreetNumber": {
            "type": "string",
            "description": "The party street number.",
            "nullable": true
          },
          "partyStreetBox": {
            "type": "string",
            "description": "The party street postbox.",
            "nullable": true
          },
          "partyCity": {
            "type": "string",
            "description": "The party city.",
            "nullable": true
          },
          "partyZipCode": {
            "type": "string",
            "description": "The party ZIP code.",
            "nullable": true
          },
          "partyCountryCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The party country code according to ISO 3166-1 alpha 2.",
            "nullable": true
          },
          "partyPhone": {
            "maxLength": 50,
            "type": "string",
            "description": "The party phone number.",
            "nullable": true
          },
          "partyEmail": {
            "maxLength": 250,
            "type": "string",
            "description": "The party email address.",
            "nullable": true
          },
          "partyInvoiceEmail": {
            "maxLength": 250,
            "type": "string",
            "description": "The party invoice email address.",
            "nullable": true
          },
          "partyContact": {
            "type": "string",
            "description": "The party contact name.",
            "nullable": true
          },
          "partyTaxNumberType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceTaxNumberType"
          },
          "partyTaxNumber": {
            "type": "string",
            "description": "The party tax number according to the type `PartyTaxNumberType`.",
            "nullable": true
          },
          "partyVatNumber": {
            "type": "string",
            "description": "The party VAT number. This must be a valid VAT number!",
            "nullable": true
          },
          "partyGlnNumber": {
            "type": "string",
            "description": "The party GLN number. This must be a valid GLN number!",
            "nullable": true
          },
          "invoiceUbl": {
            "type": "string",
            "description": "The invoice UBL with UTF-8 encoding.",
            "nullable": true,
            "readOnly": true
          },
          "totalInclVat": {
            "type": "number",
            "description": "The total invoice amount including VAT. Default value is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalVat": {
            "type": "number",
            "description": "The total invoice VAT amount. Default value is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalExclVat": {
            "type": "number",
            "description": "The total invoice amount excluding VAT. Default value is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "payableRoundingAmount": {
            "type": "number",
            "description": "The payable rounding amount. The amount to be added to the invoice total to round the amount to be paid. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "The invoice comment.",
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.InvoiceLine"
            },
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.InvoicePaymentMethod"
            },
            "nullable": true
          },
          "filename": {
            "type": "string",
            "description": "The invoice document file name including file extension.",
            "nullable": true
          },
          "mimeType": {
            "type": "string",
            "description": "The invoice document mime type. The following mime types are supported:<ul>\r\n<li>text/csv</li>\r\n<li>application/pdf</li>\r\n<li>image/png</li>\r\n<li>image/jpeg</li>\r\n<li>application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</li>\r\n<li>application/vnd.oasis.opendocument.spreadsheet</li>\r\n</ul>",
            "nullable": true
          },
          "base64Data": {
            "type": "string",
            "description": "The invoice document with Base64 encoding.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If a property is set null or a property is missing then we assume that this property must keep its original value.<br/>The currency of the invoice is always EUR."
      },
      "v1.Journal": {
        "title": "Journal",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The journal ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "description": "Show the journal in the dashboard.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The journal name.",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "The start date. If new book and not specified then today is used as start date.",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "The closing date.",
            "format": "date-time",
            "nullable": true
          },
          "lastLineDate": {
            "type": "string",
            "description": "The last entry date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "lastLineID": {
            "type": "string",
            "description": "The last entry line ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "invoiceGenerationPeriodType": {
            "$ref": "#/components/schemas/v1.JournalInvoicePeriodType"
          },
          "invoiceGenerationStartWeekDay": {
            "$ref": "#/components/schemas/v1.JournalInvoiceDayOfWeek"
          },
          "customerName": {
            "maxLength": 250,
            "type": "string",
            "description": "The journal invoice customer name.",
            "nullable": true
          },
          "customerReference": {
            "maxLength": 250,
            "type": "string",
            "description": "The journal invoice customer reference.",
            "nullable": true
          },
          "invoiceNumberExternalFormat": {
            "maxLength": 100,
            "type": "string",
            "description": "The journal invoice number format.<br/>\r\nOwn invoice number can contain automatically filled in values like {VATYear}, {VATPeriod}, {InvoiceNumber}, {DateDay}, {DateMonth}, {DateYear} or {DateShortYear} (more info can be found in the FAQ on the website of Scrada). If you want that a value has minimum length then you can use the value format {<valueName>:<length>:<filling char>}. The default filling char 0 is used. Samples are '{VATYear}{VATPeriod:2}' or 'V1/{InvoiceNumber:8}'.",
            "nullable": true
          },
          "invoiceNumberExternalReset": {
            "maxLength": 10,
            "type": "string",
            "description": "Reset the journal invoice number on a specified day.<br/>\r\nFormat of values is <day>/<month>. Sample 1/5 if reset on the first of May.",
            "nullable": true
          },
          "openOnMonday": {
            "type": "boolean",
            "description": "Business is opened on Monday. Default value is true.",
            "nullable": true
          },
          "openOnTuesday": {
            "type": "boolean",
            "description": "Business is opened on Tuesday. Default value is true.",
            "nullable": true
          },
          "openOnWednesday": {
            "type": "boolean",
            "description": "Business is opened on Wednesday. Default value is true.",
            "nullable": true
          },
          "openOnThursday": {
            "type": "boolean",
            "description": "Business is opened on Thursday. Default value is true.",
            "nullable": true
          },
          "openOnFriday": {
            "type": "boolean",
            "description": "Business is opened on Friday. Default value is true.",
            "nullable": true
          },
          "openOnSaturday": {
            "type": "boolean",
            "description": "Business is opened on Saturday. Default value is true.",
            "nullable": true
          },
          "openOnSunday": {
            "type": "boolean",
            "description": "Business is opened on Sunday. Default value is true.",
            "nullable": true
          },
          "cashbookID": {
            "type": "string",
            "description": "The journal linked to a cash book ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "emailNoLinesDays": {
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "description": "Send an email after this number of days no lines entered.",
            "format": "int32",
            "nullable": true
          },
          "allowMultipleEntries": {
            "type": "boolean",
            "description": "Allow multiple entries on a single day in the daily receipts book. This doesn't include correction entries.",
            "nullable": true
          },
          "autoLoadPaymentProvider": {
            "type": "boolean",
            "description": "If value is true then the payment providers (like payconiq, ... ) are filled in automatically when adding manual lines. Default value true.",
            "nullable": true
          },
          "addFiguresUser": {
            "$ref": "#/components/schemas/v1.JournalAllowAddFiguresUserType"
          },
          "addFiguresApi": {
            "$ref": "#/components/schemas/v1.JournalAllowAddFiguresApiType"
          },
          "invoicedTill": {
            "type": "string",
            "description": "Scrada invoice send till this date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "paidTill": {
            "type": "string",
            "description": "Scrada invoice paid till this date.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "minimumPossibleLineDate": {
            "type": "string",
            "description": "Earliest possible date for creating a regular daily receipts entry.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "maximumPossibleLineDate": {
            "type": "string",
            "description": "Latest possible date for creating a regular daily receipts entry.",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": "If a property is set null or a property is missing then the system assumes that this property must keep its original value. Only in case of property endDate, if this property is missing or has has value null, the system assumes that it has value null."
      },
      "v1.JournalAllowAddFiguresApiType": {
        "enum": [
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "Allow API users to add entries to the journal.<ul>\r\n<li><b>1:</b> Block</li>\r\n<li><b>2:</b> Directly add figures</li>\r\n<li><b>3:</b> Directly add daily receipts figures and add payment methods as proposal</li>\r\n<li><b>4:</b> Add as proposal (requires confirmation by user)</li>\r\n<li><b>5:</b> Add as proposal and update with payment provider info</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.JournalAllowAddFiguresUserType": {
        "enum": [
          1,
          2
        ],
        "type": "integer",
        "description": "Allow users to add entries to the journal.<ul>\r\n<li><b>1:</b> Block</li>\r\n<li><b>2:</b> Directly add figures</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.JournalInvoiceDayOfWeek": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "Day of the week to generate journal invoice. Only applicable when 'journalInvoicePeriodType' is set to `2`(EveryWeek).\r\n<ul>\r\n<li><b>0:</b> Sunday</li>\r\n<li><b>1:</b> Monday</li>\r\n<li><b>2:</b> Tuesday</li>\r\n<li><b>3:</b> Wednesday</li>\r\n<li><b>4:</b> Thursday</li>\r\n<li><b>5:</b> Friday</li>\r\n<li><b>6:</b> Saturday</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.JournalInvoicePeriodType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The invoice generation period.<ul>\r\n<li><b>1:</b> Every day</li>\r\n<li><b>2:</b> Every week</li>\r\n<li><b>3:</b> Every month</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.JournalLineType": {
        "enum": [
          1,
          3
        ],
        "type": "integer",
        "description": "Transaction type of this line.<ul>\r\n<li><b>1:</b> Divers</li>\r\n<li><b>3:</b> Correction</li>\r\n</ul>\r\n<i>Do not combine divers and correction in the same Post/ Put action.</i><br/>\r\nFor type correction: All line remarks should be identical.",
        "format": "int32"
      },
      "v1.JournalPaymentMethod": {
        "title": "Payment method",
        "required": [
          "nameDE",
          "nameEN",
          "nameFR",
          "nameNL"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The payment method ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "nameNL": {
            "maxLength": 200,
            "type": "string",
            "description": "The Dutch payment method name.",
            "nullable": true
          },
          "nameEN": {
            "maxLength": 200,
            "type": "string",
            "description": "The English payment method name.",
            "nullable": true
          },
          "nameFR": {
            "maxLength": 200,
            "type": "string",
            "description": "The French payment method name.",
            "nullable": true
          },
          "nameDE": {
            "maxLength": 200,
            "type": "string",
            "description": "The German payment method name.",
            "nullable": true
          },
          "isCash": {
            "type": "boolean",
            "description": "Mark the payment method as cash payment. Cash payments will get added to the linked cashbook.",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "The sorting position. Lowest is shown first.",
            "format": "int32",
            "nullable": true
          },
          "isCalculated": {
            "type": "boolean",
            "description": "Sets whether this payment method gets calculated in the GUI.",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicator for the default payment method.",
            "nullable": true
          },
          "inputEntry": {
            "$ref": "#/components/schemas/v1.JournalPaymentMethodInputType"
          },
          "inputCorrection": {
            "$ref": "#/components/schemas/v1.JournalPaymentMethodInputType"
          },
          "commentType": {
            "$ref": "#/components/schemas/v1.JournalPaymentMethodCommentType"
          },
          "allowMultiple": {
            "type": "boolean",
            "description": "Whether to allow multiple instances of this payment method in a singe daily receipt transaction. Default `false`, cannot be used in combination with a payment provider integration.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If a property is set null or a property is missing then we assume that this property must keep its original value."
      },
      "v1.JournalPaymentMethodCommentType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The comment visibility.<ul>\r\n<li><b>1:</b> Not visible</li>\r\n<li><b>2:</b> Optional</li>\r\n<li><b>3:</b> Required</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.JournalPaymentMethodInputType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "description": "The input visibility.<ul>\r\n<li><b>1:</b> Not visible</li>\r\n<li><b>2:</b> Always visible</li>\r\n<li><b>3:</b> Only positive</li>\r\n<li><b>4:</b> Only negative</li>\r\n<li><b>5:</b> Warning on positive</li>\r\n<li><b>6:</b> Warning on negative</li>\r\n<li><b>7:</b> Always warning</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.JournalVatCategory": {
        "title": "VAT category",
        "required": [
          "nameDE",
          "nameEN",
          "nameFR",
          "nameNL"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The VAT category ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "nameNL": {
            "maxLength": 200,
            "type": "string",
            "description": "The Dutch VAT category name.",
            "nullable": true
          },
          "nameEN": {
            "maxLength": 200,
            "type": "string",
            "description": "The English VAT category name.",
            "nullable": true
          },
          "nameFR": {
            "maxLength": 200,
            "type": "string",
            "description": "The French VAT category name.",
            "nullable": true
          },
          "nameDE": {
            "maxLength": 200,
            "type": "string",
            "description": "The German VAT category name.",
            "nullable": true
          },
          "vatTypeID": {
            "type": "string",
            "description": "VAT type ID of the category.<br/>\r\n<strong>Belgium:</strong><ul>\r\n<li><b>cbff0b5e-96e3-4201-91d0-51304cee2605:</b> 00 (0%) VAT</li>\r\n<li><b>7befe0fc-7131-4b15-9fe6-ca4b9280b63c:</b> 01 (6%) VAT</li>\r\n<li><b>647ed17b-fb6f-4772-baf5-928de98f4db1:</b> 02 (12%) VAT</li>\r\n<li><b>8424d909-78b9-483c-9b1d-4584fb537846:</b> 03 (21%) VAT</li>\r\n<li><b>cc9b638f-3b54-44c8-91e5-83d337ae6591:</b> NA</li>\r\n</ul>\r\n<strong>The Netherlands:</strong><ul>\r\n<li><b>fb145f3f-c866-4322-9169-8d8219d40e8a:</b> 00 (0%) VAT</li>\r\n<li><b>3aa951e7-f307-4902-b315-b764eb81d211:</b> 02 (9%) VAT</li>\r\n<li><b>aeb8b26c-00b1-4c6a-9cf2-bc1c71d89196:</b> 03 (21%) VAT</li>\r\n<li><b>a29f353e-5549-460a-97cb-70a607b28581:</b> NA</li>\r\n</ul>\r\n<strong>Luxembourg:</strong><ul>\r\n<li><b>1693aca4-a715-4543-be5d-64f0210f0078:</b> 00 (0%) VAT</li>\r\n<li><b>03120fb9-18ea-43a1-9119-1af511895e28:</b> 01 (3%) VAT</li>\r\n<li><b>3f3556ee-6afb-43d1-9545-d309087ac461:</b> 02 (8%) VAT</li>\r\n<li><b>d5b9db32-49d7-4929-9e60-dec7b00c2e2f:</b> 03 (14%) VAT</li>\r\n<li><b>e701b521-2ff0-4176-9533-3e297d52809e:</b> 04 (17%) VAT</li>\r\n<li><b>ea73a071-18dd-4964-8fd7-fe58ff782c2c:</b> NA</li>\r\n</ul>",
            "format": "uuid",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "The sorting position. Lowest is shown first.",
            "format": "int32",
            "nullable": true
          },
          "inputEntry": {
            "$ref": "#/components/schemas/v1.JournalVatCategoryInputType"
          },
          "inputCorrection": {
            "$ref": "#/components/schemas/v1.JournalVatCategoryInputType"
          },
          "commentType": {
            "$ref": "#/components/schemas/v1.JournalVatCategoryCommentType"
          },
          "accountingGeneralLedger": {
            "type": "string",
            "description": "The accounting general ledger number. Must be empty or fully numeric.",
            "nullable": true
          },
          "accountingAnalytical1": {
            "type": "string",
            "description": "The accounting analytical 1. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical2": {
            "type": "string",
            "description": "The accounting analytical 2. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical3": {
            "type": "string",
            "description": "The accounting analytical 3. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical4": {
            "type": "string",
            "description": "The accounting analytical 4. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical5": {
            "type": "string",
            "description": "The accounting analytical 5. Function depends on the accounting system.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "If a property is set null or a property is missing then we assume that this property must keep its original value."
      },
      "v1.JournalVatCategoryCommentType": {
        "enum": [
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The comment visibility.<ul>\r\n<li><b>1:</b> Not visible</li>\r\n<li><b>2:</b> Optional</li>\r\n<li><b>3:</b> Required</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.JournalVatCategoryInputType": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "type": "integer",
        "description": "The input visibility.<ul>\r\n<li><b>1:</b> Not visible</li>\r\n<li><b>2:</b> Always visible</li>\r\n<li><b>3:</b> Only positive</li>\r\n<li><b>4:</b> Only negative</li>\r\n<li><b>5:</b> Warning on positive</li>\r\n<li><b>6:</b> Warning on negative</li>\r\n<li><b>7:</b> Always warning</li>\r\n</ul>",
        "format": "int32"
      },
      "v1.PeppolInboundDocument": {
        "title": "Peppol inbound document",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The document ID.",
            "format": "uuid",
            "nullable": true
          },
          "internalNumber": {
            "type": "integer",
            "description": "The internal number.",
            "format": "int32"
          },
          "peppolSenderScheme": {
            "type": "string",
            "description": "The Peppol sender scheme.",
            "nullable": true
          },
          "peppolSenderID": {
            "type": "string",
            "description": "The Peppol sender ID.",
            "nullable": true
          },
          "peppolReceiverScheme": {
            "type": "string",
            "description": "The Peppol receiver scheme.",
            "nullable": true
          },
          "peppolReceiverID": {
            "type": "string",
            "description": "The Peppol receiver ID.",
            "nullable": true
          },
          "peppolC1CountryCode": {
            "type": "string",
            "description": "The Peppol C1 country code. The country code where the sending party is registered.",
            "nullable": true
          },
          "peppolC2Timestamp": {
            "type": "string",
            "description": "The Peppol C2 timestamp. The moment the access point of the sending party tried to send the document over Peppol.",
            "format": "date-time",
            "nullable": true
          },
          "peppolC2SeatID": {
            "type": "string",
            "description": "The Peppol C2 seat ID. The ID of the sending access point.",
            "nullable": true
          },
          "peppolC2MessageID": {
            "type": "string",
            "description": "The Peppol C2 message ID. The ID the sending access point has given to the message sent over Peppol",
            "nullable": true
          },
          "peppolC3IncomingUniqueID": {
            "type": "string",
            "description": "The Peppol C3 incoming unique ID. The internal ID the receiving access point (Scrada) has given to the received message.",
            "format": "uuid",
            "nullable": true
          },
          "peppolC3MessageID": {
            "type": "string",
            "description": "The Peppol C3 message ID. The ID the receiving access point (Scrada) has given to the received message and has confirmed to the sending access point as message ID.",
            "nullable": true
          },
          "peppolC3Timestamp": {
            "type": "string",
            "description": "The Peppol C3 timestamp. The moment the message was received by the receiving access point (Scrada).",
            "format": "date-time",
            "nullable": true
          },
          "peppolConversationID": {
            "type": "string",
            "description": "The Peppol conversation ID. The ID of the receiving access point (Scrada)",
            "nullable": true
          },
          "peppolSbdhInstanceID": {
            "type": "string",
            "description": "The Peppol SBDH instance ID.",
            "nullable": true
          },
          "peppolProcessScheme": {
            "type": "string",
            "description": "The Peppol process scheme.",
            "nullable": true
          },
          "peppolProcessValue": {
            "type": "string",
            "description": "The Peppol process value.",
            "nullable": true
          },
          "peppolDocumentTypeScheme": {
            "type": "string",
            "description": "The Peppol document type scheme.",
            "nullable": true
          },
          "peppolDocumentTypeValue": {
            "type": "string",
            "description": "The Peppol document type value.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.PeppolOnlyInvoice": {
        "title": "Invoice",
        "required": [
          "customer",
          "invoiceDate",
          "lines",
          "number",
          "supplier",
          "totalExclVat",
          "totalInclVat",
          "totalVat",
          "vatTotals"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The internal ID of the invoice in Scrada.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "number": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string",
            "description": "The invoice number."
          },
          "externalReference": {
            "type": "string",
            "description": "The reference you give to the invoice. This is not required. This is not used for Peppol but is used in the portal of Scrada and in the webhooks.",
            "nullable": true
          },
          "creditInvoice": {
            "type": "boolean",
            "description": "The invoice is a credit invoice. Default value is false.",
            "nullable": true
          },
          "isInclVat": {
            "type": "boolean",
            "description": "The invoice is including VAT. Default value is false.",
            "nullable": true
          },
          "invoiceReference": {
            "maxLength": 250,
            "type": "string",
            "description": "The invoice or credit note to which this document refers. This is not required. For example, in the case of a credit note, this is the invoice number credited by the credit note.",
            "nullable": true
          },
          "invoiceDate": {
            "type": "string",
            "description": "The invoice date.",
            "format": "date"
          },
          "invoiceExpiryDate": {
            "type": "string",
            "description": "The invoice expiry date.",
            "format": "date",
            "nullable": true
          },
          "buyerReference": {
            "type": "string",
            "description": "The buyer's reference.",
            "nullable": true
          },
          "purchaseOrderReference": {
            "type": "string",
            "description": "The purchase order reference.",
            "nullable": true
          },
          "salesOrderReference": {
            "type": "string",
            "description": "The sales order reference.",
            "nullable": true
          },
          "supplier": {
            "$ref": "#/components/schemas/v1.PeppolOnlyInvoiceParty"
          },
          "customer": {
            "$ref": "#/components/schemas/v1.PeppolOnlyInvoiceParty"
          },
          "delivery": {
            "$ref": "#/components/schemas/v1.SalesInvoiceDelivery"
          },
          "totalExclVat": {
            "type": "number",
            "description": "The total invoice amount excluding VAT. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "totalInclVat": {
            "type": "number",
            "description": "The total invoice amount including VAT. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "totalVat": {
            "type": "number",
            "description": "The total invoice VAT amount. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "currency": {
            "maxLength": 3,
            "type": "string",
            "description": "The currency of the invoice according to ISO 4217. Default value is EUR.",
            "nullable": true
          },
          "payableRoundingAmount": {
            "type": "number",
            "description": "The payable rounding amount. The amount to be added to the invoice total to round the amount to be paid. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The invoice comment.",
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.PeppolOnlyInvoiceLine"
            },
            "description": "The invoice lines."
          },
          "vatTotals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.SalesInvoiceVatTotal"
            },
            "description": "The VAT totals."
          },
          "paymentTerms": {
            "type": "string",
            "description": "The payment terms for the invoice. Example: Net within 30 days.",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.InvoicePaymentMethod"
            },
            "description": "The payment methods."
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.InvoiceAttachment"
            },
            "description": "The attachments related to the invoice.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.PeppolOnlyInvoiceLine": {
        "title": "Invoice line",
        "required": [
          "item",
          "itemName",
          "lineNumber",
          "quantity",
          "vatPercentage",
          "vatType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The invoice line ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "lineNumber": {
            "type": "string",
            "description": "The line number, must be unique for each line."
          },
          "itemCodeSeller": {
            "type": "string",
            "description": "The seller's item code.",
            "nullable": true
          },
          "itemCodeBuyer": {
            "type": "string",
            "description": "The buyer's item code.",
            "nullable": true
          },
          "itemName": {
            "type": "string",
            "description": "The item name or line description."
          },
          "itemOriginCountryCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The shipping country of origin according to ISO 3166-1 alpha 2.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of items. Default value is 0. Max precision is 4.",
            "format": "double"
          },
          "unitType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceLineUomType"
          },
          "itemExclVat": {
            "type": "number",
            "description": "The item price excluding VAT, required when `isInclVat` is set to false. Default is 0. Max precision is 4.",
            "format": "double",
            "nullable": true
          },
          "itemInclVat": {
            "type": "number",
            "description": "The item price including VAT, required when `isInclVat` is set to true. Default is 0. Max precision is 4.",
            "format": "double",
            "nullable": true
          },
          "vatType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceLineVatType"
          },
          "vatPercentage": {
            "type": "number",
            "description": "The VAT percentage. Can be 0% for VAT excluded items. Default is 0. Max precision is 2.",
            "format": "double"
          },
          "totalDiscountExclVat": {
            "type": "number",
            "description": "The total discount for the entire line (not per product) excluding VAT, can be used when `isInclVat` is set to false. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalDiscountInclVat": {
            "type": "number",
            "description": "The total discount for the entire line (not per product) including VAT, can be used when `isInclVat` is set to true. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalExclVat": {
            "type": "number",
            "description": "The total line price excluding VAT, should be equal to (`quantity` * `itemExclVat`) - `totalDiscountExclVat`, required when `isInclVat` is set to false. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalInclVat": {
            "type": "number",
            "description": "The total line price excluding VAT, should be equal to (`quantity` * `itemInclVat`) - `totalDiscountInclVat`, required when `isInclVat` is set to true. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "invoicePeriodStartDate": {
            "type": "string",
            "description": "The start date of the invoice line period.",
            "format": "date",
            "nullable": true
          },
          "invoicePeriodEndDate": {
            "type": "string",
            "description": "The end date of the invoice line period.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.PeppolOnlyInvoiceParty": {
        "title": "Invoice party",
        "required": [
          "address",
          "name"
        ],
        "type": "object",
        "properties": {
          "peppolID": {
            "type": "string",
            "description": "The Peppol ID of the party. Example: 0208:0793904121",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The party identification code.",
            "nullable": true
          },
          "languageCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The party language code according to ISO 639-1.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The party name."
          },
          "address": {
            "$ref": "#/components/schemas/v1.Address"
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "description": "The party phone number.",
            "nullable": true
          },
          "email": {
            "maxLength": 250,
            "type": "string",
            "description": "The party email address.",
            "nullable": true
          },
          "invoiceEmail": {
            "maxLength": 250,
            "type": "string",
            "description": "The party invoice email address.",
            "nullable": true
          },
          "contact": {
            "type": "string",
            "description": "The party contact name.",
            "nullable": true
          },
          "vatStatus": {
            "$ref": "#/components/schemas/v1.CompanyVatStatus"
          },
          "taxNumberType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceTaxNumberType"
          },
          "taxNumber": {
            "type": "string",
            "description": "The party tax number according to the `taxNumberType`.",
            "nullable": true
          },
          "legalPersonRegister": {
            "type": "string",
            "description": "The legal person register details of the party, only applicable for the supplier party. Example: 'RPR Gent, Afdeling Oudenaarde'.",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "description": "The party VAT number. This must be a valid VAT number!",
            "nullable": true
          },
          "glnNumber": {
            "type": "string",
            "description": "The party GLN number. This must be a valid GLN number!",
            "nullable": true
          },
          "extraIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.ExtraIdentifier"
            },
            "description": "Extra identifiers for the party.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.PeppolOutboundDocumentStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The document ID.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The createdOn timestamp.",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "The external document reference. This is the extern reference that was set when sending the document to Scrada.",
            "nullable": true
          },
          "peppolSenderID": {
            "type": "string",
            "description": "The Peppol sender ID.",
            "nullable": true
          },
          "peppolReceiverID": {
            "type": "string",
            "description": "The Peppol receiver ID.",
            "nullable": true
          },
          "peppolC1CountryCode": {
            "type": "string",
            "description": "The Peppol C1 country code. The country code the sending party is registered.",
            "nullable": true
          },
          "peppolC2Timestamp": {
            "type": "string",
            "description": "The Peppol corner-2 timestamp. The time the sending access point (Scrada) has sent the document to the receiving access point.",
            "nullable": true
          },
          "peppolC2SeatID": {
            "type": "string",
            "description": "The Peppol corner-2 seat ID. The ID of the sending access point (Scrada)",
            "nullable": true
          },
          "peppolC2MessageID": {
            "type": "string",
            "description": "The Peppol corner-2 message ID. The ID the sending access point (Scrada) has given to the message send over Peppol to the receiving access point.",
            "nullable": true
          },
          "peppolC3MessageID": {
            "type": "string",
            "description": "The Peppol corner-3 message ID. The ID the receiving access point has given to the received message.",
            "nullable": true
          },
          "peppolC3Timestamp": {
            "type": "string",
            "description": "The Peppol corner-3 timestamp. The time the message is received by the receiving access point.",
            "nullable": true
          },
          "peppolC3SeatID": {
            "type": "string",
            "description": "The Peppol corner-3 seat ID. The ID of the receiving access point.",
            "nullable": true
          },
          "peppolConversationID": {
            "type": "string",
            "description": "The Peppol conversation ID.",
            "nullable": true
          },
          "peppolSbdhInstanceID": {
            "type": "string",
            "description": "The Peppol SBDH instance ID.",
            "nullable": true
          },
          "peppolDocumentTypeScheme": {
            "type": "string",
            "description": "The Peppol document type scheme.",
            "nullable": true
          },
          "peppolDocumentTypeValue": {
            "type": "string",
            "description": "The Peppol document type value.",
            "nullable": true
          },
          "peppolProcessScheme": {
            "type": "string",
            "description": "The Peppol process scheme.",
            "nullable": true
          },
          "peppolProcessValue": {
            "type": "string",
            "description": "The Peppol process value.",
            "nullable": true
          },
          "salesInvoiceID": {
            "type": "string",
            "description": "The sales invoice ID. This is only set if a JSON sales invoice is sent to Scrada. This is the internal ID of the sales invoice in Scrada. This is NULL if a Peppol document is sent to Scrada to be put on Peppol.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The document status. <br/>\r\nStatus values that are used in a Peppol Only subscription and Full subscription:\r\n<ul>\r\n<li><b>Created</b>: A new document is sent to Scrada to be uploaded to Peppol</li>\r\n<li><b>Processed</b>: When a document is successful uploaded to Peppol</li>\r\n<li><b>Retry</b>: When there is an issue uploading to Peppol because maybe the other access point is temporary down. Scrada will retry 10 times. In the property `ErrorMessage` you can find more information why Scrada does a retry.</li>\r\n<li><b>Canceled</b>: When a document was canceled to be uploaded to Peppol. This can only be done using the GUI of Scrada. Nothing is done with the document. </li>\r\n<li><b>Error</b>: There is an error sending to Peppol. Nothing is done with the document. Check error message for more details.</li>\r\n<li><b>Error already sent</b>: This can happen if a document is sent by Scrada to an other access point and the other access point rejects the document or there was a timeout and then if Scrada retries to send the document, Scrada receives message from the other access pont that the document was already processed. Can also happen if document is sent again using the GUI of Scrada. Nothing is done with the document.</li>\r\n<li><b>Error not on Peppol</b>: The receiverID is not registered on Peppol. Nothing is done with the document. </li>\r\n</ul>\r\nStatus vales that are only used in case of a full subscription:\r\n<ul>\r\n<li><b>Processed - by email</b>: The document is sent successfully by email to the receiver.</li>\r\n<li><b>Blocked - send by email</b>: A receiverID is in the blocked list for sending to Peppol in Scrada and an email of the receiver is provided. The document will be sent by email to the receiver.</li>\r\n<li><b>Not on Peppol - send by email</b>: The receiverID is not registered on Peppol. The document will be sent by email to the receiver.</li>\r\n<li><b>Error - send by email</b>: There was an error sending the document to Peppol. The document will be sent by email to the receiver.</li>\r\n<li><b>Blocked</b>: A receiverID is in the blocked list for sending to Peppol in Scrada and no email of the receiver is provided. Nothing is done with the document.</li>\r\n<li><b>Error email</b>: There was an error when sending the document by email to the receiver. Nothing is done with the document.</li>\r\n</ul>\r\n\r\n",
            "nullable": true
          },
          "attempt": {
            "type": "integer",
            "description": "The number of attempts done to send the document.",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.PeppolParticipant": {
        "title": "Peppol participant",
        "required": [
          "documentTypes",
          "participantIdentifier"
        ],
        "type": "object",
        "properties": {
          "participantIdentifier": {
            "$ref": "#/components/schemas/v1.PeppolParticipantIdentifier"
          },
          "businessEntity": {
            "$ref": "#/components/schemas/v1.PeppolParticipantBusinessEntity"
          },
          "documentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.PeppolParticipantDocumentType"
            },
            "description": "The accepted document types.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.PeppolParticipantBusinessEntity": {
        "title": "Business information",
        "required": [
          "countryCode",
          "languageCode",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The participant business name.",
            "nullable": true
          },
          "languageCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The participant language code according the ISO 639-1.",
            "nullable": true
          },
          "countryCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The participant country code according the ISO 3166-1 alpha 2.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.PeppolParticipantDocumentType": {
        "title": "The Peppol document type",
        "required": [
          "processIdentifier",
          "scheme",
          "value"
        ],
        "type": "object",
        "properties": {
          "scheme": {
            "type": "string",
            "description": "The document type scheme. Sample: busdox-docid-qns",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The document type value. Document types can be found at https://docs.peppol.eu/edelivery/codelists/. Sample for a BIS 3 Invoice: urn:oasis:names:specification:ubl:schema:xsd:Invoice-2::Invoice##urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0::2.1",
            "nullable": true
          },
          "processIdentifier": {
            "$ref": "#/components/schemas/v1.PeppolParticipantProcess"
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.PeppolParticipantIdentifier": {
        "title": "Peppol participant identifier",
        "required": [
          "id",
          "scheme"
        ],
        "type": "object",
        "properties": {
          "scheme": {
            "type": "string",
            "description": "The participant identifier scheme. Sample: iso6523-actorid-upis",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "The participant identifier exists of 2 parts separated by a colon. The first part is the type (See Participant Identifier Scheme at https://docs.peppol.eu/edelivery/codelists/) and the second part is the value. Sample: 0208:0793904121 . The type 0208 is the CBE number of Belgium and the type 9925 is a Belgium VAT number.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.PeppolParticipantProcess": {
        "title": "The Peppol process type",
        "required": [
          "scheme",
          "value"
        ],
        "type": "object",
        "properties": {
          "scheme": {
            "type": "string",
            "description": "The process type scheme. Sample: cenbii-procid-ubl",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The process type value. Sample: urn:fdc:peppol.eu:2017:poacc:billing:01:1.0",
            "nullable": true
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.PeppolParticipantProcessEndpoint"
            },
            "description": "The access point endpoints.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.PeppolParticipantProcessEndpoint": {
        "type": "object",
        "properties": {
          "referenceAddress": {
            "type": "string",
            "description": "The endpoint URL.",
            "nullable": true,
            "readOnly": true
          },
          "technicalContactUrl": {
            "type": "string",
            "description": "The technical contact information URL.",
            "nullable": true,
            "readOnly": true
          },
          "technicalInformationUrl": {
            "type": "string",
            "description": "The technical information URL.",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false,
        "readOnly": true
      },
      "v1.PeppolParticipantRegistration": {
        "title": "Peppol participant registration",
        "required": [
          "businessEntity",
          "documentTypes",
          "participantIdentifier"
        ],
        "type": "object",
        "properties": {
          "participantIdentifier": {
            "$ref": "#/components/schemas/v1.PeppolParticipantIdentifier"
          },
          "businessEntity": {
            "$ref": "#/components/schemas/v1.PeppolParticipantBusinessEntity"
          },
          "documentTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.PeppolParticipantDocumentType"
            },
            "description": "The accepted document types.",
            "nullable": true
          },
          "migrationKey": {
            "type": "string",
            "description": "Optional migration key to transfer the Peppol registration from an other Peppol access point to Scrada Peppol access point. If you are already registered at an other Peppol access point and you want to register at Scrada, you have to deregister at the other access point or request a migration key from them. The advantage of a migration key is that you can always continue to receive documents.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.PeppolSupportedParticipant": {
        "title": "Peppol participant information",
        "type": "object",
        "properties": {
          "registered": {
            "type": "boolean",
            "description": "Indicates if the participant is registered on Peppol with any Peppol identifier."
          },
          "supportInvoice": {
            "type": "boolean",
            "description": "Indicates if an invoice can be sent using the Scrada JSON API."
          },
          "supportCreditInvoice": {
            "type": "boolean",
            "description": "Indicates if a credit invoice can be sent using the Scrada JSON API."
          },
          "supportSelfBillingInvoice": {
            "type": "boolean",
            "description": "Indicates if a self-billing invoice can be sent using the Scrada JSON API."
          },
          "supportSelfBillingCreditInvoice": {
            "type": "boolean",
            "description": "Indicates if a self-billing credit invoice can be sent using the Scrada JSON API."
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "v1.SalesInvoice": {
        "title": "Sales invoice",
        "required": [
          "bookYear",
          "customer",
          "invoiceDate",
          "journal",
          "lines",
          "number",
          "totalExclVat",
          "totalInclVat",
          "totalVat",
          "vatTotals"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The internal ID of the invoice in Scrada.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "bookYear": {
            "maxLength": 200,
            "type": "string",
            "description": "The book year in which the invoice is created. This is required but can be an empty string."
          },
          "journal": {
            "maxLength": 200,
            "type": "string",
            "description": "The journal name or code.  This is required but can be an empty string."
          },
          "number": {
            "maxLength": 250,
            "minLength": 1,
            "type": "string",
            "description": "The invoice number. Can contain alphanumeric characters."
          },
          "externalReference": {
            "type": "string",
            "description": "The reference you give to the invoice. This is not required. This is not used for Peppol but is used in the portal of Scrada and in the webhooks.",
            "nullable": true
          },
          "creditInvoice": {
            "type": "boolean",
            "description": "The invoice is a credit invoice. Default value is false.",
            "nullable": true
          },
          "isInclVat": {
            "type": "boolean",
            "description": "The invoice pricing is including VAT. Default value is false. When set to true the including VAT pricing on line level are required and excluding VAT pricing must remain 'null', vise versa when set to false.",
            "nullable": true
          },
          "invoiceReference": {
            "maxLength": 250,
            "type": "string",
            "description": "The invoice or credit note to which this document refers. This is not required. For example, in the case of a credit note, this is the invoice number credited by the credit note.",
            "nullable": true
          },
          "invoiceDate": {
            "type": "string",
            "description": "The invoice date.",
            "format": "date"
          },
          "invoiceExpiryDate": {
            "type": "string",
            "description": "The invoice expiry date.",
            "format": "date",
            "nullable": true
          },
          "alreadySendToCustomer": {
            "type": "boolean",
            "description": "Indicator if the invoice is already sent to the customer. If not (by default) Scrada can send the invoice based on settings in the company.",
            "nullable": true
          },
          "buyerReference": {
            "type": "string",
            "description": "The buyer's reference.",
            "nullable": true
          },
          "purchaseOrderReference": {
            "type": "string",
            "description": "The purchase order reference.",
            "nullable": true
          },
          "salesOrderReference": {
            "type": "string",
            "description": "The sales order reference.",
            "nullable": true
          },
          "customer": {
            "$ref": "#/components/schemas/v1.SalesInvoiceCustomer"
          },
          "delivery": {
            "$ref": "#/components/schemas/v1.SalesInvoiceDelivery"
          },
          "totalExclVat": {
            "type": "number",
            "description": "The total invoice amount excluding VAT. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "totalInclVat": {
            "type": "number",
            "description": "The total invoice amount including VAT. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "totalVat": {
            "type": "number",
            "description": "The total invoice VAT amount. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "currency": {
            "maxLength": 3,
            "type": "string",
            "description": "The currency of the invoice according to ISO 4217. Default value is EUR.",
            "nullable": true
          },
          "payableRoundingAmount": {
            "type": "number",
            "description": "The payable rounding amount. The amount to be added to the invoice total to round the amount to be paid. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "The invoice comment.",
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.SalesInvoiceLine"
            },
            "description": "The invoice lines."
          },
          "vatTotals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.SalesInvoiceVatTotal"
            },
            "description": "The VAT totals."
          },
          "paymentTerms": {
            "type": "string",
            "description": "The payment terms for the invoice. Example: Net within 30 days.",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.InvoicePaymentMethod"
            },
            "description": "The payment methods."
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.InvoiceAttachment"
            },
            "description": "The attachments related to the invoice.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.SalesInvoiceCustomer": {
        "title": "Sales invoice customer",
        "required": [
          "address",
          "name"
        ],
        "type": "object",
        "properties": {
          "peppolID": {
            "type": "string",
            "description": "The Peppol ID of the customer. If this is set then the invoice is sent to this ID on peppol if this ID is registered on Peppol and in Scrada it is configured to send invoice over Peppol. Example: 0208:0793904121",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The customer identification code.",
            "nullable": true
          },
          "accountingCode": {
            "type": "string",
            "description": "The customer identification code in the accounting system. This code is used as reference key to this party.",
            "nullable": true
          },
          "languageCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The customer language code according to ISO 639-1.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The customer name."
          },
          "address": {
            "$ref": "#/components/schemas/v1.Address"
          },
          "phone": {
            "maxLength": 50,
            "type": "string",
            "description": "The customer phone number.",
            "nullable": true
          },
          "email": {
            "maxLength": 250,
            "type": "string",
            "description": "The customer email address.",
            "nullable": true
          },
          "invoiceEmail": {
            "maxLength": 250,
            "type": "string",
            "description": "The customer invoice email address.",
            "nullable": true
          },
          "contact": {
            "type": "string",
            "description": "The customer contact name.",
            "nullable": true
          },
          "taxNumberType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceTaxNumberType"
          },
          "taxNumber": {
            "type": "string",
            "description": "The customer tax number according to the `taxNumberType`.",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "description": "The customer VAT number. This must be a valid VAT number!",
            "nullable": true
          },
          "glnNumber": {
            "type": "string",
            "description": "The customer GLN number. This must be a valid GLN number!",
            "nullable": true
          },
          "extraIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/v1.ExtraIdentifier"
            },
            "description": "Extra identifiers for the customer.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.SalesInvoiceDelivery": {
        "title": "Sales invoice delivery",
        "type": "object",
        "properties": {
          "deliveryDate": {
            "type": "string",
            "description": "The actual delivery date.",
            "format": "date",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/v1.Address"
          }
        },
        "additionalProperties": false
      },
      "v1.SalesInvoiceLine": {
        "title": "Sales invoice line",
        "required": [
          "item",
          "itemName",
          "lineNumber",
          "quantity",
          "vatPercentage",
          "vatType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The invoice line ID.",
            "format": "uuid",
            "nullable": true,
            "readOnly": true
          },
          "lineNumber": {
            "type": "string",
            "description": "The line number, must be unique for each line."
          },
          "itemCodeSeller": {
            "type": "string",
            "description": "The seller's item code.",
            "nullable": true
          },
          "itemCodeBuyer": {
            "type": "string",
            "description": "The buyer's item code.",
            "nullable": true
          },
          "itemName": {
            "type": "string",
            "description": "The item name or line description."
          },
          "itemGroup": {
            "type": "string",
            "description": "The item group name.",
            "nullable": true
          },
          "itemOriginCountryCode": {
            "maxLength": 2,
            "type": "string",
            "description": "The shipping country of origin according to ISO 3166-1 alpha 2.",
            "nullable": true
          },
          "accountingGeneralLedger": {
            "type": "string",
            "description": "The accounting general ledger number. Must be empty or fully numeric.",
            "nullable": true
          },
          "accountingAnalytical1": {
            "type": "string",
            "description": "The accounting analytical 1. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical2": {
            "type": "string",
            "description": "The accounting analytical 2. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical3": {
            "type": "string",
            "description": "The accounting analytical 3. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical4": {
            "type": "string",
            "description": "The accounting analytical 4. Function depends on the accounting system.",
            "nullable": true
          },
          "accountingAnalytical5": {
            "type": "string",
            "description": "The accounting analytical 5. Function depends on the accounting system.",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "The quantity of items. Default value is 0. Max precision is 4.",
            "format": "double"
          },
          "unitType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceLineUomType"
          },
          "itemExclVat": {
            "type": "number",
            "description": "The item price excluding VAT, required when `isInclVat` is set to false. Default is 0. Max precision is 4.",
            "format": "double",
            "nullable": true
          },
          "itemInclVat": {
            "type": "number",
            "description": "The item price including VAT, required when `isInclVat` is set to true. Default is 0. Max precision is 4.",
            "format": "double",
            "nullable": true
          },
          "vatType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceLineVatType"
          },
          "vatPercentage": {
            "type": "number",
            "description": "The VAT percentage. Can be 0% for VAT excluded items. Default is 0. Max precision is 2.",
            "format": "double"
          },
          "totalDiscountExclVat": {
            "type": "number",
            "description": "The total discount for the entire line (not per product) excluding VAT, can be used when `isInclVat` is set to false. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalDiscountInclVat": {
            "type": "number",
            "description": "The total discount for the entire line (not per product) including VAT, can be used when `isInclVat` is set to true. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalExclVat": {
            "type": "number",
            "description": "The total line price excluding VAT, should be equal to (`quantity` * `itemExclVat`) - `totalDiscountExclVat`, required when `isInclVat` is set to false. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "totalInclVat": {
            "type": "number",
            "description": "The total line price excluding VAT, should be equal to (`quantity` * `itemInclVat`) - `totalDiscountInclVat`, required when `isInclVat` is set to true. Default is 0. Max precision is 2.",
            "format": "double",
            "nullable": true
          },
          "invoicePeriodStartDate": {
            "type": "string",
            "description": "The start date of the invoice line period.",
            "format": "date",
            "nullable": true
          },
          "invoicePeriodEndDate": {
            "type": "string",
            "description": "The end date of the invoice line period.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.SalesInvoiceSendStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The sales invoice ID.",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "The createdOn timestamp.",
            "nullable": true
          },
          "externalReference": {
            "type": "string",
            "description": "The external document reference. This is the extern reference that was set when sending the sales invoice to Scrada.",
            "nullable": true
          },
          "peppolSenderID": {
            "type": "string",
            "description": "The Peppol sender ID.",
            "nullable": true
          },
          "peppolReceiverID": {
            "type": "string",
            "description": "The Peppol receiver ID.",
            "nullable": true
          },
          "peppolC1CountryCode": {
            "type": "string",
            "description": "The Peppol C1 country code. The country code the sending party is registered.",
            "nullable": true
          },
          "peppolC2Timestamp": {
            "type": "string",
            "description": "The Peppol corner-2 timestamp. The timestamp the message was sent over Peppol by the sending access point (Scrada)",
            "nullable": true
          },
          "peppolC2SeatID": {
            "type": "string",
            "description": "The Peppol corner-2 seat ID. The ID of the sending access point (Scrada)",
            "nullable": true
          },
          "peppolC2MessageID": {
            "type": "string",
            "description": "The Peppol corner-2 message ID. The ID the sending access point (Scrada) has given to the message.",
            "nullable": true
          },
          "peppolC3MessageID": {
            "type": "string",
            "description": "The Peppol corner-3 message ID. The ID the receiving access point has given to the message.",
            "nullable": true
          },
          "peppolC3Timestamp": {
            "type": "string",
            "description": "The Peppol corner-3 timestamp. The time the message was received by the receiving access point.",
            "nullable": true
          },
          "peppolC3SeatID": {
            "type": "string",
            "description": "The Peppol corner-3 seat ID. The ID of the receiving access point.",
            "nullable": true
          },
          "peppolConversationID": {
            "type": "string",
            "description": "The Peppol conversation ID.",
            "nullable": true
          },
          "peppolSbdhInstanceID": {
            "type": "string",
            "description": "The Peppol SBDH instance ID.",
            "nullable": true
          },
          "peppolDocumentTypeScheme": {
            "type": "string",
            "description": "The Peppol document type scheme.",
            "nullable": true
          },
          "peppolDocumentTypeValue": {
            "type": "string",
            "description": "The Peppol document type value.",
            "nullable": true
          },
          "peppolProcessScheme": {
            "type": "string",
            "description": "The Peppol process scheme.",
            "nullable": true
          },
          "peppolProcessValue": {
            "type": "string",
            "description": "The Peppol process value.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The status. <br/>\r\nStatus values that are used in a Peppol Only subscription and Full subscription:\r\n<ul>\r\n<li><b>Created</b>: A new document is sent to Scrada to be uploaded to Peppo or send by email</li>\r\n<li><b>Processed</b>: When a document is successful uploaded to Peppol or send by email</li>\r\n<li><b>Retry</b>: When there is an issue uploading to Peppol because maybe the other access point is temporary down or an issue sending the email. Scrada will retry 10 times. In the property `ErrorMessage` you can find more information why Scrada does a retry.</li>\r\n<li><b>Canceled</b>: When a document was canceled to be uploaded to Peppol or send by email. This can only be done using the GUI of Scrada. Nothing is done with the document. </li>\r\n<li><b>Error</b>: There is an error sending to Peppol or by email. Nothing is done with the document. Check error message for more details.</li>\r\n<li><b>Error already sent</b>: This can happen if a document is sent by Scrada to an other access point and the other access point rejects the document or there was a timeout and then if Scrada retries to send the document, Scrada receives message from the other access pont that the document was already processed. Can also happen if document is sent again using the GUI of Scrada. Nothing is done with the document.</li>\r\n<li><b>Error not on Peppol</b>: The receiverID is not registered on Peppol. Nothing is done with the document. </li>\r\n</ul>\r\nStatus vales that are only used in case of a full subscription:\r\n<ul>\r\n<li><b>Blocked - send by email</b>: A receiverID is in the blocked list for sending to Peppol in Scrada and an email of the receiver is provided. The document will be sent by email to the receiver.</li>\r\n<li><b>Not on Peppol - send by email</b>: The receiverID is not registered on Peppol. The document will be sent by email to the receiver.</li>\r\n<li><b>Error - send by email</b>: There was an error sending the document to Peppol. The document will be sent by email to the receiver.</li>\r\n<li><b>Blocked</b>: A receiverID is in the blocked list for sending to Peppol in Scrada and no email of the receiver is provided. Nothing is done with the document.</li>\r\n<li><b>None</b>: This can happen if nothing is configured in Scrada how to send the sales invoice to the customer.\r\n</ul>\r\n\r\n",
            "nullable": true
          },
          "attempt": {
            "type": "integer",
            "description": "The number of attempts done to send the document.",
            "format": "int32"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message.",
            "nullable": true
          },
          "peppolOutboundDocumentID": {
            "type": "string",
            "description": "The Scrada peppol document ID. This is only set if the sales invoice is sent over Peppol This is NULL if send by email.",
            "nullable": true
          },
          "sendMethod": {
            "type": "string",
            "description": "The way Scrada tries to send the sales invoice to the customer. The possible values are:\r\n<ul>\r\n<li><b>Peppol</b>: The sales invoice is sent or trying to send over Peppol.</li>\r\n<li><b>Email</b>: The sales invoice is sent or trying to send over email.</li>\r\n<li><b>Peppol and email</b>: The sales invoice is sent by Peppol and a copy is sent by email.</li>\r\n<li><b>None</b>: There was no configuration how to send the invoice to the customer.</li>\r\n</ul>\r\n",
            "nullable": true
          },
          "receiverEmailAddress": {
            "type": "string",
            "description": "The email address that is used for email",
            "nullable": true
          },
          "receiverEmailTime": {
            "type": "string",
            "description": "The time the system tried to send the email",
            "nullable": true
          },
          "receiverEmailStatus": {
            "type": "string",
            "description": "The status of the email:\r\n<ul>\r\n<li><b>Not sent</b>: No email is sent.</li>\r\n<li><b>Successfully sent</b>: The email is successfully sent.</li>\r\n<li><b>Error sending</b>: There was an error sending the email.</li>\r\n</ul>\r\n",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "v1.SalesInvoiceVatTotal": {
        "title": "Sales invoice VAT total",
        "required": [
          "totalExclVat",
          "totalInclVat",
          "totalVat",
          "vatPercentage",
          "vatType"
        ],
        "type": "object",
        "properties": {
          "vatType": {
            "$ref": "#/components/schemas/v1.CompanyInvoiceLineVatType"
          },
          "vatPercentage": {
            "type": "number",
            "description": "The VAT percentage. Max precision is 2.",
            "format": "double"
          },
          "totalExclVat": {
            "type": "number",
            "description": "The total amount excluding VAT of this VAT total. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "totalVat": {
            "type": "number",
            "description": "The total VAT of this VAT total. Default is 0. Max precision is 2",
            "format": "double"
          },
          "totalInclVat": {
            "type": "number",
            "description": "The total amount including VAT of this VAT total. Default value is 0. Max precision is 2.",
            "format": "double"
          },
          "note": {
            "type": "string",
            "description": "The invoice note. Example: 'Verlegging van heffing', 'Statiegeld'",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "api_key": {
        "type": "apiKey",
        "in": "query"
      }
    }
  },
  "security__notNeeded": [
    {
      "bearer": [ ]
    }
  ]
}