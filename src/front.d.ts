/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/invoices/incoming': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List incoming invoices */
    get: operations['listIncomingInvoices'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/invoices/outgoing': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List outgoing invoices */
    get: operations['listOutgoingInvoices'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/credit-notes/incoming': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List incoming credit notes */
    get: operations['listIncomingCreditNotes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/credit-notes/outgoing': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List outgoing credit notes */
    get: operations['listOutgoingCreditNotes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Document: {
      senderId?: string;
      receiverId?: string;
      /** @enum {string} */
      docType?: 'invoice' | 'creditnote';
      /** @enum {string} */
      direction?: 'incoming' | 'outgoing';
      platformId?: string;
      /** Format: date-time */
      createdAt?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  listIncomingInvoices: {
    parameters: {
      query?: {
        /** @description Number of items to return per page */
        pageSize?: number;
        /** @description Page to retrieve */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of outgoing invoices */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Document'][];
        };
      };
      /** @description Bad Request - Invalid parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - Invalid or missing authentication token */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - An error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listOutgoingInvoices: {
    parameters: {
      query?: {
        /** @description Number of items to return per page */
        pageSize?: number;
        /** @description Page to retrieve */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of outgoing invoices */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Document'][];
        };
      };
      /** @description Bad Request - Invalid parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - Invalid or missing authentication token */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - An error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listIncomingCreditNotes: {
    parameters: {
      query?: {
        /** @description Number of items to return per page */
        pageSize?: number;
        /** @description Page to retrieve */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of outgoing invoices */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Document'][];
        };
      };
      /** @description Bad Request - Invalid parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - Invalid or missing authentication token */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - An error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listOutgoingCreditNotes: {
    parameters: {
      query?: {
        /** @description Number of items to return per page */
        pageSize?: number;
        /** @description Page to retrieve */
        page?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A list of outgoing invoices */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Document'][];
        };
      };
      /** @description Bad Request - Invalid parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized - Invalid or missing authentication token */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error - An error occurred on the server */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
