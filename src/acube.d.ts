/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/credit-notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of CreditNote resources.
         * @description Retrieves the collection of CreditNote resources.
         */
        get: operations["api_credit-notes_get_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credit-notes/downloaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark the documents as downloaded
         * @description This is useful to keep track of the document that have been received by the user.
         */
        post: operations["api_credit-notesdownloaded_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credit-notes/outgoing/ubl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new credit note in UBL format
         * @description Send a credit note in either the original XML format or the JSON transposition.
         *     You must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).
         *
         *     Optionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.
         *     You can retrieve a list of the available validation rules using the API `GET /validation-rules`.
         *     By default the validation rule is autodetected using the latest rule available for the given document.
         */
        post: operations["api_credit_notes_post_outgoing_ubl_collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credit-notes/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a CreditNote resource.
         * @description Retrieves a CreditNote resource.
         */
        get: operations["api_credit-notes_uuid_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credit-notes/{uuid}/print": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the printed version of the document
         * @description You will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.
         */
        get: operations["api_credit-notes_uuidprint_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/credit-notes/{uuid}/source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the original source document
         * @description You can retrieve the original source document in either XML or JSON format.
         */
        get: operations["api_credit-notes_uuidsource_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/despatch-advices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of DespatchAdvice resources.
         * @description Retrieves the collection of DespatchAdvice resources.
         */
        get: operations["api_despatch-advices_get_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/despatch-advices/downloaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark the documents as downloaded
         * @description This is useful to keep track of the document that have been received by the user.
         */
        post: operations["api_despatch-advicesdownloaded_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/despatch-advices/outgoing/ubl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new despatch advice in UBL format
         * @description Send a despatch advice in either the original XML format or the JSON transposition.
         *     You must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).
         *
         *     Optionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.
         *     You can retrieve a list of the available validation rules using the API `GET /validation-rules`.
         *     By default the validation rule is autodetected using the latest rule available for the given document.
         */
        post: operations["api_despatch_advices_post_outgoing_ubl_collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/despatch-advices/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a DespatchAdvice resource.
         * @description Retrieves a DespatchAdvice resource.
         */
        get: operations["api_despatch-advices_uuid_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/despatch-advices/{uuid}/source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the original source document
         * @description You can retrieve the original source document in either XML or JSON format.
         */
        get: operations["api_despatch-advices_uuidsource_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/document-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of DocumentType resources.
         * @description Get the list of supported document types.
         *     For a complete and official list see https://docs.peppol.eu/edelivery/codelists/
         */
        get: operations["api_document-types_get_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of Invoice resources.
         * @description Retrieves the collection of Invoice resources.
         */
        get: operations["api_invoices_get_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/downloaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark the documents as downloaded
         * @description This is useful to keep track of the document that have been received by the user.
         */
        post: operations["api_invoicesdownloaded_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/outgoing/ubl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new invoice in UBL format
         * @description Send a invoice in either the original XML format or the JSON transposition.
         *     You must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).
         *
         *     Optionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.
         *     You can retrieve a list of the available validation rules using the API `GET /validation-rules`.
         *     By default the validation rule is autodetected using the latest rule available for the given document.
         */
        post: operations["api_invoices_post_outgoing_ubl_collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a Invoice resource.
         * @description Retrieves a Invoice resource.
         */
        get: operations["api_invoices_uuid_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{uuid}/print": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the printed version of the document
         * @description You will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.
         */
        get: operations["api_invoices_uuidprint_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{uuid}/source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the original source document
         * @description You can retrieve the original source document in either XML or JSON format.
         */
        get: operations["api_invoices_uuidsource_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of LegalEntity resources.
         * @description Retrieves the collection of LegalEntity resources.
         */
        get: operations["api_legal-entities_get_collection"];
        put?: never;
        /**
         * Creates a LegalEntity resource.
         * @description Creates a LegalEntity resource.
         */
        post: operations["api_legal-entities_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-entities/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a LegalEntity resource.
         * @description Retrieves a LegalEntity resource.
         */
        get: operations["api_legal-entities_uuid_get"];
        /**
         * Replaces the LegalEntity resource.
         * @description Replaces the LegalEntity resource.
         */
        put: operations["api_legal-entities_uuid_put"];
        post?: never;
        /**
         * Removes the LegalEntity resource.
         * @description Removes the LegalEntity resource.
         */
        delete: operations["api_legal-entities_uuid_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-entities/{uuid}/smp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read SMP records
         * @description Read the SMP records for the LegalEntity resource
         */
        get: operations["api_legal-entities_uuidsmp_get"];
        /**
         * Manage SMP records
         * @description Manage the SMP records for the LegalEntity resource
         */
        put: operations["api_legal-entities_uuidsmp_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-entities/{uuid}/transfer-bridge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Transfer Bridge options
         * @description Read the Transfer Bridge options for the LegalEntity resource
         */
        get: operations["api_legal-entities_uuidtransfer-bridge_get"];
        /**
         * Manage Transfer Bridge options
         * @description Manage the Transfer Bridge options for the LegalEntity resource
         */
        put: operations["api_legal-entities_uuidtransfer-bridge_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-entities/{legalEntityUuid}/sub-accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve all sub-accounts for a specific legal entity.
         * @description Retrieves a list of sub-accounts associated with a specific legal entity, identified by its UUID.
         */
        get: operations["api_legal-entities_legalEntityUuidsub-accounts_get_collection"];
        put?: never;
        /**
         * Create a new sub-account for a legal entity.
         * @description Creates a new sub-account for a specific legal entity, identified by its UUID. The sub-account will be granted access only to document related to the legal entity.
         */
        post: operations["api_legal-entities_legalEntityUuidsub-accounts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/legal-entities/{legalEntityUuid}/sub-accounts/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a sub-account by email for a specific legal entity.
         * @description Deletes a sub-account associated with a specific legal entity, identified by the legal entity UUID and the sub-account email address. This operation will remove the sub-account and revoke its access to documents related to the legal entity.
         */
        delete: operations["api_legal-entities_legalEntityUuidsub-accounts_email_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of Order resources.
         * @description Retrieves the collection of Order resources.
         */
        get: operations["api_orders_get_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/downloaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark the documents as downloaded
         * @description This is useful to keep track of the document that have been received by the user.
         */
        post: operations["api_ordersdownloaded_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/outgoing/ubl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new order in UBL format
         * @description Send an order in either the original XML format or the JSON transposition.
         *     You must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).
         *
         *     Optionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.
         *     You can retrieve a list of the available validation rules using the API `GET /validation-rules`.
         *     By default the validation rule is autodetected using the latest rule available for the given document.
         */
        post: operations["api_orders_post_outgoing_ubl_collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a Order resource.
         * @description Retrieves a Order resource.
         */
        get: operations["api_orders_uuid_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{uuid}/print": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the printed version of the document
         * @description You will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.
         */
        get: operations["api_orders_uuidprint_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{uuid}/source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the original source document
         * @description You can retrieve the original source document in either XML or JSON format.
         */
        get: operations["api_orders_uuidsource_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-responses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of OrderResponse resources.
         * @description Retrieves the collection of OrderResponse resources.
         */
        get: operations["api_order-responses_get_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-responses/downloaded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark the documents as downloaded
         * @description This is useful to keep track of the document that have been received by the user.
         */
        post: operations["api_order-responsesdownloaded_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-responses/outgoing/ubl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new order response in UBL format
         * @description Send an order response in either the original XML format or the JSON transposition.
         *     You must send the XML or JSON as the request body along with the right `Content-Type` header (`application/xml` or `application/json`).
         *
         *     Optionally you can send the `X-Validation-Rule: {validation-rule-code}` where `{validation-rule-code}` is one of the available validation rules you can use.
         *     You can retrieve a list of the available validation rules using the API `GET /validation-rules`.
         *     By default the validation rule is autodetected using the latest rule available for the given document.
         */
        post: operations["api_order_responses_post_outgoing_ubl_collection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-responses/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a OrderResponse resource.
         * @description Retrieves a OrderResponse resource.
         */
        get: operations["api_order-responses_uuid_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-responses/{uuid}/print": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the printed version of the document
         * @description You will receive a 302 redirect response with the Location header pointing to the downloadable file. Additionally you get the URL to the downloaded file in the JSON response body.
         */
        get: operations["api_order-responses_uuidprint_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order-responses/{uuid}/source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the original source document
         * @description You can retrieve the original source document in either XML or JSON format.
         */
        get: operations["api_order-responses_uuidsource_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/processes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of Process resources.
         * @description Get the list of supported document types.
         *     For a complete and official list see https://docs.peppol.eu/edelivery/codelists/
         */
        get: operations["api_processes_get_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves the collection of Webhook resources.
         * @description Retrieves the collection of Webhook resources.
         */
        get: operations["api_webhooks_get_collection"];
        put?: never;
        /**
         * Creates a Webhook resource.
         * @description Creates a Webhook resource.
         */
        post: operations["api_webhooks_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieves a Webhook resource.
         * @description Retrieves a Webhook resource.
         */
        get: operations["api_webhooks_uuid_get"];
        put?: never;
        post?: never;
        /**
         * Removes the Webhook resource.
         * @description Removes the Webhook resource.
         */
        delete: operations["api_webhooks_uuid_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Unprocessable entity */
        "ConstraintViolation-json": {
            /**
             * @default 422
             * @example 422
             */
            status: number;
            violations?: {
                /** @description The property path of the violation */
                propertyPath?: string;
                /** @description The message associated with the violation */
                message?: string;
            }[];
            readonly detail?: string;
            readonly type?: string;
            readonly title?: string | null;
            readonly instance?: string | null;
        };
        /** @description Unprocessable entity */
        "ConstraintViolation.jsonld-jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            /**
             * @default 422
             * @example 422
             */
            status: number;
            violations?: {
                /** @description The property path of the violation */
                propertyPath?: string;
                /** @description The message associated with the violation */
                message?: string;
            }[];
            readonly detail?: string;
            readonly description?: string;
            readonly type?: string;
            readonly title?: string | null;
            readonly instance?: string | null;
        };
        "CreditNote.CreditNoteOutput": {
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant"];
            recipient?: components["schemas"]["Participant"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput"] | null;
        };
        "CreditNote.CreditNoteOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant.jsonld"];
            recipient?: components["schemas"]["Participant.jsonld"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput.jsonld"] | null;
        };
        "CreditNote.DownloadedInput": {
            downloaded: boolean;
            uuids: string[];
        };
        "DespatchAdvice.DespatchAdviceOutput": {
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant"];
            recipient?: components["schemas"]["Participant"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput"] | null;
        };
        "DespatchAdvice.DespatchAdviceOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant.jsonld"];
            recipient?: components["schemas"]["Participant.jsonld"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput.jsonld"] | null;
        };
        "DespatchAdvice.DownloadedInput": {
            downloaded: boolean;
            uuids: string[];
        };
        "DocumentType.DocumentTypeOutput": {
            scheme?: string;
            value?: string;
            name?: string;
            since?: string;
            deprecated?: boolean;
            deprecatedSince?: string | null;
            issuedByOpenPeppol?: boolean;
            bisVersion?: string | null;
            domainCommunity?: string | null;
            processes?: components["schemas"]["ProcessOutput"][];
        };
        "DocumentType.DocumentTypeOutput.jsonld": {
            readonly "@id"?: string;
            readonly "@type"?: string;
            scheme?: string;
            value?: string;
            name?: string;
            since?: string;
            deprecated?: boolean;
            deprecatedSince?: string | null;
            issuedByOpenPeppol?: boolean;
            bisVersion?: string | null;
            domainCommunity?: string | null;
            processes?: components["schemas"]["ProcessOutput.jsonld"][];
        };
        /** @description A representation of common errors. */
        Error: {
            /** @description A short, human-readable summary of the problem. */
            readonly title?: string | null;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            readonly detail?: string | null;
            /**
             * @default 400
             * @example 404
             */
            status: number;
            /** @description A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. */
            readonly instance?: string | null;
            /** @description A URI reference that identifies the problem type */
            readonly type?: string;
        };
        /** @description A representation of common errors. */
        "Error.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            /** @description A short, human-readable summary of the problem. */
            readonly title?: string | null;
            /** @description A human-readable explanation specific to this occurrence of the problem. */
            readonly detail?: string | null;
            /**
             * @default 400
             * @example 404
             */
            status: number;
            /** @description A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced. */
            readonly instance?: string | null;
            /** @description A URI reference that identifies the problem type */
            readonly type?: string;
            readonly description?: string | null;
        };
        "Invoice.DownloadedInput": {
            downloaded: boolean;
            uuids: string[];
        };
        "Invoice.InvoiceOutput": {
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant"];
            recipient?: components["schemas"]["Participant"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput"] | null;
        };
        "Invoice.InvoiceOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant.jsonld"];
            recipient?: components["schemas"]["Participant.jsonld"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput.jsonld"] | null;
        };
        "LegalEntity.LegalEntityInput": {
            /** @description Name used to register the End User in the business registry of the jurisdiction where it is legally based. */
            registeredName: string;
            /** @description Country code ISO 3166-1 alpha-2 codes */
            country: string;
            /** @description Legal entity address */
            address?: string | null;
            /** @description Legal entity city */
            city?: string | null;
            /** @description Legal entity state or province */
            stateOrProvince?: string | null;
            /** @description Legal entity zip code */
            zipCode?: string | null;
            /**
             * @description The participant identifier scheme
             * @default iso6523-actorid-upis
             * @example iso6523-actorid-upis
             */
            identifierScheme: string;
            /** @description The participant identifier built as per the OpenPeppol normative version of the code list */
            identifierValue: string;
            /** @description The list of email addresses where a notification is sent for each received document */
            receivedDocumentNotificationEmails?: string[] | null;
        };
        "LegalEntity.LegalEntityInput.jsonld": {
            /** @description Name used to register the End User in the business registry of the jurisdiction where it is legally based. */
            registeredName: string;
            /** @description Country code ISO 3166-1 alpha-2 codes */
            country: string;
            /** @description Legal entity address */
            address?: string | null;
            /** @description Legal entity city */
            city?: string | null;
            /** @description Legal entity state or province */
            stateOrProvince?: string | null;
            /** @description Legal entity zip code */
            zipCode?: string | null;
            /**
             * @description The participant identifier scheme
             * @default iso6523-actorid-upis
             * @example iso6523-actorid-upis
             */
            identifierScheme: string;
            /** @description The participant identifier built as per the OpenPeppol normative version of the code list */
            identifierValue: string;
            /** @description The list of email addresses where a notification is sent for each received document */
            receivedDocumentNotificationEmails?: string[] | null;
        };
        "LegalEntity.LegalEntityOutput": {
            uuid?: string;
            /** @description Name used to register the End User in the business registry of the jurisdiction where it is legally based. */
            registeredName?: string;
            /** @description Country code ISO 3166-1 alpha-2 codes */
            country?: string | null;
            /** @description Legal entity address */
            address?: string | null;
            /** @description Legal entity city */
            city?: string | null;
            /** @description Legal entity state or province */
            stateOrProvince?: string | null;
            /** @description Legal entity zip code */
            zipCode?: string | null;
            /**
             * @description The participant identifier scheme
             * @default iso6523-actorid-upis
             * @example iso6523-actorid-upis
             */
            identifierScheme: string;
            /** @description The participant identifier built as per the OpenPeppol normative version of the code list. */
            identifierValue?: string;
            /** @description The list of email addresses where a notification is sent for each received document */
            receivedDocumentNotificationEmails?: string[] | null;
            /** @description True when this legal entity has been correctly registered into the SMP service. */
            smpEnabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        };
        "LegalEntity.LegalEntityOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            /** @description Name used to register the End User in the business registry of the jurisdiction where it is legally based. */
            registeredName?: string;
            /** @description Country code ISO 3166-1 alpha-2 codes */
            country?: string | null;
            /** @description Legal entity address */
            address?: string | null;
            /** @description Legal entity city */
            city?: string | null;
            /** @description Legal entity state or province */
            stateOrProvince?: string | null;
            /** @description Legal entity zip code */
            zipCode?: string | null;
            /**
             * @description The participant identifier scheme
             * @default iso6523-actorid-upis
             * @example iso6523-actorid-upis
             */
            identifierScheme: string;
            /** @description The participant identifier built as per the OpenPeppol normative version of the code list. */
            identifierValue?: string;
            /** @description The list of email addresses where a notification is sent for each received document */
            receivedDocumentNotificationEmails?: string[] | null;
            /** @description True when this legal entity has been correctly registered into the SMP service. */
            smpEnabled?: boolean;
            createdAt?: string;
            updatedAt?: string;
        };
        "LegalEntity.LegalEntitySMPInput": {
            /** @description Setting enabled to true will write the record into the SMP, with false the record will be deleted from the SMP. */
            enabled?: boolean;
            /** @description The list of documents and processes this legal entity can manage, stored into the SMP. */
            capabilities?: components["schemas"]["LegalEntitySMPCapabilityInput"][];
        };
        "LegalEntity.LegalEntitySMPInput.jsonld": {
            /** @description Setting enabled to true will write the record into the SMP, with false the record will be deleted from the SMP. */
            enabled?: boolean;
            /** @description The list of documents and processes this legal entity can manage, stored into the SMP. */
            capabilities?: components["schemas"]["LegalEntitySMPCapabilityInput.jsonld"][];
        };
        "LegalEntity.LegalEntitySMPOutput": {
            enabled?: boolean;
            /** @description The list of documents and processes this legal entity can manage, stored into the SMP. */
            capabilities?: components["schemas"]["LegalEntitySMPCapabilityOutput"][];
        };
        "LegalEntity.LegalEntitySMPOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            enabled?: boolean;
            /** @description The list of documents and processes this legal entity can manage, stored into the SMP. */
            capabilities?: components["schemas"]["LegalEntitySMPCapabilityOutput.jsonld"][];
        };
        "LegalEntity.LegalEntityTransferBridgeInput": {
            peppolSdiEnabled?: boolean;
        };
        "LegalEntity.LegalEntityTransferBridgeInput.jsonld": {
            peppolSdiEnabled?: boolean;
        };
        "LegalEntity.LegalEntityTransferBridgeOutput": {
            peppolSdiEnabled?: boolean;
        };
        "LegalEntity.LegalEntityTransferBridgeOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            peppolSdiEnabled?: boolean;
        };
        LegalEntitySMPCapabilityInput: {
            /**
             * @description The document type scheme, see the [list of supported document types](/tag/DocumentType/#tag/DocumentType/operation/api_document-types_get_collection)
             * @default busdox-docid-qns
             * @example busdox-docid-qns
             */
            documentTypeScheme: string;
            /** @description The document type identifier, see the [list of supported document types](/tag/DocumentType/#tag/DocumentType/operation/api_document-types_get_collection) */
            documentType: string;
            /**
             * @description The process scheme, see the [list of supported processes](/tag/Process/#tag/Process/operation/api_processes_get_collection)
             * @default cenbii-procid-ubl
             * @example cenbii-procid-ubl
             */
            processScheme: string;
            /** @description The process identifier, see the [list of supported processes](/tag/Process/#tag/Process/operation/api_processes_get_collection) */
            process: string;
        };
        "LegalEntitySMPCapabilityInput.jsonld": {
            /**
             * @description The document type scheme, see the [list of supported document types](/tag/DocumentType/#tag/DocumentType/operation/api_document-types_get_collection)
             * @default busdox-docid-qns
             * @example busdox-docid-qns
             */
            documentTypeScheme: string;
            /** @description The document type identifier, see the [list of supported document types](/tag/DocumentType/#tag/DocumentType/operation/api_document-types_get_collection) */
            documentType: string;
            /**
             * @description The process scheme, see the [list of supported processes](/tag/Process/#tag/Process/operation/api_processes_get_collection)
             * @default cenbii-procid-ubl
             * @example cenbii-procid-ubl
             */
            processScheme: string;
            /** @description The process identifier, see the [list of supported processes](/tag/Process/#tag/Process/operation/api_processes_get_collection) */
            process: string;
        };
        LegalEntitySMPCapabilityOutput: {
            /** @description The document type scheme, see the [list of supported document types](#operation/getDocumentTypeCollection) */
            documentTypeScheme?: string;
            /** @description The document type identifier, see the [list of supported document types](#operation/getDocumentTypeCollection) */
            documentType?: string;
            /** @description The process scheme, see the [list of supported processes](#operation/getProcessCollection) */
            processScheme?: string;
            /** @description The process identifier, see the [list of supported processes](#operation/getProcessCollection) */
            process?: string;
        };
        "LegalEntitySMPCapabilityOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            /** @description The document type scheme, see the [list of supported document types](#operation/getDocumentTypeCollection) */
            documentTypeScheme?: string;
            /** @description The document type identifier, see the [list of supported document types](#operation/getDocumentTypeCollection) */
            documentType?: string;
            /** @description The process scheme, see the [list of supported processes](#operation/getProcessCollection) */
            processScheme?: string;
            /** @description The process identifier, see the [list of supported processes](#operation/getProcessCollection) */
            process?: string;
        };
        "LegalEntitySubAccount.LegalEntitySubAccountInput": {
            /**
             * Format: email
             * @description The username of the sub-account. It must be unique within the whole A-Cube platform.
             */
            email?: string;
            /** @description The password for the sub-account. It will be set only if the sub-account is created contextually within the request. If not provided, the user must set it later via the reset password flow. */
            password?: string | null;
        };
        "LegalEntitySubAccount.LegalEntitySubAccountInput.jsonld": {
            /**
             * Format: email
             * @description The username of the sub-account. It must be unique within the whole A-Cube platform.
             */
            email?: string;
            /** @description The password for the sub-account. It will be set only if the sub-account is created contextually within the request. If not provided, the user must set it later via the reset password flow. */
            password?: string | null;
        };
        "LegalEntitySubAccount.LegalEntitySubAccountOutput": {
            uuid?: string;
            email?: string;
            createdAt?: string;
        };
        "LegalEntitySubAccount.LegalEntitySubAccountOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            email?: string;
            createdAt?: string;
        };
        "Order.DownloadedInput": {
            downloaded: boolean;
            uuids: string[];
        };
        "Order.OrderOutput": {
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant"];
            recipient?: components["schemas"]["Participant"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput"] | null;
            /** @enum {string|null} */
            processType?: "order only" | "ordering" | "order agreement" | null;
        };
        "Order.OrderOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant.jsonld"];
            recipient?: components["schemas"]["Participant.jsonld"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput.jsonld"] | null;
            /** @enum {string|null} */
            processType?: "order only" | "ordering" | "order agreement" | null;
        };
        "OrderResponse.DownloadedInput": {
            downloaded: boolean;
            uuids: string[];
        };
        "OrderResponse.OrderResponseOutput": {
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant"];
            recipient?: components["schemas"]["Participant"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput"] | null;
        };
        "OrderResponse.OrderResponseOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            /** @enum {string} */
            direction?: "outgoing" | "incoming";
            /** @enum {string} */
            format?: "UBL 2.1 XML" | "UBL 2.1 JSON";
            number?: string;
            date?: string;
            sender?: components["schemas"]["Participant.jsonld"];
            recipient?: components["schemas"]["Participant.jsonld"];
            createdAt?: string;
            downloaded?: boolean;
            peppolMessage?: components["schemas"]["PeppolMessageOutput.jsonld"] | null;
        };
        Participant: {
            name?: string | null;
            identifier?: string | null;
        };
        "Participant.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            name?: string | null;
            identifier?: string | null;
        };
        PeppolMessageOutput: {
            uuid?: string;
            createdAt?: string;
            requestSentAt?: string | null;
            responseReceivedAt?: string | null;
            success?: boolean | null;
            errorCode?: string | null;
            errorMessage?: string | null;
        };
        "PeppolMessageOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            createdAt?: string;
            requestSentAt?: string | null;
            responseReceivedAt?: string | null;
            success?: boolean | null;
            errorCode?: string | null;
            errorMessage?: string | null;
        };
        "Process.ProcessOutput": {
            scheme?: string;
            value?: string;
            deprecated?: boolean;
        };
        "Process.ProcessOutput.jsonld": {
            readonly "@id"?: string;
            readonly "@type"?: string;
            scheme?: string;
            value?: string;
            deprecated?: boolean;
        };
        ProcessOutput: {
            scheme?: string;
            value?: string;
            deprecated?: boolean;
        };
        "ProcessOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            scheme?: string;
            value?: string;
            deprecated?: boolean;
        };
        "Webhook.WebhookInput": {
            /**
             * @default
             * @example
             * @enum {string}
             */
            event: "outgoing-document" | "incoming-document";
            /**
             * Format: uri
             * @default
             * @example
             */
            url: string;
        };
        "Webhook.WebhookInput.jsonld": {
            /**
             * @default
             * @example
             * @enum {string}
             */
            event: "outgoing-document" | "incoming-document";
            /**
             * Format: uri
             * @default
             * @example
             */
            url: string;
        };
        "Webhook.WebhookOutput": {
            uuid?: string;
            event?: string;
            url?: string;
            createdAt?: string;
        };
        "Webhook.WebhookOutput.jsonld": {
            readonly "@context"?: string | ({
                "@vocab": string;
                /** @enum {string} */
                hydra: "http://www.w3.org/ns/hydra/core#";
            } & {
                [key: string]: unknown;
            });
            readonly "@id"?: string;
            readonly "@type"?: string;
            uuid?: string;
            event?: string;
            url?: string;
            createdAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "api_credit-notes_get_collection": {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
                senderName?: string;
                senderId?: string;
                "senderId[]"?: string[];
                recipientName?: string;
                recipientId?: string;
                "recipientId[]"?: string[];
                documentNumber?: string;
                "documentNumber[]"?: string[];
                "sortBy[createdAt]"?: "asc" | "desc";
                "sortBy[documentDate]"?: "asc" | "desc";
                "sortBy[senderName]"?: "asc" | "desc";
                "sortBy[recipientName]"?: "asc" | "desc";
                "createdAt[before]"?: string;
                "createdAt[strictly_before]"?: string;
                "createdAt[after]"?: string;
                "createdAt[strictly_after]"?: string;
                "documentDate[before]"?: string;
                "documentDate[strictly_before]"?: string;
                "documentDate[after]"?: string;
                "documentDate[strictly_after]"?: string;
                downloaded?: boolean;
                direction?: "outgoing" | "incoming";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CreditNote collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["CreditNote.CreditNoteOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["CreditNote.CreditNoteOutput"][];
                    "text/html": components["schemas"]["CreditNote.CreditNoteOutput"][];
                    "application/xml": components["schemas"]["CreditNote.CreditNoteOutput"][];
                    "text/xml": components["schemas"]["CreditNote.CreditNoteOutput"][];
                    "application/pdf": components["schemas"]["CreditNote.CreditNoteOutput"][];
                };
            };
        };
    };
    "api_credit-notesdownloaded_post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new CreditNote resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreditNote.DownloadedInput"];
            };
        };
        responses: {
            /** @description CreditNote resource created */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": unknown;
                    "application/json": unknown;
                    "text/html": unknown;
                    "application/xml": unknown;
                    "text/xml": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_credit_notes_post_outgoing_ubl_collection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CreditNote resource created */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["CreditNote.CreditNoteOutput.jsonld"];
                    "application/json": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "text/html": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "application/xml": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "text/xml": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "application/pdf": components["schemas"]["CreditNote.CreditNoteOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_credit-notes_uuid_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CreditNote identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CreditNote resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["CreditNote.CreditNoteOutput.jsonld"];
                    "application/json": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "text/html": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "application/xml": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "text/xml": components["schemas"]["CreditNote.CreditNoteOutput"];
                    "application/pdf": components["schemas"]["CreditNote.CreditNoteOutput"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_credit-notes_uuidprint_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CreditNote identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CreditNote resource */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_credit-notes_uuidsource_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description CreditNote identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CreditNote resource */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/xml": unknown;
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_despatch-advices_get_collection": {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
                senderName?: string;
                senderId?: string;
                "senderId[]"?: string[];
                recipientName?: string;
                recipientId?: string;
                "recipientId[]"?: string[];
                documentNumber?: string;
                "documentNumber[]"?: string[];
                "sortBy[createdAt]"?: "asc" | "desc";
                "sortBy[documentDate]"?: "asc" | "desc";
                "sortBy[senderName]"?: "asc" | "desc";
                "sortBy[recipientName]"?: "asc" | "desc";
                "createdAt[before]"?: string;
                "createdAt[strictly_before]"?: string;
                "createdAt[after]"?: string;
                "createdAt[strictly_after]"?: string;
                "documentDate[before]"?: string;
                "documentDate[strictly_before]"?: string;
                "documentDate[after]"?: string;
                "documentDate[strictly_after]"?: string;
                downloaded?: boolean;
                direction?: "outgoing" | "incoming";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DespatchAdvice collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["DespatchAdvice.DespatchAdviceOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"][];
                    "text/html": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"][];
                    "application/xml": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"][];
                    "text/xml": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"][];
                    "application/pdf": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"][];
                };
            };
        };
    };
    "api_despatch-advicesdownloaded_post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new DespatchAdvice resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["DespatchAdvice.DownloadedInput"];
            };
        };
        responses: {
            /** @description DespatchAdvice resource created */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": unknown;
                    "application/json": unknown;
                    "text/html": unknown;
                    "application/xml": unknown;
                    "text/xml": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_despatch_advices_post_outgoing_ubl_collection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DespatchAdvice resource created */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["DespatchAdvice.DespatchAdviceOutput.jsonld"];
                    "application/json": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "text/html": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "application/xml": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "text/xml": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "application/pdf": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_despatch-advices_uuid_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description DespatchAdvice identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DespatchAdvice resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["DespatchAdvice.DespatchAdviceOutput.jsonld"];
                    "application/json": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "text/html": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "application/xml": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "text/xml": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                    "application/pdf": components["schemas"]["DespatchAdvice.DespatchAdviceOutput"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_despatch-advices_uuidsource_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description DespatchAdvice identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DespatchAdvice resource */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/xml": unknown;
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_document-types_get_collection": {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description DocumentType collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["DocumentType.DocumentTypeOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["DocumentType.DocumentTypeOutput"][];
                    "text/html": components["schemas"]["DocumentType.DocumentTypeOutput"][];
                    "application/xml": components["schemas"]["DocumentType.DocumentTypeOutput"][];
                    "text/xml": components["schemas"]["DocumentType.DocumentTypeOutput"][];
                    "application/pdf": components["schemas"]["DocumentType.DocumentTypeOutput"][];
                };
            };
        };
    };
    api_invoices_get_collection: {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
                senderName?: string;
                senderId?: string;
                "senderId[]"?: string[];
                recipientName?: string;
                recipientId?: string;
                "recipientId[]"?: string[];
                documentNumber?: string;
                "documentNumber[]"?: string[];
                "sortBy[createdAt]"?: "asc" | "desc";
                "sortBy[documentDate]"?: "asc" | "desc";
                "sortBy[senderName]"?: "asc" | "desc";
                "sortBy[recipientName]"?: "asc" | "desc";
                "createdAt[before]"?: string;
                "createdAt[strictly_before]"?: string;
                "createdAt[after]"?: string;
                "createdAt[strictly_after]"?: string;
                "documentDate[before]"?: string;
                "documentDate[strictly_before]"?: string;
                "documentDate[after]"?: string;
                "documentDate[strictly_after]"?: string;
                downloaded?: boolean;
                direction?: "outgoing" | "incoming";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["Invoice.InvoiceOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["Invoice.InvoiceOutput"][];
                    "text/html": components["schemas"]["Invoice.InvoiceOutput"][];
                    "application/xml": components["schemas"]["Invoice.InvoiceOutput"][];
                    "text/xml": components["schemas"]["Invoice.InvoiceOutput"][];
                    "application/pdf": components["schemas"]["Invoice.InvoiceOutput"][];
                };
            };
        };
    };
    api_invoicesdownloaded_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new Invoice resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Invoice.DownloadedInput"];
            };
        };
        responses: {
            /** @description Invoice resource created */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": unknown;
                    "application/json": unknown;
                    "text/html": unknown;
                    "application/xml": unknown;
                    "text/xml": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_invoices_post_outgoing_ubl_collection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice resource created */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Invoice.InvoiceOutput.jsonld"];
                    "application/json": components["schemas"]["Invoice.InvoiceOutput"];
                    "text/html": components["schemas"]["Invoice.InvoiceOutput"];
                    "application/xml": components["schemas"]["Invoice.InvoiceOutput"];
                    "text/xml": components["schemas"]["Invoice.InvoiceOutput"];
                    "application/pdf": components["schemas"]["Invoice.InvoiceOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_invoices_uuid_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Invoice identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Invoice.InvoiceOutput.jsonld"];
                    "application/json": components["schemas"]["Invoice.InvoiceOutput"];
                    "text/html": components["schemas"]["Invoice.InvoiceOutput"];
                    "application/xml": components["schemas"]["Invoice.InvoiceOutput"];
                    "text/xml": components["schemas"]["Invoice.InvoiceOutput"];
                    "application/pdf": components["schemas"]["Invoice.InvoiceOutput"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_invoices_uuidprint_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Invoice identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice resource */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_invoices_uuidsource_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Invoice identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice resource */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/xml": unknown;
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_legal-entities_get_collection": {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
                "sortBy[createdAt]"?: "asc" | "desc";
                "sortBy[registeredName]"?: "asc" | "desc";
                "sortBy[identifierScheme]"?: "asc" | "desc";
                "sortBy[identifierValue]"?: "asc" | "desc";
                identifierValue?: string;
                registeredName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LegalEntity collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["LegalEntity.LegalEntityOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["LegalEntity.LegalEntityOutput"][];
                    "text/html": components["schemas"]["LegalEntity.LegalEntityOutput"][];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntityOutput"][];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntityOutput"][];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntityOutput"][];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_legal-entities_post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new LegalEntity resource */
        requestBody: {
            content: {
                "application/ld+json": components["schemas"]["LegalEntity.LegalEntityInput.jsonld"];
                "application/json": components["schemas"]["LegalEntity.LegalEntityInput"];
                "text/html": components["schemas"]["LegalEntity.LegalEntityInput"];
                "application/xml": components["schemas"]["LegalEntity.LegalEntityInput"];
                "text/xml": components["schemas"]["LegalEntity.LegalEntityInput"];
                "application/pdf": components["schemas"]["LegalEntity.LegalEntityInput"];
            };
        };
        responses: {
            /** @description LegalEntity resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntity.LegalEntityOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "text/html": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntityOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_legal-entities_uuid_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description LegalEntity identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LegalEntity resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntity.LegalEntityOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "text/html": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntityOutput"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_legal-entities_uuid_put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description LegalEntity identifier */
                uuid: string;
            };
            cookie?: never;
        };
        /** @description The updated LegalEntity resource */
        requestBody: {
            content: {
                "application/ld+json": components["schemas"]["LegalEntity.LegalEntityInput.jsonld"];
                "application/json": components["schemas"]["LegalEntity.LegalEntityInput"];
                "text/html": components["schemas"]["LegalEntity.LegalEntityInput"];
                "application/xml": components["schemas"]["LegalEntity.LegalEntityInput"];
                "text/xml": components["schemas"]["LegalEntity.LegalEntityInput"];
                "application/pdf": components["schemas"]["LegalEntity.LegalEntityInput"];
            };
        };
        responses: {
            /** @description LegalEntity resource updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntity.LegalEntityOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "text/html": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntityOutput"];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntityOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_legal-entities_uuid_delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description LegalEntity identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LegalEntity resource deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_legal-entities_uuidsmp_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description LegalEntity identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LegalEntity resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntity.LegalEntitySMPOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "text/html": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_legal-entities_uuidsmp_put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description LegalEntity identifier */
                uuid: string;
            };
            cookie?: never;
        };
        /** @description The updated LegalEntity resource */
        requestBody: {
            content: {
                "application/ld+json": components["schemas"]["LegalEntity.LegalEntitySMPInput.jsonld"];
                "application/json": components["schemas"]["LegalEntity.LegalEntitySMPInput"];
                "text/html": components["schemas"]["LegalEntity.LegalEntitySMPInput"];
                "application/xml": components["schemas"]["LegalEntity.LegalEntitySMPInput"];
                "text/xml": components["schemas"]["LegalEntity.LegalEntitySMPInput"];
                "application/pdf": components["schemas"]["LegalEntity.LegalEntitySMPInput"];
            };
        };
        responses: {
            /** @description LegalEntity resource updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntity.LegalEntitySMPOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "text/html": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntitySMPOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_legal-entities_uuidtransfer-bridge_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description LegalEntity identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LegalEntity resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "text/html": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_legal-entities_uuidtransfer-bridge_put": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description LegalEntity identifier */
                uuid: string;
            };
            cookie?: never;
        };
        /** @description The updated LegalEntity resource */
        requestBody: {
            content: {
                "application/ld+json": components["schemas"]["LegalEntity.LegalEntityTransferBridgeInput.jsonld"];
                "application/json": components["schemas"]["LegalEntity.LegalEntityTransferBridgeInput"];
                "text/html": components["schemas"]["LegalEntity.LegalEntityTransferBridgeInput"];
                "application/xml": components["schemas"]["LegalEntity.LegalEntityTransferBridgeInput"];
                "text/xml": components["schemas"]["LegalEntity.LegalEntityTransferBridgeInput"];
                "application/pdf": components["schemas"]["LegalEntity.LegalEntityTransferBridgeInput"];
            };
        };
        responses: {
            /** @description LegalEntity resource updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "text/html": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "application/xml": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "text/xml": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                    "application/pdf": components["schemas"]["LegalEntity.LegalEntityTransferBridgeOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_legal-entities_legalEntityUuidsub-accounts_get_collection": {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
            };
            header?: never;
            path: {
                /** @description The UUID of the legal entity to which the sub-accounts belong. */
                legalEntityUuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LegalEntitySubAccount collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"][];
                    "text/html": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"][];
                    "application/xml": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"][];
                    "text/xml": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"][];
                    "application/pdf": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"][];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_legal-entities_legalEntityUuidsub-accounts_post": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the legal entity to which the sub-account will be associated. */
                legalEntityUuid: string;
            };
            cookie?: never;
        };
        /** @description The new LegalEntitySubAccount resource */
        requestBody: {
            content: {
                "application/ld+json": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountInput.jsonld"];
                "application/json": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountInput"];
                "text/html": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountInput"];
                "application/xml": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountInput"];
                "text/xml": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountInput"];
                "application/pdf": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountInput"];
            };
        };
        responses: {
            /** @description LegalEntitySubAccount resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput.jsonld"];
                    "application/json": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"];
                    "text/html": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"];
                    "application/xml": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"];
                    "text/xml": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"];
                    "application/pdf": components["schemas"]["LegalEntitySubAccount.LegalEntitySubAccountOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_legal-entities_legalEntityUuidsub-accounts_email_delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The UUID of the legal entity to which the sub-account belongs. */
                legalEntityUuid: string;
                /** @description The email address of the sub-account to be deleted. */
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description LegalEntitySubAccount resource deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_orders_get_collection: {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
                senderName?: string;
                senderId?: string;
                "senderId[]"?: string[];
                recipientName?: string;
                recipientId?: string;
                "recipientId[]"?: string[];
                documentNumber?: string;
                "documentNumber[]"?: string[];
                "sortBy[createdAt]"?: "asc" | "desc";
                "sortBy[documentDate]"?: "asc" | "desc";
                "sortBy[senderName]"?: "asc" | "desc";
                "sortBy[recipientName]"?: "asc" | "desc";
                "createdAt[before]"?: string;
                "createdAt[strictly_before]"?: string;
                "createdAt[after]"?: string;
                "createdAt[strictly_after]"?: string;
                "documentDate[before]"?: string;
                "documentDate[strictly_before]"?: string;
                "documentDate[after]"?: string;
                "documentDate[strictly_after]"?: string;
                downloaded?: boolean;
                direction?: "outgoing" | "incoming";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["Order.OrderOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["Order.OrderOutput"][];
                    "text/html": components["schemas"]["Order.OrderOutput"][];
                    "application/xml": components["schemas"]["Order.OrderOutput"][];
                    "text/xml": components["schemas"]["Order.OrderOutput"][];
                    "application/pdf": components["schemas"]["Order.OrderOutput"][];
                };
            };
        };
    };
    api_ordersdownloaded_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new Order resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Order.DownloadedInput"];
            };
        };
        responses: {
            /** @description Order resource created */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": unknown;
                    "application/json": unknown;
                    "text/html": unknown;
                    "application/xml": unknown;
                    "text/xml": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_orders_post_outgoing_ubl_collection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order resource created */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Order.OrderOutput.jsonld"];
                    "application/json": components["schemas"]["Order.OrderOutput"];
                    "text/html": components["schemas"]["Order.OrderOutput"];
                    "application/xml": components["schemas"]["Order.OrderOutput"];
                    "text/xml": components["schemas"]["Order.OrderOutput"];
                    "application/pdf": components["schemas"]["Order.OrderOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_orders_uuid_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Order identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Order.OrderOutput.jsonld"];
                    "application/json": components["schemas"]["Order.OrderOutput"];
                    "text/html": components["schemas"]["Order.OrderOutput"];
                    "application/xml": components["schemas"]["Order.OrderOutput"];
                    "text/xml": components["schemas"]["Order.OrderOutput"];
                    "application/pdf": components["schemas"]["Order.OrderOutput"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_orders_uuidprint_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Order identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order resource */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_orders_uuidsource_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Order identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Order resource */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/xml": unknown;
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_order-responses_get_collection": {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
                senderName?: string;
                senderId?: string;
                "senderId[]"?: string[];
                recipientName?: string;
                recipientId?: string;
                "recipientId[]"?: string[];
                documentNumber?: string;
                "documentNumber[]"?: string[];
                "sortBy[createdAt]"?: "asc" | "desc";
                "sortBy[documentDate]"?: "asc" | "desc";
                "sortBy[senderName]"?: "asc" | "desc";
                "sortBy[recipientName]"?: "asc" | "desc";
                "createdAt[before]"?: string;
                "createdAt[strictly_before]"?: string;
                "createdAt[after]"?: string;
                "createdAt[strictly_after]"?: string;
                "documentDate[before]"?: string;
                "documentDate[strictly_before]"?: string;
                "documentDate[after]"?: string;
                "documentDate[strictly_after]"?: string;
                downloaded?: boolean;
                direction?: "outgoing" | "incoming";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OrderResponse collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["OrderResponse.OrderResponseOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["OrderResponse.OrderResponseOutput"][];
                    "text/html": components["schemas"]["OrderResponse.OrderResponseOutput"][];
                    "application/xml": components["schemas"]["OrderResponse.OrderResponseOutput"][];
                    "text/xml": components["schemas"]["OrderResponse.OrderResponseOutput"][];
                    "application/pdf": components["schemas"]["OrderResponse.OrderResponseOutput"][];
                };
            };
        };
    };
    "api_order-responsesdownloaded_post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new OrderResponse resource */
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderResponse.DownloadedInput"];
            };
        };
        responses: {
            /** @description OrderResponse resource created */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": unknown;
                    "application/json": unknown;
                    "text/html": unknown;
                    "application/xml": unknown;
                    "text/xml": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_order_responses_post_outgoing_ubl_collection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OrderResponse resource created */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["OrderResponse.OrderResponseOutput.jsonld"];
                    "application/json": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "text/html": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "application/xml": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "text/xml": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "application/pdf": components["schemas"]["OrderResponse.OrderResponseOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    "api_order-responses_uuid_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description OrderResponse identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OrderResponse resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["OrderResponse.OrderResponseOutput.jsonld"];
                    "application/json": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "text/html": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "application/xml": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "text/xml": components["schemas"]["OrderResponse.OrderResponseOutput"];
                    "application/pdf": components["schemas"]["OrderResponse.OrderResponseOutput"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_order-responses_uuidprint_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description OrderResponse identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OrderResponse resource */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": unknown;
                    "application/pdf": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "api_order-responses_uuidsource_get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description OrderResponse identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OrderResponse resource */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/xml": unknown;
                    "application/json": unknown;
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_processes_get_collection: {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Process collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["Process.ProcessOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["Process.ProcessOutput"][];
                    "text/html": components["schemas"]["Process.ProcessOutput"][];
                    "application/xml": components["schemas"]["Process.ProcessOutput"][];
                    "text/xml": components["schemas"]["Process.ProcessOutput"][];
                    "application/pdf": components["schemas"]["Process.ProcessOutput"][];
                };
            };
        };
    };
    api_webhooks_get_collection: {
        parameters: {
            query?: {
                /** @description The collection page number */
                page?: number;
                /** @description The number of items per page */
                itemsPerPage?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": {
                        "hydra:member": components["schemas"]["Webhook.WebhookOutput.jsonld"][];
                        "hydra:totalItems"?: number;
                        /** @example {
                         *       "@id": "string",
                         *       "type": "string",
                         *       "hydra:first": "string",
                         *       "hydra:last": "string",
                         *       "hydra:previous": "string",
                         *       "hydra:next": "string"
                         *     } */
                        "hydra:view"?: {
                            /** Format: iri-reference */
                            "@id"?: string;
                            "@type"?: string;
                            /** Format: iri-reference */
                            "hydra:first"?: string;
                            /** Format: iri-reference */
                            "hydra:last"?: string;
                            /** Format: iri-reference */
                            "hydra:previous"?: string;
                            /** Format: iri-reference */
                            "hydra:next"?: string;
                        };
                        "hydra:search"?: {
                            "@type"?: string;
                            "hydra:template"?: string;
                            "hydra:variableRepresentation"?: string;
                            "hydra:mapping"?: {
                                "@type"?: string;
                                variable?: string;
                                property?: string | null;
                                required?: boolean;
                            }[];
                        };
                    };
                    "application/json": components["schemas"]["Webhook.WebhookOutput"][];
                    "text/html": components["schemas"]["Webhook.WebhookOutput"][];
                    "application/xml": components["schemas"]["Webhook.WebhookOutput"][];
                    "text/xml": components["schemas"]["Webhook.WebhookOutput"][];
                    "application/pdf": components["schemas"]["Webhook.WebhookOutput"][];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_webhooks_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The new Webhook resource */
        requestBody: {
            content: {
                "application/ld+json": components["schemas"]["Webhook.WebhookInput.jsonld"];
                "application/json": components["schemas"]["Webhook.WebhookInput"];
                "text/html": components["schemas"]["Webhook.WebhookInput"];
                "application/xml": components["schemas"]["Webhook.WebhookInput"];
                "text/xml": components["schemas"]["Webhook.WebhookInput"];
                "application/pdf": components["schemas"]["Webhook.WebhookInput"];
            };
        };
        responses: {
            /** @description Webhook resource created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Webhook.WebhookOutput.jsonld"];
                    "application/json": components["schemas"]["Webhook.WebhookOutput"];
                    "text/html": components["schemas"]["Webhook.WebhookOutput"];
                    "application/xml": components["schemas"]["Webhook.WebhookOutput"];
                    "text/xml": components["schemas"]["Webhook.WebhookOutput"];
                    "application/pdf": components["schemas"]["Webhook.WebhookOutput"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description An error occurred */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["ConstraintViolation.jsonld-jsonld"];
                    "application/problem+json": components["schemas"]["ConstraintViolation-json"];
                    "application/json": components["schemas"]["ConstraintViolation-json"];
                };
            };
        };
    };
    api_webhooks_uuid_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Webhook identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook resource */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Webhook.WebhookOutput.jsonld"];
                    "application/json": components["schemas"]["Webhook.WebhookOutput"];
                    "text/html": components["schemas"]["Webhook.WebhookOutput"];
                    "application/xml": components["schemas"]["Webhook.WebhookOutput"];
                    "text/xml": components["schemas"]["Webhook.WebhookOutput"];
                    "application/pdf": components["schemas"]["Webhook.WebhookOutput"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    api_webhooks_uuid_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Webhook identifier */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Webhook resource deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/ld+json": components["schemas"]["Error.jsonld"];
                    "application/problem+json": components["schemas"]["Error"];
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
}
